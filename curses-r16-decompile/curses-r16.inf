

Verb 'start' 'stop'
    * noun                                              -> Start
;

Verb 'stack'
    * noun                                              -> Stack
    * noun 'with' held                                  -> Stack
    * held 'on' noun                                    -> Insert
    * held 'onto' noun                                  -> Insert
    * held 'in' noun                                    -> Insert
;

Verb 'pinch' 'slap'
    * creature                                          -> Attack
    * noun                                              -> Take
;

Verb 'scratch'
    * noun                                              -> Rub
;

Verb 'ring'
    * noun                                              -> Push
;

Verb 'lay'
    * noun 'on' noun                                    -> PutOn
;

Verb 'bet' 'gamble' 'wager'
    *                                                   -> Gamble
    * 'with' noun                                       -> Gamble
;

Verb 'change' 'flip'
    * noun                                              -> SwitchOn
;

Verb 'reverse' 'revolve'
    * noun                                              -> Turn
;

Verb 'roll' 'shoot' 'toss'
    * noun                                              -> Drop
;

Verb 'pet' 'stroke' 'tickle'
    * noun                                              -> Touch
;

Verb 'etch' 'inscribe' 'scribe' 'write'
    * special                                           -> Inscribe
    * special 'on' noun                                 -> InscribeOn
;

Verb 'make' 'wish'
    *                                                   -> Wish
    * 'wish'                                            -> Wish
    * 'a//' 'wish'                                      -> Wish
    * 'for' special                                     -> Wish
;

Verb 'knock'
    * 'on' noun                                         -> Knock
    * 'at' noun                                         -> Knock
;

Verb 'anoint' 'oil'
    * noun                                              -> Anoint
;

Verb 'float' 'sail'
    *                                                   -> Sail
    * 'away'                                            -> Sail
;

Verb 'anoppe' 'eppona'
    *                                                   -> Anoppe
;

Verb 'hypnotise' 'hypnotize'
    * creature                                          -> Hypnotize
    * creature 'with' noun                              -> Hypnotize
;

Verb 'pace'
    *                                                   -> Pace
    * CroquetFunc                                       -> PaceDir
;

Verb 'milk'
    * noun                                              -> Milk
;

Verb 'lagach'
    *                                                   -> Lagach
;

Verb 'shantih'
    *                                                   -> Shantih
    * special                                           -> Shantih
    * special special                                   -> Shantih
;

Verb 'plover' 'plugh' 'xyzzy'
    *                                                   -> Xyzzy
;

Verb 'slide'
    * readchar                                          -> Slide
;

Verb 'lean' 'prop' 'rest' 'support'
    * held 'against' noun                               -> Lean
    * held 'on' noun                                    -> Lean
    * 'up' noun 'with' held                             -> PropWith
    * noun 'with' held                                  -> PropWith
;

Verb 'beep' 'bleep' 'chirp'
    *                                                   -> Beep
;

Verb 'dance' 'tango' 'waltz'
    * 'with' creature                                   -> Dance
;

Verb 'add' 'join' 'mend' 'repair'
    * noun                                              -> Repair
    * noun 'to' noun                                    -> Repair
;

Verb 'diagnose'
    *                                                   -> Diagnose
;

Verb 'play'
    * 'croquet'                                         -> PlayCroquet
    * 'with' held                                       -> Blow
    * held                                              -> Blow
;

Verb 'achetez'
    * special                                           -> Buy
;

Verb 'beckon' 'direct' 'gesture' 'point'
    * noun                                              -> PointVague
    * 'at' noun                                         -> PointAt
    * held 'at' noun                                    -> Point
;

Verb 'strike'
    * noun                                              -> Strike
    * noun 'with' held                                  -> Kill
;

Verb 'rip' 'tear'
    *                                                   -> Rip
    * 'down' noun                                       -> RipDown
    * noun                                              -> Rip
;

Verb 'tighten' 'tweak' 'unwind' 'wind' 'wrench'
    * noun                                              -> Turn
    * noun 'with' noun                                  -> TurnWith
;

Verb 'frisk'
    * animate                                           -> Search
;

Verb 'wash'
    * 'my' 'mouth' 'with' held                          -> Wash
    * 'my' 'mouth' 'out' 'with' held                    -> Wash
    * 'mouth' 'with' held                               -> Wash
    * 'mouth' 'out' 'with' held                         -> Wash
;

Verb 'board' 'embark'
    * noun                                              -> Enter
;

Verb 'exhibit' 'reveal'
    *                                                   -> Sing
;

Verb 'hang' 'mount'
    * noun 'on' noun                                    -> Insert
    * noun 'onto' noun                                  -> Insert
    * 'up' noun 'on' noun                               -> Insert
    * 'up' noun 'onto' noun                             -> Insert
    * noun 'up' 'on' noun                               -> Insert
    * noun 'up' 'onto' noun                             -> Insert
;

Verb 'kick'
    * noun                                              -> Attack
;

Verb 'ram'
    * special                                           -> Ram
;

Verb 'time'
    *                                                   -> Time
;

Verb 'help'
    *                                                   -> Help
    * special                                           -> HelpSpecial
;

Verb 'hint' 'hints'
    *                                                   -> Hints
;

Verb 'pretty'
    *                                                   -> Pretty
;

Verb 'plain'
    *                                                   -> Plain
;

Verb 'dig'
    *                                                   -> Dig
    * 'with' held                                       -> DigWith
    * special                                           -> Dig
;

Verb 'hop' 'jump' 'skip'
    *                                                   -> Jump
    * 'over' noun                                       -> JumpOver
;

Verb 'chop' 'cut' 'prune' 'slice'
    * noun                                              -> Cut
;

Verb 'fill'
    * noun                                              -> Fill
;

Verb 'drink' 'sip' 'swallow'
    *                                                   -> Drink
    * noun                                              -> Drink
;

Verb 'burn' 'light'
    * noun                                              -> Burn
    * noun 'with' held                                  -> Burn
;

Verb 'attach' 'fasten' 'fix' 'tie'
    * noun                                              -> Repair
    * noun 'to' noun                                    -> Repair
;

Verb 'clean' 'dust' 'polish' 'rub' 'scrub' 'shine' 'sweep' 'wipe'
    * noun                                              -> Rub
;

Verb 'feel' 'fondle' 'grope' 'touch'
    * noun                                              -> Touch
;

Verb 'taste'
    * noun                                              -> Taste
;

Verb 'hear' 'listen'
    *                                                   -> Listen
    * noun                                              -> Listen
    * 'to' noun                                         -> Listen
;

Verb 'smell' 'sniff'
    *                                                   -> Smell
    * noun                                              -> Smell
;

Verb 'think'
    *                                                   -> Think
;

Verb 'embrace' 'hug' 'kiss'
    * creature                                          -> Kiss
;

Verb 'awake' 'awaken' 'wake'
    *                                                   -> Wake
    * 'up'                                              -> Wake
    * creature                                          -> WakeOther
    * creature 'up'                                     -> WakeOther
    * 'up' creature                                     -> WakeOther
;

Verb 'pray'
    *                                                   -> Pray
;

Verb 'blow'
    * held                                              -> Blow
;

Verb 'swing'
    * noun                                              -> Swing
    * 'on' noun                                         -> Swing
    * 'on' noun                                         -> Swing
;

Verb 'dive' 'swim'
    *                                                   -> Swim
;

Verb 'squash' 'squeeze'
    * noun                                              -> Squeeze
;

Verb 'buy' 'purchase'
    * special                                           -> Buy
;

Verb 'climb' 'scale'
    * noun                                              -> Climb
    * 'up' noun                                         -> Climb
    * 'over' noun                                       -> Climb
;

Verb 'sing'
    *                                                   -> Sing
;

Verb 'peel'
    * noun                                              -> Take
    * 'off' noun                                        -> Take
;

Verb 'nap' 'sleep'
    *                                                   -> Sleep
;

Verb 'eat'
    * held                                              -> Eat
;

Verb 'ask'
    * creature 'about' ConTopicJ                        -> Ask
    * creature 'for' noun                               -> AskFor
;

Verb 'tell'
    * creature 'about' ConTopicJ                        -> Tell
;

Verb 'answer' 'say' 'shout' 'speak'
    *                                                   -> Shout
    * 'lagach' 'to' noun                                -> Lagach
    * ConTopicJ 'to' creature                           -> Answer
;

Verb 'wait' 'z//'
    *                                                   -> Wait
;

Verb 'attack' 'break' 'crack' 'destroy' 'fight' 'hit' 'kill' 'murder' 'punch' 'smash' 'thump' 'torture' 'wreck'
    * noun                                              -> Attack
    * noun 'with' held                                  -> Kill
;

Verb 'unlock'
    * noun 'with' held                                  -> Unlock
;

Verb 'lock'
    * noun 'with' held                                  -> Lock
;

Verb 'switch'
    * noun                                              -> SwitchOn
    * noun 'on'                                         -> SwitchOn
    * noun 'off'                                        -> SwitchOff
    * 'on' noun                                         -> SwitchOn
    * 'off' noun                                        -> SwitchOff
;

Verb 'rotate' 'screw' 'turn' 'twist' 'unscrew'
    * noun                                              -> Turn
    * noun 'on'                                         -> SwitchOn
    * noun 'off'                                        -> SwitchOff
    * 'on' noun                                         -> SwitchOn
    * 'off' noun                                        -> SwitchOff
    * noun 'inside' 'out'                               -> Turn
    * noun 'around'                                     -> Turn
    * 'round' noun                                      -> Turn
    * noun 'with' held                                  -> TurnWith
    * noun 'to' ConTopicJ                               -> Consult
;

Verb 'clear' 'move' 'press' 'push' 'shift'
    * noun                                              -> Push
    * noun noun                                         -> PushDir
    * noun 'to' noun                                    -> Transfer
;

Verb 'drag' 'pull'
    * noun                                              -> Pull
;

Verb 'adjust' 'set'
    * noun                                              -> Set
    * noun 'to' special                                 -> SetTo
;

Verb 'wave'
    *                                                   -> WaveHands
    * noun                                              -> Wave
;

Verb 'search'
    * noun                                              -> Search
;

Verb 'bother' 'curses' 'darn' 'drat'
    *                                                   -> Mild
    * special                                           -> Mild
;

Verb 'damn' 'fuck' 'shit' 'sod'
    *                                                   -> Strong
    * special                                           -> Strong
;

Verb 'sorry'
    *                                                   -> Sorry
;

Verb 'no'
    *                                                   -> No
;

Verb 'y//' 'yes'
    *                                                   -> Yes
;

Verb 'read'
    * noun                                              -> Read
    * 'about' ConTopic 'in' noun                        -> Consult
    * ConTopic 'in' noun                                -> Consult
;

Verb 'check' 'describe' 'examine' 'watch' 'x//'
    * noun                                              -> Read
    * 'reflection' 'of' noun                            -> Examine
    * noun 'in' noun                                    -> Examine
;

Verb 'exit' 'out' 'outside'
    *                                                   -> Exit
;

Verb 'in' 'inside'
    *                                                   -> Enter
;

Verb 'lie' 'sit'
    * 'on' noun                                         -> Enter
    * 'in' noun                                         -> Enter
    * 'inside' noun                                     -> Enter
    *                                                   -> Lie
    * 'down'                                            -> LieDown
    * 'down' 'on' noun                                  -> Enter
;

Verb 'cross' 'enter'
    *                                                   -> Enter
    * noun                                              -> Enter
;

Verb 'close' 'cover' 'shut'
    * noun                                              -> Close
    * 'up'                                              -> Close
    * 'off' noun                                        -> SwitchOff
    * noun 'with' noun                                  -> CloseWith
;

Verb 'open' 'uncover' 'undo' 'unwrap'
    * noun                                              -> Open
    * noun 'with' held                                  -> Unlock
;

Verb 'consult'
    * noun 'about' ConTopicJ                            -> Consult
    * noun 'on' ConTopicJ                               -> Consult
;

Verb 'l//' 'look'
    *                                                   -> Look
    * 'at' noun                                         -> Read
    * 'inside' noun                                     -> Search
    * 'in' noun                                         -> Search
    * 'into' noun                                       -> Search
    * 'under' noun                                      -> LookUnder
    * 'through' noun                                    -> Search
    * 'up' ConTopic 'in' noun                           -> Consult
    * 'up' ConTopicI 'on' noun                          -> Consult
    * 'up' ConTopicJ                                    -> LookUp
;

Verb 'i//' 'inv' 'inventory'
    *                                                   -> Inv
    * 'tall'                                            -> InvTall
    * 'wide'                                            -> InvWide
;

Verb 'go' 'leave' 'run' 'walk'
    *                                                   -> VagueGo
    * noun=IsDirection                                  -> Go
    * noun                                              -> Enter
    * 'into' noun                                       -> Enter
    * 'in' noun                                         -> Enter
    * 'inside' noun                                     -> Enter
    * 'through' noun                                    -> Enter
    * CroquetFunc                                       -> PaceDir
;

Verb 'display' 'present' 'show'
    * creature held                                     -> ShowR
    * held 'to' creature                                -> Show
    * 'off'                                             -> Sing
;

Verb 'feed' 'give' 'offer' 'pay'
    * creature held                                     -> GiveR
    * held 'to' creature                                -> Give
    * 'over' held 'to' creature                         -> Give
;

Verb 'discard' 'drop' 'throw'
    * multiheld                                         -> Drop
    * multiexcept 'in' noun                             -> Insert
    * multiexcept 'into' noun                           -> Insert
    * multiexcept 'on' noun                             -> PutOn
    * multiexcept 'onto' noun                           -> PutOn
    * multiexcept 'down' noun                           -> Insert
    * held 'at' noun                                    -> ThrowAt
    * held 'against' noun                               -> ThrowAt
;

Verb 'transfer'
    * noun 'to' noun                                    -> Transfer
;

Verb 'empty'
    * noun                                              -> Empty
    * 'out' noun                                        -> Empty
    * noun 'out'                                        -> Empty
    * noun 'to' noun                                    -> EmptyT
    * noun 'into' noun                                  -> EmptyT
    * noun 'on' noun                                    -> EmptyT
    * noun 'onto' noun                                  -> EmptyT
;

Verb 'insert'
    * multiexcept 'in' noun                             -> Insert
    * multiexcept 'into' noun                           -> Insert
;

Verb 'put'
    * multiexcept 'in' noun                             -> Insert
    * multiexcept 'inside' noun                         -> Insert
    * multiexcept 'into' noun                           -> Insert
    * multiexcept 'on' noun                             -> PutOn
    * multiexcept 'onto' noun                           -> PutOn
    * 'on' held                                         -> Wear
    * 'down' multiheld                                  -> Drop
    * multiheld 'down'                                  -> Drop
;

Verb 'don' 'wear'
    * held                                              -> Wear
;

Verb 'disrobe' 'doff' 'shed'
    * held                                              -> Disrobe
;

Verb 'remove'
    * held                                              -> Disrobe
    * multi                                             -> Take
    * multiinside 'from' noun                           -> Remove
;

Verb 'stand'
    *                                                   -> Exit
    * 'up'                                              -> Exit
    * 'on' noun                                         -> Enter
;

Verb 'pick'
    * 'up' multi                                        -> Take
    * multi 'up'                                        -> Take
;

Verb 'carry' 'get' 'hold' 'take'
    * 'out'                                             -> Exit
    * 'off'                                             -> Exit
    * 'up'                                              -> Exit
    * multi                                             -> Take
    * multiinside 'from' noun                           -> Remove
    * 'in' noun                                         -> Enter
    * 'into' noun                                       -> Enter
    * 'on' noun                                         -> Enter
    * multiinside 'off' noun                            -> Remove
    * 'off' worn                                        -> Disrobe
    * 'off' noun                                        -> TakeOff
    * 'inventory'                                       -> Inv
    * AnotherCroquetFunc                                -> PaceDir
;

Verb 'objects'
    *                                                   -> Objects
;

Verb 'places'
    *                                                   -> Places
;

Verb 'version'
    *                                                   -> Version
;

Verb 'notify'
    * 'on'                                              -> NotifyOn
    * 'off'                                             -> NotifyOff
;

Verb 'nouns' 'pronouns'
    *                                                   -> Nouns
;

Verb 'brief' 'normal'
    *                                                   -> Brief
;

Verb 'long' 'verbose'
    *                                                   -> Verbose
;

Verb 'short' 'superbrief'
    *                                                   -> Superbrief
;

Verb 'noscript' 'unscript'
    *                                                   -> ScriptOff
;

Verb 'script'
    *                                                   -> ScriptOn
    * 'off'                                             -> ScriptOff
    * 'on'                                              -> ScriptOn
;

Verb 'save'
    *                                                   -> Save
;

Verb 'verify'
    *                                                   -> Verify
;

Verb 'restart'
    *                                                   -> Restart
;

Verb 'restore'
    *                                                   -> Restore
;

Verb 'die' 'q//' 'quit'
    *                                                   -> Quit
;

Verb 'full' 'fullscore'
    *                                                   -> FullScore
    * 'score'                                           -> FullScore
;

Verb 'score'
    *                                                   -> Score
;



Object compass "compass"        
  has   concealed;

Object -> n_obj "north wall"    
  with  name 'n//' 'north' 'wall',
        w_to w_obj,
        article "the",
        time_left 0,
  has   scenery;

Object -> s_obj "south wall"    
  with  name 's//' 'south' 'wall',
        w_to ne_obj,
        article "the",
        time_left 0,
  has   scenery;

Object -> e_obj "east wall"     
  with  name 'e//' 'east' 'wall',
        w_to se_obj,
        article "the",
        time_left 0,
  has   scenery;

Object -> w_obj "west wall"     
  with  name 'w//' 'west' 'wall',
        w_to nw_obj,
        article "the",
        time_left 0,
  has   scenery;

Object -> ne_obj "northeast wall"       
  with  name 'ne' 'northeast' 'wall',
        w_to sw_obj,
        article "the",
        time_left 0,
  has   scenery;

Object -> se_obj "southeast wall"       
  with  name 'se' 'southeast' 'wall',
        w_to u_obj,
        article "the",
        time_left 0,
  has   scenery;

Object -> nw_obj "northwest wall"       
  with  name 'nw' 'northwest' 'wall',
        w_to d_obj,
        article "the",
        time_left 0,
  has   scenery;

Object -> sw_obj "southwest wall"       
  with  name 'sw' 'southwest' 'wall',
        w_to out_obj,
        article "the",
        time_left 0,
  has   scenery;

Object -> u_obj "ceiling"       
  with  name 'u//' 'up' 'ceiling',
        w_to in_obj,
        article "the",
        time_left 0,
  has   scenery;

Object -> d_obj "floor" 
  with  name 'd//' 'down' 'floor',
        w_to thedark,
        article "the",
        time_left 0,
  has   scenery;

Object -> out_obj "outside"     
  with  w_to LibraryMessages,
        article "the",
        time_left 0,
  has   scenery;

Object -> in_obj "inside"       
  with  w_to selfobj,
        article "the",
        time_left 0,
  has   scenery;

Object thedark "Darkness"       
  with  initial nothing,
        description "It is pitch dark, and you can't see a thing.",
        short "Darkness",
  has   ;

Object selfobj "yourself"       
  with  before $ffff,
        after $ffff,
        life $ffff,
        orders nothing,
        description "As good-looking as ever.",
        describe NULL,
        time_left 0,
        daemon $ffff,
        each_turn $ffff,
        capacity 100,
        short nothing,
        parse_name nothing,
  has   animate concealed proper transparent;

Object LibraryMessages "lm"     
  with  before LMBefore,
  has   ;

Object rod_of_fire "Fire"       
  with  name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
        before RodBefore,
        sw_to nothing,
        u_to rod_display_before,
        d_to "featureless mahogany rods",
        article "a",
        short rod_short,
        parse_name RodParse,
        rod_word 'fire',
        rod_action RodOfFireAction,
        angel_hint "This is rather dangerous, I'm afraid. Use only on vegetative matter.",
  has   rod_attr unidentifed_rod;

Object rod_of_returning "Returning"     
  with  name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
        before RodBefore,
        sw_to nothing,
        u_to rod_display_before,
        d_to "featureless mahogany rods",
        article "a",
        short rod_short,
        parse_name RodParse,
        rod_word 'returning',
        rod_action RodOfReturningAction,
        devil_hint "Well, that's not very useful, is it?  I'd go on strike if I were you.",
  has   rod_attr unidentifed_rod;

Object rod_of_stalking "Stalking"       
  with  name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
        before RodBefore,
        sw_to nothing,
        u_to rod_display_before,
        d_to "featureless mahogany rods",
        article "a",
        short rod_short,
        parse_name RodParse,
        rod_word 'stalking',
        rod_action RodOfStalkingAction,
        devil_hint "It has no horticultural application.",
  has   rod_attr unidentifed_rod;

Object rod_of_infinity "Infinity"       
  with  name 'rod' 'of' 'mahogany' 'featureless' 'plaque' 'rod' 'of' 'mahogany' 'featureless' 'plaque',
        before RodBefore,
        sw_to nothing,
        u_to rod_display_before,
        d_to "featureless mahogany rods",
        article "a",
        short rod_short,
        parse_name RodParse,
        rod_word 'infinity',
        rod_action RodOfInfinityAction,
        angel_hint "Well, where might you have seen infinity before?",
  has   rod_attr unidentifed_rod;

Object rod_of_husbandry "Husbandry"     
  with  name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
        before RodBefore,
        sw_to nothing,
        u_to rod_display_before,
        d_to "featureless mahogany rods",
        article "a",
        short rod_short,
        parse_name RodParse,
        rod_word 'husbandry',
        rod_action RodOfHusbandryAction,
        angel_hint "Perhaps you should look up ~husbandry~ in a dictionary.",
  has   rod_attr unidentifed_rod;

Object rod_of_bronze "Bronze"   
  with  name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
        before RodBefore,
        sw_to nothing,
        u_to rod_display_before,
        d_to "featureless mahogany rods",
        article "a",
        short rod_short,
        parse_name RodParse,
        rod_word 'bronze',
        rod_action RodOfBronzeAction,
        angel_hint "Bronze is the key here. Have you seen any other bronze anywhere?",
  has   rod_attr unidentifed_rod;

Object rod_of_sacrifice "Sacrifice"     
  with  name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
        before RodBefore,
        sw_to nothing,
        u_to rod_display_before,
        d_to "featureless mahogany rods",
        article "a",
        short rod_short,
        parse_name RodParse,
        rod_word 'sacrifice',
        rod_action RodOfSacrificeAction,
        angel_hint "Far, far too dangerous. The age of martyrs in the church is long gone, you know.",
  has   rod_attr unidentifed_rod;

Object rod_of_luck "Luck"       
  with  name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
        before RodBefore,
        sw_to nothing,
        u_to rod_display_before,
        d_to "featureless mahogany rods",
        article "a",
        short rod_short,
        parse_name RodParse,
        rod_word 'luck',
        rod_action RodOfLuckAction,
        angel_hint "Well, if there's such a thing as luck, maybe this would help.",
  has   rod_attr unidentifed_rod;

Object rod_of_ice "Ice" 
  with  name 'rod' 'of' 'mahogany' 'featureless' 'plaque' 'rod' 'of' 'mahogany' 'featureless' 'plaque',
        before RodBefore,
        sw_to nothing,
        u_to rod_display_before,
        d_to "featureless mahogany rods",
        article "a",
        short rod_short,
        parse_name RodParse,
        rod_word 'ice',
        rod_action RodOfIceAction,
        angel_hint "Use only at heated moments, when affairs are delicately balanced.",
  has   rod_attr unidentifed_rod;

Object rod_of_language "Language"       
  with  name 'rod' 'of' 'language',
        before RodBefore,
        sw_to ListingRods,
        u_to rod_display_before,
        article "the",
        short rod_short,
        parse_name RodParse,
        rod_action RodOfLanguageAction,
  has   rod_attr;

Object rod_of_returning2 "Returning"    
  with  name 'rod' 'of' 'returning',
        before RodBefore,
        sw_to ListingRods,
        u_to rod_display_before,
        article "the",
        short rod_short,
        parse_name RodParse,
        rod_action RodOfReturningAction,
  has   rod_attr;

Object rod_of_life "Life"       
  with  name 'life' 'high' 'rod' 'of',
        before LifeDeathLoveBefore RodBefore,
        after LifeDeathLoveAfter,
        sw_to rod_func1,
        u_to rod_display_before,
        initial "The High Rods of Life, Love and Death lean together in a pyramid at the top of the steep slope, balanced rather delicately.",
        description LifeDesc,
        article "the",
        short rod_short,
        parse_name RodParse,
        rod_action LifeAction,
        angel_hint "Astonishing!  One of the three high Rods!",
  has   rod_attr high_rod;

Object rod_of_death "Death"     
  with  name 'death' 'high' 'rod' 'of',
        before LifeDeathLoveBefore RodBefore,
        after LifeDeathLoveAfter,
        sw_to rod_func1,
        u_to rod_display_before,
        description LifeDesc,
        article "the",
        short rod_short,
        parse_name RodParse,
        rod_action LifeAction,
        angel_hint "Astonishing!  One of the three high Rods!",
  has   concealed rod_attr high_rod;

Object rod_of_love "Love"       
  with  name 'love' 'high' 'rod' 'of',
        before LifeDeathLoveBefore RodBefore,
        after LifeDeathLoveAfter,
        sw_to rod_func1,
        u_to rod_display_before,
        description LifeDesc,
        article "the",
        short rod_short,
        parse_name RodParse,
        rod_action LifeAction,
        angel_hint "Astonishing!  One of the three high Rods!",
  has   concealed rod_attr high_rod;

Object crumpled_piece_of_paper "crumpled piece of paper"        
  with  name 'crumpled' 'paper',
        sw_to n_obj,
        description "   Things to do:^^   1. Find map^   2. Phone airport to check parking^   3. Health forms...^^and so on. Let's face it, 1. is more enticing than the rest put together.",
        devil_hint "Immensely useful, that.",
  has   ;

Object electric_torch "electric torch"  
  with  name 'electric' 'torch' 'compartment',
        before TorchBefore,
        after TorchAfter,
        sw_to s_obj,
        description "The torch has a battery compartment which can be reached by opening it up.",
        article "an",
        daemon TorchTimer,
        devil_hint "Pity you can't change the batteries.",
  has   container light moved openable;

Object -> old_smudged_battery "old smudged battery"     
  with  name 'old' 'smudged' 'battery',
        sw_to s_obj,
        article "an",
        number 200,
  has   battery_flag;

Object chocolate_biscuit "chocolate biscuit"    
  with  name 'chocolate' 'biscuit',
        after BiscuitAfter,
        description "Oatmeal covered with plain chocolate, since you ask.",
        devil_hint "I bet you didn't know that chocolate biscuit manufacturers are damned in perpetuity?  I'm afraid the chapters about that in the Old Testaments were lost, though, and now no-one can remember why.",
  has   edible moved;

Object Attic "Attic"    
  with  name 'beams' 'wiring' 'floor' 'floorboards',
        n_to Old_Winery,
        s_to Old_Furniture,
        e_to Servants_Room,
        d_to hinged_trapdoor,
        description "The attics, full of low beams and awkward angles, begin here in a relatively tidy area which extends north, south and east. The wooden floorboards seem fairly sound, just as well considering how heavy all these teachests are. But the old wiring went years ago, and there's no electric light.",
        section T_MODERN,
  has   ;

Object -> hinged_trapdoor "hinged trapdoor"     
  with  name 'hinged' 'trap' 'door' 'trapdoor',
        before TrapdoorBefore,
        after TrapdoorAfter,
        n_to House,
        s_to "There is a closed trapdoor in the middle of the floor.",
        w_to thedark,
        initial "A hinged trapdoor in the floor stands open, and light streams in from below.",
  has   door light open openable static;

Object -> teachests "teachests" 
  with  name 'tea' 'chests' 'teachests' 'chest' 'teachest',
        before TeachestsBefore,
        description "Open-topped. You could easily look inside, if so minded.",
        article "some",
  has   container open scenery;

Object -> -> Meldrewes_History "History of the Meldrews (vol. II)"      
  with  name 'book' 'history',
        before HistoryBefore,
        sw_to n_obj,
        description "It was to have been the Honourable Peter Meldrew's life's work, a two-volume edition giving the definitive family history. Unfortunately, although he claimed to have hunted for evidence to the ends of the earth, he never could find a detail he wanted for volume I, and it was never published. Somehow, this typifies your family, and consulting this worthy book about your ancestors makes you realise what an uncanny knack they had for never quite achieving anything.^^Unless, of course, you count having an awful lot of children. So many Meldrews are listed here that you'll have to look them up individually.",
        article "the",
        parse_name ConsultableParsename,
        devil_hint "What a boring old book!  There's nobody worth looking up.",
  has   concealed consultable;

Object antique_jewellery_box "antique jewellery box"    
  with  name 'antique' 'jewellery' 'box',
        e_to delicate_gold_key,
        initial "In one corner is a jewellery box, which had previously been hidden by the open trapdoor.",
        description "A graceful lady's box, bearing the initials A. M. and engraved with a drawing of what seems to be a rabbit's foot.",
        article "an",
        angel_hint "Try investigating the world of the romantic novel, out on the balconies of life.",
  has   concealed container lockable locked openable;

Object -> four_leafed_clover "four-leafed clover"       
  with  name 'four' 'leafed' 'clover',
        description "Actually a four-leafed sprig of herb paris (Paris Quadrifolia) in the shape of a fourfold true-love knot. But that was good enough for Alison.",
        rod_assoc rod_of_luck,
        angel_hint "Not much use as it is, is it?",
  has   hidden_rod;

Object House "House"    
  with  after HouseAfter,
        section T_MODERN,
  has   light;

Object Servants_Room "Servant's Room"   
  with  name 'bedside' 'table',
        before ServantsRoomBefore,
        n_to nothing,
        w_to Attic,
        d_to nothing,
        description "Once upon a time, servants in great houses lived in awful little crevices and excuses for rooms like this one. They must have been in permanent danger of suffocation, for there are no windows and only a doorway to the west. A bed is still kept here, and the sight of it brings on drowsiness in all this warm stuffy air. All you want to do is curl up and sleep.",
        section T_MODERN,
  has   ;

Object -> classical_dictionary "classical dictionary"   
  with  name 'hobsons' 'choice' 'classical' 'dictionary' 'book',
        before DictionaryBefore,
        sw_to n_obj,
        initial "There's a little book on the tiny bedside table.",
        description "~Hobson's: A Choice Classical Dictionary~. It claims to have numerous entries.",
        article "Hobson's",
        parse_name ConsultableParsename,
        devil_hint "Lots of naughty words in that one.",
  has   consultable;

Object -> servants_bed "camp bed"       
  with  name 'camp' 'bed',
  has   enterable scenery supporter;

Object -> old_striped_scarf "old striped scarf" 
  with  name 'old' 'striped' 'scarf',
        initial "An old striped scarf hangs up behind the doorway.",
        description "This is an old Biblioll College scarf, made by Dunn and Co. (naturally). It has four stripes: royal blue, emerald, dark grey and scarlet.",
        article "an",
        devil_hint "The very height of fashion, if you ignore the colours and wear it regardless.",
  has   clothing;

Object tight_door "tight door"  
  with  name 'tight' 'door',
        initial "A tight door stands open in the northern wall, giving onto the servants' staircase.",
  has   static;

Object Old_Furniture "Old Furniture"    
  with  name 'armchairs' 'umbrella' 'table' 'stand' 'rubbish' 'armchair',
        n_to Attic,
        se_to Over_the_East_Wing,
        description "Scruffy old furniture is piled up here: armchairs with springs coming out, umbrella stands, a badly scratched cupboard, a table with one leg missing... You try to remember why you keep all this rubbish, and fail. Anyway the attic continues to the southeast.",
        cant_go "The attic turns from north to southeast here.",
        section T_MODERN,
  has   ;

Object -> furniture "furniture" 
  with  name 'furniture',
        description "Nothing there, but that cupboard looks interesting.",
  has   scenery;

Object -> scratched_cupboard "scratched cupboard"       
  with  name 'scratched' 'cupboard',
  has   container open openable scenery;

Object -> -> bird_whistle "bird whistle"        
  with  name 'bird' 'whistle' 'harrison',
        before WhistleBefore,
        description "A patent ~Harrison~ bird-whistle, according to the slogan on one side.",
        devil_hint "It has a calm, soothing effect.",
  has   ;

Object -> -> gift_wrapped_parcel "gift-wrapped parcel"  
  with  name 'gift' 'parcel',
        before ParcelBefore,
        devil_hint "Shame the wrapping paper won't come off.",
  has   ;

Object -> -> medicine_bottle "mb"       
  with  name 'medicine' 'bottle',
        before MedicineBefore,
        initial nothing,
        description "~Antidote only: no preventative effect.~",
        short MedicineShort,
        devil_hint "These bottles can even survive long drops, so perhaps you should try fire.",
  has   container locked openable;

Object -> -> -> red_tablet "red tablet" 
  with  name 'red' 'pill' 'tablet',
        after TabletAfter,
        devil_hint "This drug is for fun, it isn't an antidote. And it tastes gorgeous...",
  has   edible scored;

Object box_of_chocolates "box of chocolates"    
  with  name 'box' 'of' 'chocolate' 'chocs',
        devil_hint "Far too nice to give to anybody else. In fact...",
  has   edible;

Object wrapping_paper "wrapping paper with reindeer on" 
  with  name 'wrapping' 'paper' 'reindeer',
        article "some",
        devil_hint "The reindeer have enormous significance.",
  has   ;

Object postcard_of_the_Champs_Elysees "postcard of the Champs-Elysees"  
  with  name 'postcard' 'card',
        after PostcardAfter,
        sw_to n_obj,
        description "It is addressed to the house, and postmarked 1963, but has no message. Odd, that.",
        devil_hint "There's no message there to read.",
  has   ;

Object Over_the_East_Wing "Over the East Wing"  
  with  name 'steps',
        s_to Disused_Observatory,
        e_to East_Annexe,
        w_to Dark_Room,
        nw_to Old_Furniture,
        d_to Disused_Observatory,
        initial OverEastWingInitial,
        description "The air is dusty and warm, almost making you choke in this rather empty area. The attic turns from northwest to east, and there is also a tight doorway leading west. A short flight of wooden steps leads down and to the south.",
        section T_MODERN,
  has   ;

Object -> Austin "Austin"       
  with  name 'austin' 'cat' 'ginger' 'tail',
        before AustinBefore,
        after AustinAfter,
        life AustinLife,
        initial "Austin, your incorrigible ginger cat, lounges around here.",
        description "(Aunt Jemima has two cats, Jane and Austin, but she finds Austin especially annoying - about the only point you have ever agreed with her about.)^^Austin, a ginger with a long tail and an uncompromisingly lazy expression, is the kind of cat who hates being pushed around.",
        daemon AustinDemon,
  has   animate proper;

Object Dark_Room "Dark Room"    
  with  after DarkRoomAfter,
        e_to Over_the_East_Wing,
        description "This is a roughly-furnished photographer's dark room, used by your grandfather years ago. There's nothing much here now, since you threw the chemicals out in case the children found them.",
        cant_go "The only doorway is back east.",
        section T_MODERN,
  has   ;

Object -> sepia_photograph "sepia photograph"   
  with  name 'sepia' 'photo' 'photograph' 'plaque',
        initial "Mounted on a plaque is an old sepia photograph of a man.",
        description "The photograph is one of the very early ones which looks as if it was taken in the dark because the chemicals have gradually oxidised. The poor man in the frame (Mr Roger Meldrew, Esquire) looks as if he was propped up by a big clamp to hold him still for five minutes, and that's because he was.",
        article "the old",
  has   static;

Object -> hanging_cord "hanging cord"   
  with  name 'hanging' 'cord',
        before HangingCordBefore,
        initial "You bump your head on the cord hanging from the ceiling, for the umpteenth time.",
        description "It is attached to the ceiling.",
  has   static;

Object -> -> golden_orb "glowing golden orb"    
  with  name 'glowing' 'golden' 'orb',
        before GlowingOrbBefore,
        initial "Sitting on the grass, beside the well, is a glowing golden orb.",
        description "A treasure in every sense, but misted over, like condensation on a cold window. Odd shapes seem visible through the haze: a horse's head, castle walls, a priest's crook.",
  has   scored;

Object -> photographers_flash "photographer's flash"    
  with  name 'photograph' 'flash' 'compartment',
        before FlashAFter,
        sw_to s_obj,
        initial "A rather more modern photographer's flash lies on a shelf to one side.",
        description "The kind of black box which often sits on top of a camera, used to illuminate otherwise dim scenes. It has an openable compartment on the side, with room left inside for a battery and a timer mechanism (which seem to be optional extras).",
        angel_hint "When you can get this working, perhaps you should take it somewhere prominent.",
  has   container openable;

Object red_lamp "red lamp"      
  with  name 'red' 'lamp' 'light' 'developing',
        description "Things do look subtly different in this light.",
  has   scenery;

Object Disused_Observatory "Disused Observatory"        
  with  name 'mural' 'zodiac' 'beam' 'stand',
        after ObservatoryAfter,
        n_to Over_the_East_Wing,
        s_to Souvenirs_Room,
        w_to Library_Storage,
        u_to Over_the_East_Wing,
        d_to Souvenirs_Room,
        description "Once upon a time, this small circular room had a dome and a telescope, but it leaked dreadfully and so now there's a proper roof.^^A circular mural painted with the signs of the zodiac is interrupted by a short flight of stairs leading up to the north, a smoke detector, a west doorway to a shadowy alcove and the continuation of the stairs down and to the south.",
        section T_MODERN,
  has   ;

Object -> smoke_detector "smoke detector"       
  with  name 'smoke' 'detector' 'alarm' 'fire',
        description "It isn't at all clear on what principle the detector works. It looks like a smoke detector, certainly. But you just left the contractors to sort out all those boring fire prevention matters for themselves.^^They were a slap-dash firm, too, from what you remember. They put the little white thing high up, right in the middle of the Capricorn scene on the mural. And even if there was a fire, chances are it would be useless.",
  has   scenery;

Object -> solid_glass_ball "solid glass ball"   
  with  name 'glass' 'ball',
        before GlassBallBefore,
        initial "Mounted on the old telescope stand is what looks like a solid glass ball.",
  has   static;

Object Library_Storage "Library Storage"        
  with  name 'tank',
        e_to Disused_Observatory,
        description "Once upon a time, the house library was used as a gun-room, and all the unwanted books kept up here. Now this is just another awkward cranny, with a water tank and some pipes in one corner which are something to do with the central heating.",
        cant_go "From here, you can only squeeze back east to the observatory.",
        section T_MODERN,
  has   ;

Object -> water_pipe "water pipe"       
  with  name 'water' 'pipe' 'joint' 'pipes',
        before WaterPipeBefore,
        description "The joint on the water pipe looks none too sturdy.",
  has   concealed static;

Object -> romantic_novel "romantic novel"       
  with  name 'romance' 'romantic' 'novel' 'book',
        before RomanticNovelBefore,
        sw_to n_obj,
        initial "A romantic novel and a book of poetry are the only books left, and they're propping up a water pipe near a rather loose joint - it really is time you called a plumber to sort this one out.",
        description "~Coronets for the Cotton Girl~, by Miss Marie Swelldon, published London, 1912. It's all about the happy-go-lucky daughter of a Yorkshire mill owner and her adventures marrying into the aristocracy.",
        parse_name ConsultableParsename,
        devil_hint "Don't bother reading or thinking about it. Nothing to do with your family.",
  has   consultable;

Object -> book_of_Twenties_poetry "book of Twenties poetry"     
  with  name 'poetry' 'book',
        before PoetryBefore,
        sw_to n_obj,
        parse_name ConsultableParsename,
        devil_hint "My my, a golden age for clear, simple poetry. At last, an end to the dreary obscurity of Tennyson, Kipling and Hardy.",
  has   concealed consultable;

Object Souvenirs_Room "Souvenirs Room"  
  with  name 'souvenirs' 'holiday' 'snaps' 'beam',
        before SouvenirsRoomBefore,
        after SouvenirsRoomAfter,
        n_to Disused_Observatory,
        s_to SouvenirsRoomSouth,
        u_to Disused_Observatory,
        description "This is where you ought to have left the wretched map, in the family lumber-room of souvenirs and holiday snaps. You checked it thoroughly earlier, and can't bear the thought of searching it all again. A slide projector is aimed at the whitewashed south wall, one of the outside walls of the house. The only way to go is back up to the observatory.",
        section T_MODERN,
  has   ;

Object -> slide_projector "slide projector"     
  with  name 'slide' 'projector' 'switch' 'dial' 'slot' 'focus',
        before ProjectorBefore,
        after ProjectorAfter,
        description "It has an on/off switch on the side, and a slot for holding whatever is to be projected. There is also a little dial on the back, perhaps for the focus.",
  has   container open scenery switchable;

Object -> south_wall "south wall"       
  with  before SouthWallBefore,
        n_to nothing,
        w_to ne_obj,
  has   concealed door open scenery static;

Object East_Annexe "East Annexe"        
  with  name 'gap' 'tiles' 'roof',
        before EastAnnexeBefore,
        n_to cupboard_door,
        s_to Dead_End,
        w_to Over_the_East_Wing,
        description EastAnnexeDesc,
        section T_MODERN,
  has   light;

Object -> insulation_rolls "insulation rolls"   
  with  name 'insulation' 'rolls' 'roll',
        before InsulationBefore,
        article "some",
  has   scenery;

Object -> -> new_battery "new-looking battery"  
  with  name 'new' 'battery',
        sw_to s_obj,
        number 300,
        devil_hint "That is a difficult puzzle, yes.",
  has   battery_flag;

Object -> cupboard_door "cupboard door" 
  with  name 'cupboard' 'door',
        before CupboardBefore,
        n_to Inside_Cupboard,
        s_to "In the north wall is an intriguing closed cupboard door.",
        e_to small_brass_key,
        w_to w_obj,
        initial "In the north wall is an open cupboard door, large enough to step inside.",
  has   door lockable openable static;

Object Dead_End "Dead End"      
  with  name 'soot' 'chimney' 'sweeping' 'gear',
        before DeadEndBefore,
        n_to East_Annexe,
        s_to secret_door,
        e_to nothing,
        d_to nothing,
        description "The winding attic comes to a dead end here, and particularly dirty it is too, what with soot everywhere from the broken old chimney sweeping gear.",
        section T_MODERN,
  has   ;

Object -> canvas_rucksack "canvas rucksack"     
  with  name 'canvas' 'rucksack' 'sack',
        initial "Great Scott!  That old canvas rucksack must be the very one your famous ancestor, the African explorer Ebenezer Meldrew, brought back from the Zambezi Expedition of 1882!",
        description "On second thoughts, now you look at more closely, it seems to be the rucksack you bought to go to Paris with five years ago.",
        devil_hint "It might be handy, if only it could carry anything.",
  has   clothing container open openable;

Object secret_door "secret door"        
  with  name 'secret' 'door',
        n_to Alisons_Writing_Room,
        s_to "The secret door is closed.",
        w_to ne_obj,
        initial "A secret door stands open in the south wall!",
  has   concealed door open openable static;

Object fire_escape "fire escape"        
  with  name 'fire' 'escape' 'hatchway' 'hatch',
        n_to Beside_the_Drive,
        w_to thedark,
        initial "A hatchway in the east wall, onto an old iron fire escape, is open and light floods in through it. (Some fool must have set the alarm off.)",
  has   door open static;

Object Inside_Cupboard "Inside Cupboard"        
  with  s_to East_Annexe,
        w_to big_iron_fireplace,
        u_to cranked_skylight,
        description "This is a surprisingly spacious cupboard, which you can't recall ever visiting before today. You really ought to use this convenient empty room for something...",
        section T_MODERN,
  has   ;

Object -> painting_of_Mad_Isaac_Meldrewe "painting of Mad Isaac Meldrewe"       
  with  name 'painting' 'of' 'mad' 'isaac' 'picture',
        after IsaacPaintingAfter,
        life LagachLife,
        initial "A large painting of Mad Isaac Meldrewe, your eighteenth-century ancestor, is propped up against the west wall.",
        description "It used to hang in the downstairs landing, and the red, deranged eyes annoyed everybody who passed. Then Aunt Jemima picked up the ridiculous idea that it was by Sir Joshua Reynolds and had it valued. Happily it wasn't and, to cut a long story long, it ended up here.",
        devil_hint "Carry this with you everywhere you go.",
  has   ;

Object -> big_iron_fireplace "big iron fireplace"       
  with  name 'iron' 'fireplace' 'chimney',
        after FireplaceAfter,
        n_to Chimney,
        w_to nw_obj,
        initial "There is a big iron fireplace in the west wall.",
  has   concealed container door open static;

Object -> cranked_skylight "cranked skylight"   
  with  name 'crank' 'cranked' 'skylight' 'handle',
        before SkylightBefore,
        n_to Roof,
        s_to "Above you is a blacked-out skylight with a crank handle.",
        w_to in_obj,
        initial "The skylight above is open, and the sky does indeed light the room.",
        description "It was painted out black during the first wave of Zeppelin air raids in World War I. This is completely irrelevant, but you did ask.",
  has   door static;

Object -> gas_mask "gas mask"   
  with  name 'gas' 'mask' 'gasmask',
        after GasMaskAfter,
        devil_hint "The cork filters have gone. It's useless now.",
  has   clothing;

Object Roof "Roof"      
  with  name 'roof' 'balcony' 'skylight' 'tiles' 'tile' 'catwalk',
        nw_to Battlements,
        d_to Inside_Cupboard,
        description "This is a recessed area of the roof, open to the skies but screened from below. There used to be a flagpole here, but not any more. An open skylight leads down, and a fairly safe catwalk leads northwest. However, the red-tiled roof is vertiginous and you have vertigo, which makes it especially annoying that there's an odd little balcony too far away to the south.",
        cant_go "William Wordsworth once described poetry as emotion recollected in tranquillity. If so, hospitals must be full of people turning out verses about what it was like to fall off the roof of a high building. Perhaps it might be better not to join them.",
        section T_MODERN,
  has   light;

Object Battlements "Battlements"        
  with  name 'battlements' 'crenellations',
        se_to Roof,
        description "The old crenellated battlements of the house. An Englishman's home is, of course, his castle, but Meldrew Hall never saw much fighting and these military-looking features were just a seventeenth-century fashion. They also weren't intended for standing on, and the only safe way to proceed is back southeast.^^It is peculiarly cold here.",
        cant_go "The rooftop is far too dangerous in that direction.",
        section T_MODERN,
  has   light;

Object -> iron_key "gothic-looking iron key"    
  with  name 'gothic' 'looking' 'iron' 'key' 'gothic-looking',
        before GothicKeyBefore,
        sw_to compass,
        initial IronKeyInitial,
        devil_hint "Unfortunately, what you need this for is up in the clouds.",
  has   scored;

Object -> Sir_Joshua_Meldrewe "Sir Joshua Meldrewe"     
  with  name 'ghost' 'of' 'sir' 'joshua' 'meldrewe' 'meldrew' 'georgian',
        life GhostLife,
        description "He is dressed in a grey shadow of Georgian finery.",
        article "the ghost of",
        number 0,
        daemon JoshuaMeldreweDaemon,
  has   animate concealed;

Object Chimney "Chimney"        
  with  before ChimneyBefore,
        e_to Inside_Cupboard,
        d_to Priests_Hole,
        description "The chimney is cramped, sooty, unpleasant and has no floor to speak of, so you are held up only by jamming your feet against the walls. To the east, through the fireplace, is the cupboard.",
        cant_go "Not a chance!",
        section T_MODERN,
  has   ;

Object -> sooty_old_stick "sooty old stick"     
  with  name 'sooty' 'stick',
        initial "Wedged loosely in beside you is a sooty old stick.",
        rod_assoc rod_of_fire,
        devil_hint "It's exactly what it seems.",
  has   hidden_rod;

Object Priests_Hole "Priest's Hole"     
  with  name 'cross' 'padded' 'chute' 'crawl',
        before PriestHoleBefore,
        u_to Chimney,
        d_to hatch,
        description "Good heavens, so the house has a priest hole after all!  It was always a family legend but nobody seemed to know quite where it was. Apart from a cross painted on one wall and a padded floor (to absorb the noise), this spartan cranny is featureless. Nevertheless there is a spooky air of the supernatural about... A narrow crawl leads up into the chimney.",
        section T_MODERN,
  has   scored;

Object -> hatch "hatch" 
  with  name 'hatch' 'door',
        n_to Cellar_West,
        s_to "Low down on one wall is a little hatch door, which if it were open would be large enough to enter.",
        e_to small_brass_key,
        w_to thedark,
        initial "An open hatch-door in the wall at floor level reveals a chute leading down into darkness.",
        description "Perhaps the attic key might unlock it?  It does look modern compared to everything else here.",
  has   door lockable locked openable static;

Object -> ancient_prayer_book "ancient prayer book"     
  with  name 'diary' 'ancient' 'prayer' 'book',
        before PrayerBookBefore,
        sw_to n_obj,
        initial "The dust and grime on the floor almost obscures an ancient prayer book.",
        description "Despite appearances, this is not a prayer book after all but is Mad Isaac's diary of supernatural investigations!  The script is cursive and cursory as he rambles on through all those theories about the Curse. There's so much of it that you'd better just look up particular years.",
        article "an",
        parse_name ConsultableParsename,
        devil_hint "The really good research was in his earlier years.",
  has   consultable;

Object Alisons_Writing_Room "Alison's Writing Room"     
  with  name 'engraving' 'dice' 'outline' 'sixes' 'door',
        before WritingRoomBefore,
        after WritingRoomAfter,
        n_to Dead_End,
        s_to windows,
        description WritingRoomDesc,
        cant_go "There's just the secret north door, unless of course you count the windows.",
        section T_MODERN,
  has   light;

Object -> comfortable_bed "comfortable bed"     
  with  name 'comfortable' 'bed',
        before ComfyBedBefore,
  has   enterable light scenery supporter;

Object -> windows "windows"     
  with  name 'windows' 'window' 'latticed' 'glass' 'lattice',
        before WindowBefore,
        n_to Tiny_Balcony,
        s_to "Blue sky can be seen through south-facing windows, latticed with black lead and shut tight.",
        w_to ne_obj,
        initial "Black-latticed windows open on a beautiful summer's day.",
  has   door static;

Object -> long_vanity_mirror "long vanity mirror"       
  with  name 'long' 'vanity' 'mirror',
        before MirrorBefore,
        initial "There is a long vanity mirror beside the bed.",
  has   static;

Object Tiny_Balcony "Tiny Balcony"      
  with  name 'roof' 'motorway' 'garden',
        n_to Alisons_Writing_Room,
        description "A tiny balcony around Miss Alison's windows, offering fresh air, blue skies and a magnificent view over the gardens down to the droning motorway in the distance. The roof is too perilous to scale even if you had a good reason (which you haven't), so you had better go back north.",
        cant_go "The rooftop is far too dangerous in that direction.",
        section T_MODERN,
  has   light;

Object -> window_sill "window sill"     
  with  name 'window' 'sill',
        before WindowSillBefore,
        initial "The balcony is only a foot or so beneath the window-sill, and only about four feet square.",
        description "You look down on a low, bare window-sill.",
  has   static;

Object -> delicate_gold_key "delicate gold key" 
  with  name 'delicate' 'gold' 'key',
        sw_to compass,
        devil_hint "Gold and lead are naturally related, so you want to find a lead box to open.",
  has   concealed scored;

Object Old_Winery "Old Winery"  
  with  name 'banister' 'rail' 'crack' 'paraphernalia',
        before OldWineryBefore,
        after OldWineryAfter,
        s_to Attic,
        e_to Storage_Room,
        w_to Conservatory,
        d_to Conservatory,
        description "This small cavity at the north end of the attic once housed all manner of home-made wine paraphernalia, now lost and unlamented. Steps, provided with a good strong banister rail, lead down and to the west, and the banister rail continues along a passage east.",
        number 0,
        daemon OldWineryDaemon,
        section T_MODERN,
  has   ;

Object -> demijohn "labelled glass demijohn"    
  with  name 'demijohn' 'glass' 'bottle' 'label',
        before DemijohnBefore,
        description "Faded ink on the label reads: Elderberry '63.",
  has   container openable static transparent;

Object -> -> obj105_nasty_looking_red_battery "nasty-looking red battery"       
  with  name 'nasty' 'red' 'battery',
        sw_to s_obj,
        description "On the side is the word ~Achtung~.",
        devil_hint "It's provided for your torch, and not for anything else.",
  has   battery_flag;

Object -> -> tourist_map "tourist map"  
  with  name 'hamburg' 'tourist' 'map',
        before TouristMapBefore,
        sw_to n_obj,
        description "The good news is that it has excellent grid references, which are easy to look up. The bad news is that it is a map of central Hamburg.",
        devil_hint "Purely decorative.",
  has   ;

Object Conservatory "Aunt Jemima's Lair"        
  with  name 'objets' 'trouves' 'pottery' 'bric' 'brac',
        after ConservatoryAfter,
        s_to Airing_Cupboard,
        e_to Old_Winery,
        w_to Potting_Room,
        sw_to House,
        u_to Old_Winery,
        description "This used to be called the Conservatory, before Aunt Jemima took it over to potter about with plants, painting and indeed (on occasion) pottery. She has filled the place with objets trouves and bric-a-brac, and hung up a home-made calendar of watercolours. Even the old airing cupboard to the south is cluttered.^^An open doorway leads back southwest onto the upstairs landing, and you can hear the chaotic noise of suitcases being manhandled about - good thing nobody's seen you. A narrow staircase leads up and to the east into the attic.^^Jemima herself seems to be in the potting room to the west.",
        section T_MODERN,
  has   light;

Object -> daisy_calendar "daisy calendar"       
  with  name 'calendar' 'page' 'pages' 'daisy',
        before CalendarBefore,
        time_left 5,
  has   scenery;

Object Airing_Cupboard "Airing Cupboard"        
  with  name 'coffee' 'mugs' 'sculpture' 'racks' 'mug',
        n_to Conservatory,
        description "A space about six feet square. The old drying racks now contain odd ceramic sculptures almost but not quite unrecognisable as coffee mugs. One corner is filled with an enormous pile of tie-dyed sheets, from Aunt Jemima's infamous Sixties Revival period of last October.",
        cant_go "The only way to go from here is back north.",
        section T_MODERN,
  has   light;

Object -> pile_of_sheets "pile of sheets"       
  with  name 'pile' 'of' 'sheets' 'sheet',
        before SheetsBefore,
        daemon SheetsDaemon,
  has   scenery;

Object -> antiquated_wireless "antiquated wireless"     
  with  name 'switch' 'cabinet' 'radio' 'wireless',
        before WirelessBefore,
        after WirelessAfter,
        description "It rolls on casters, and has a bakelite on/off switch.",
        describe WirelessDescribe,
        article "an",
        number 0,
        daemon WirelessDaemon,
  has   concealed static switchable;

Object Potting_Room "Potting Room"      
  with  name 'plants' 'flowers' 'seeds' 'trowels',
        after PottingRoomAfter,
        e_to Conservatory,
        description "This light room is full of pot plants, flowers, seeds, ornamental trowels and other miscellaneous garden implements.",
        cant_go "The only exit is back east to the conservatory.",
        section T_MODERN,
  has   light;

Object -> old_gardeners__gloves "old gardeners' gloves" 
  with  name 'old' 'gardeners' 'gloves',
        before GlovesBefore,
        initial "A pair of yellow rubber gloves hangs from a hook on one wall.",
        article "some",
        devil_hint "Good for nothing. Why would you want gloves on?",
  has   clothing scored;

Object -> Jemima "Jemima"       
  with  name 'aunt' 'jemima',
        life JemimaLife,
        initial "Aunt Jemima, who has for years collected varieties of daisy, is engaged in her regular annual pastime of deciding which species make the best chains.",
        description "She's been fiddling about with those cut flowers all afternoon. And she's a bit upset at being left alone in the house while you're off on holiday, so best not to get on her bad side. You really ought to make it up to her somehow.",
        article "Aunt",
        number 0,
        daemon JemimaDaemon,
  has   animate proper;

Object daisy_chain "daisy chain"        
  with  name 'daisy' 'chain' 'daisychain',
        before DaisyChainBefore,
        u_to DaisyUp,
        number 11,
        devil_hint "Dangerous to wear. But at least any sort of daisies will do.",
  has   clothing;

Object Storage_Room "Storage Room"      
  with  before StorageRoomBefore,
        w_to Old_Winery,
        description "A disused storage room off the winery. In one wall is an opening onto an ominous dark shaft, and beside it is a big Victorian-steam-engine style wheel with a handle on.",
        cant_go "The only doorway is back west to the winery.",
        section T_MODERN,
  has   ;

Object -> wheel2 "wheel"        
  with  name 'wheel' 'handle' 'catch' 'safety',
        before WheelBefore,
        description "There is a concealed safety catch (poorly) hidden on the wheel.",
  has   on scenery switchable;

Object -> dumbwaiter "dumbwaiter"       
  with  name 'dumb' 'waiter' 'dumbwaiter',
        initial "Inside the dark shaft is the old dumbwaiter.",
        article "the old",
  has   container enterable open static;

Object -> -> pulley_ropes "pulley ropes"        
  with  name 'pulley' 'rope' 'ropes',
        before RopesBefore,
        initial "The dumbwaiter hangs on strong pulley ropes which stretch up and down from here.",
        article "the",
  has   static;

Object -> -> chicken_wishbone "chicken wishbone"        
  with  name 'wish' 'bone' 'wishbone' 'chicken',
        before WishboneAfter,
        description "The half which didn't get the wish, actually.",
        devil_hint "It isn't even mentioned in any of the books I've read.",
  has   ;

Object -> dark_shaft_obj "dark shaft"   
  with  name 'shaft' 'dark',
        after ShaftAfter,
        description "Uninviting.",
  has   container open scenery;

Object -> steel_wrench "steel wrench"   
  with  name 'steel' 'wrench',
        after WrenchAfter,
        initial "A steel wrench gathers dust in the corner.",
  has   ;

Object Dark_Shaft "Dark Shaft"  
  with  before Shaft2Before,
        after ShaftBefore,
        n_to Dark_Passage,
        d_to Cellars,
        description "Halfway up, or else halfway down, and a dreary place it is too: nothing but a dark corridor leading north.",
        section T_MODERN,
  has   ;

Object Dark_Passage "Dark Passage"      
  with  name 'coal' 'dust',
        before DarkPassageBefore,
        n_to metal_door,
        s_to Dark_Shaft,
        e_to sandstone_recess,
        d_to sandstone_recess,
        description "A passage which slants very slightly down to the south, which is full of coal dust, to which you are unfortunately allergic. Not somewhere to linger.",
        number 2,
        section T_MODERN,
  has   ;

Object -> sandstone_recess "sandstone recess"   
  with  name 'sandstone' 'recess' 'shallow',
        n_to Sandstone_Passage,
        s_to "There is a shallow sandstone recess in the east wall.",
        w_to se_obj,
        initial "A secret passage slants down to the east through a sandstone recess.",
  has   door static;

Object -> metal_door "metal door"       
  with  name 'metal' 'door',
        after MetalDoorAfter,
        n_to Garden_Stream,
        s_to "At the north end is a closed metal door.",
        e_to small_brass_key,
        w_to w_obj,
        initial "At the north end is a metal door, standing open.",
  has   door lockable locked openable static;

Object Cellars "Cellars"        
  with  before CellarsBefore,
        s_to Cellars_South,
        e_to Wine_Cellars,
        w_to Cellar_West,
        description "Cobwebbed old cellars. There is nothing to see except an opening in one wall onto a dark shaft, and a big Victorian-steam-engine style wheel beside it with a handle on. The cellar continues east-to-west and south.",
        section T_MODERN,
  has   ;

Object -> wheel "wheel" 
  with  name 'wheel' 'handle' 'catch' 'safety',
        before WheelBefore,
        description "There is a concealed safety catch (poorly) hidden on the wheel.",
  has   on scenery switchable;

Object -> dark_shaft_obj2 "dark shaft"  
  with  name 'shaft' 'dark',
        description "Uninviting.",
  has   container enterable open scenery;

Object -> little_window1 "little window"        
  with  name 'little' 'window' 'vent' 'windowvent' 'window-v',
        initial "There is a little closed window-vent low in the north wall.",
        description "You can just make out an impression of golden light.",
  has   static;

Object -> robot_mouse "robot mouse"     
  with  name 'robot' 'mouse',
        life MouseLife,
        initial "In one corner is a dust-covered robot mouse.",
        description "Remember the late 1970s, when a craze for home-made robots swept the home computing world?  No, perhaps not, but here is a left-over from it anyway. The mouse is quite large (almost a foot wide and tall), and has a big smile painted on its metal chassis. It has surprisingly modern circuitry in, though, and is even humming very faintly, so someone must have put some work in on it recently.",
        devil_hint "It can't even follow orders.",
  has   talkable;

Object Wine_Cellars "Wine Cellars"      
  with  name 'wine' 'woodlice' 'hexagonal' 'racks' 'shaft',
        before WineCellarsBefore,
        w_to Cellars,
        u_to WineCellarsUp,
        description WineCellarsDescription,
        cant_go "This is the eastern end of the cellars, from which you can only go west.",
        section T_MODERN,
  has   ;

Object Cellars_South "Cellars South"    
  with  n_to Cellars,
        description "The bricking-up of this cellar seems incomplete, because there is a hole about ten or eleven inches across in the west wall. You peer at this with interest but nothing is within reach inside, and it is far too small for you to wriggle through. The cellars go back north, and so, it would appear, do you.",
        section T_MODERN,
  has   ;

Object -> hole_in_the_wall "hole in the wall"   
  with  name 'hole' 'mousehole',
        before HoleBefore,
        life HoleLife,
  has   scenery talkable;

Object -> -> small_brass_key "small brass key"  
  with  name 'small' 'brass' 'attic' 'key',
        sw_to compass,
        initial "Lying where the mouse dropped it is a small brass-coloured key.",
        description "Brass is of course a non-magnetic copper-zinc alloy, so presumably this key also contains iron.",
        devil_hint "It isn't the attic key, I fear.",
  has   ;

Object Cellar_West "Cellar West"        
  with  s_to Hellish_Place,
        e_to Cellars,
        nw_to ironbound_door,
        d_to Hellish_Place,
        description "The west end of a disused and shadowy old cellar. It was bricked up when you were a child - you never did find out why. Perhaps the golden, jewelled staircase leading down into smoky mists to the south might be something to do with it.",
        section T_MODERN,
  has   ;

Object -> ironbound_door "ironbound door"       
  with  name 'iron' 'ironbound' 'door',
        before IronboundDoorBefore,
        n_to Infinity_Symbol,
        s_to "In the northwest wall is a heavy, imposing ironbound door.",
        e_to wrought_iron_key,
        w_to d_obj,
        initial "In the northwest wall the ironbound door stands open.",
        description "There are times when your life seems an endless sequence of locked doors, each harder to pass than the last. This one, though, has a feeling of the ultimate about it.",
        article "an",
  has   door lockable locked openable static;

Object Infinity_Symbol "Infinity Symbol"        
  with  name 'marble' 'disc' 'webs' 'icicle',
        after LemniscusAfter,
        se_to Cellar_West,
        description "An eerie, dark cave carved from crystal icicles of rock and strewn with great spiders' webs hung from the ragged stone, inhabited only by dead white insects. A narrow crevice opens out to an iron doorway and the warmth of the house.^^The rough stone floor levels out to a perfectly round, smooth white marble disc about five yards across, inscribed with a black lemniscus (or infinity) symbol.^^You shiver with foreboding, but inexplicably feel that the map you're looking for must be somewhere near here.",
        section T_MODERN,
  has   light scored;

Object -> circular_arc "circular arc"   
  with  name 'wells' 'circular' 'arc' 'socket' 'sockets' 'well',
        before ArcBefore,
        number 0,
  has   scenery;

Object -> lemniscus "lemniscus" 
  with  name 'lemniscus' 'infinity' 'symbol',
  has   scenery;

Object spherical_opening "spherical opening"    
  with  name 'gold' 'golden' 'spherical' 'opening' 'cavity',
        before SphericalOpeningBefore,
        initial "There is now a small spherical opening in one wall.",
        description "It would just hold a ball the size of your palm.",
  has   static;

Object Sandstone_Passage "Sandstone Passage"    
  with  e_to The_Octagon,
        w_to Dark_Passage,
        u_to Dark_Passage,
        d_to The_Octagon,
        description "A flight of sandstone steps, cut in the 1920s when an Egyptological craze was sweeping England, slants down from the coal-dust passage to the east.",
        section T_MODERN,
  has   light;

Object The_Octagon "The Octagon"        
  with  after OctagonAfter,
        w_to Sandstone_Passage,
        se_to White_Hallway,
        u_to Sandstone_Passage,
        description "A broad, dark octagonal room devoted to dull exhibits of the disastrous Nile Valley Expedition of '21 - the few good ones were donated to the British Museum. A back staircase leads west to the unbuilt extension, while the entrance seems to be the cobwebbed passage southeast. High windows on the northern face let in dim light.",
        cant_go "The only exits are via the southeast passage and the back staircase.",
        section T_MODERN,
  has   light;

Object -> little_window2 "little window"        
  with  name 'little' 'window' 'vent',
        initial "There is a little window-vent high in the southwest wall.",
        description "You can just make out an impression of cellars.",
  has   static;

Object -> gilded_model_coffin "gilded model coffin"     
  with  name 'gilded' 'model' 'coffin' 'lid' 'inscription',
        before CoffinBefore,
        after CoffinAfter,
        initial "A rather morbid, gilded model coffin rests here in peace.",
        description CoffinDesc,
  has   container openable static;

Object -> ragged_scroll "ragged scroll" 
  with  name 'ragged' 'white' 'parchment' 'scroll',
        sw_to n_obj,
        initial "Leaned against one of the eight corners is a ragged white parchment scroll.",
        description "A lamentably naff tourist's gift, this seems to be a ~replica~ of one of the papyri on which some lost Greek play or other was written. Some nonsense about the priestess of Apollo being summoned by music, etcetera.^^It has all the charm of a tea-towel of, oh, say the Taj Mahal made out of curry.",
        devil_hint "What taste! What artistry!",
  has   ;

Object -> framed_charcoal_sketch "framed charcoal sketch"       
  with  name 'frame' 'framed' 'charcoal' 'sketch' 'of' 'alexandria',
        before SketchBefore,
        initial "A little charcoal sketch is framed on one wall.",
        description "Behind the frame seems to be an artist's impression of the great Palace of Alexandria as it might once have been.",
        devil_hint "It's the frame which really sets it off.",
  has   ;

Object charcoal_sketch "charcoal sketch"        
  with  name 'charcoal' 'sketch' 'of' 'alexandria',
        n_to Causeway,
        description "A miniature artist's impression of the great Palace of Alexandria as it might once have been.^^(No, the impression is miniature, not the artist.)",
        devil_hint "Charcoal is so unrealistic, don't you agree?  Besides, it's far too large and clumsy.",
  has   scored;

Object dog_eared_old_letter "dog-eared old letter"      
  with  name 'old' 'letter',
        sw_to n_obj,
        description LetterDesc,
        devil_hint "The ravings of a madman. Ignore it.",
  has   ;

Object White_Hallway "White Hallway"    
  with  s_to Halfway_up_the_Stairs,
        ne_to Bricked_Path,
        nw_to The_Octagon,
        u_to Halfway_up_the_Stairs,
        description "A low, white hallway adjoining the Octagon, converted from what was once the scullery and the servants' pantry. A tight, dark staircase runs up and south; and a diagonal bricked path runs out northeast to the gardens.",
        section T_MODERN,
  has   light;

Object -> picture_hook "picture hook"   
  with  name 'picture' 'hook',
        before HookBefore,
        initial "Up on one wall is a picture hook.",
  has   static;

Object -> umbrella_stand "umbrella stand"       
  with  name 'umbrella' 'stand' 'elephants' 'foot',
        initial "There's an old-fashioned elephant's foot umbrella stand beside the garden doorway.",
        description "A deep old elephant's-foot umbrella stand.",
        article "an",
  has   container open static;

Object -> -> model_golden_sceptre "model golden sceptre"        
  with  name 'model' 'golden' 'gold' 'sceptre',
        before SceptreBefore,
        after SceptreAfter,
        initial nothing,
        description "A copy, half-size, of the one from Tutenkhamun's sarcophagus. It isn't real gold, either.",
        number 0,
        angel_hint "Of no use to anyone these last two thousand years, sorry!",
  has   ;

Object Halfway_up_the_Stairs "Halfway up the Stairs"    
  with  u_to HalfwayUpStairsUp,
        d_to White_Hallway,
        description "This dark, steep staircase zigzagging through the house once gave the servants access throughout. But those days are long gone and now all the doors are locked up.",
        section T_MODERN,
  has   ;

Object Unreal_City "Unreal City"        
  with  n_to Shadowy_Hallway,
        e_to Near_Ring_Road,
        w_to Down_by_River,
        description "This is a city side street, but as if seen through the grey of despair. People stream by, some of whom you almost recognise, as if dead. The street runs east-west, and to the north is a doorway into a grubby tenement building.",
        each_turn UnrealEachTurn,
        section T_UNREAL,
  has   light scored;

Object Shadowy_Hallway "Shadowy Hallway"        
  with  s_to Unreal_City,
        e_to Bohemia,
        u_to Consulting_Room,
        description "This shambolic flat, extending to the east, shares a filthy hallway with the one upstairs. To the south, passers-by pass by along the street. Peeling-away posters have been stuck up on top of each other on the walls, in such a way that you can only read the most recent.",
        section T_UNREAL,
  has   light;

Object -> poster "poster"       
  with  name 'poster' 'posters' 'peeling',
        before PosterBefore,
        description "~Bateaux Phlebas - toujours le dernier mot~. You briefly wish you had a dog called Toto, so as to be able to say ~Toto, I've got a feeling we're not in England any more.~",
        devil_hint "What a very useful piece of paper. Pity there's writing on it.",
  has   scenery;

Object Bohemia "Bohemia"        
  with  name 'easels' 'brushes' 'paint',
        w_to Shadowy_Hallway,
        initial BohemiaInitial,
        description "Flats occupied by starving-but-noble artists can be romantic and stylish despite the squalor. This one, however, is simply a one-room hovel, caked with paint, littered with brushes and improvised easels, and you can't help standing on tiptoe here.",
        section T_UNREAL,
  has   light;

Object -> Impressionist_painting "Impressionist painting"       
  with  name 'impressionist' 'painting' 'mural',
        life LagachLife,
        initial nothing,
        description "The bottom corner is signed simply ~Helene~.",
        article "an",
  has   static talkable;

Object Consulting_Room "Consulting Room"        
  with  name 'sevenbranched' 'candelabra' 'sticks' 'table',
        before ConsultingRoomBefore,
        w_to "Peculiarly, the hanging curtain seems to be solid iron when you walk into it.",
        d_to Shadowy_Hallway,
        description "The stairs end at a shabby room, with screened windows, lit by incense sticks and sevenbranched candelabra. A doorway with a hanging bead curtain leads west. In the centre of the room is a table, on which is an electric bell push and a wicked Tarot pack.",
        section T_UNREAL,
  has   light;

Object -> Tarot_pack "Tarot pack"       
  with  name 'wicked' 'tarot' 'pack' 'deck',
        before TarotPackBefore,
  has   scenery;

Object -> curtain "curtain"     
  with  name 'curtain' 'bead',
  has   scenery;

Object -> bell_push "bell push" 
  with  name 'bell' 'push',
        before BellPushBefore,
  has   scenery;

Object Madame_Sosostris "Madame Sosostris, famous clairvoyante" 
  with  name 'sosostris' 'madame' 'clairvoyant',
        life SosostrisLife,
        description "She has a bad cold, but nevertheless is known to be the wisest woman in Europe.",
  has   animate proper;

Object Death_card "Grim Reaper" 
  with  name 'death' 'grim' 'reaper' 'card' 'tarot',
        before TarotBefore,
        n_to Ruined_Castle_Cafe,
        sw_to "Tarot cards",
        description "Hood, scythe, skeleton, implacable grin: yes, it's the Reaper all right.",
        article "the",
        short TarotShort,
        parse_name TarotParseName,
        devil_hint "It's vital you slide right along with this one.",
  has   card;

Object Fool_card "Fool" 
  with  name 'fool' 'card' 'tarot',
        before TarotBefore,
        n_to Ruined_Castle_Cafe,
        sw_to "Tarot cards",
        description "The Fool is a man looking directly ahead as he steps off the edge of a cliff.",
        article "the",
        short TarotShort,
        parse_name TarotParseName,
        devil_hint "Don't worry, he won't slide down the cliff.",
  has   card;

Object Drowned_Sailor_card "Drowned Sailor"     
  with  name 'drowned' 'sailor' 'card' 'tarot',
        before TarotBefore,
        n_to Ruined_Castle_Cafe,
        sw_to "Tarot cards",
        description "Those are pearls that were his eyes...",
        article "the",
        short TarotShort,
        parse_name TarotParseName,
        devil_hint "He's one of my colleagues now, of course.",
  has   card;

Object oak_quarterstaff "oak quarterstaff"      
  with  name 'oak' 'staff' 'quarterstaff',
        article "an",
        rod_assoc rod_of_bronze,
        devil_hint "Shoddy workmanship, but never mind, it's only a staff and who needs those any more?",
  has   hidden_rod;

Object Down_by_River "Down by River"    
  with  name 'rats' 'mounds' 'rubbish',
        before DownByRiverBefore,
        e_to Unreal_City,
        w_to DownByRiverWest,
        description "Down at the end of the street, the brown urban waters carry by unpleasant rubbish, and rats scuttle up and over the mounds washed up around you.",
        section T_UNREAL,
  has   light;

Object -> silk_handkerchief "silk handkerchief" 
  with  name 'silk' 'handkerchier' 'hanky' 'hankie',
        before HandkerchiefBefore,
        initial "On one especially repellent mound is, of all things, a fine silk handkerchief.",
        description "Monogrammed J. A. P., but that's no great matter.",
        devil_hint "People had no style in those days, before they invented paper tissues. I mean this tatty cloth is hardly attractive, is it?",
  has   ;

Object -> tourist_boat "tourist boat"   
  with  name 'tourist' 'boat' 'bateau',
        before TouristBoatBefore,
        n_to On_board_the_Phlebas,
        s_to "On the far bank is a glass-roofed tourist boat. As much as you like to explore, you can't see how to attract its attention.",
        w_to nw_obj,
        initial "Moored close to the bank is a glass-roofed tourist boat.",
        description "The side reads: PHLEBAS.",
  has   door static;

Object On_board_the_Phlebas "On board the Phlebas"      
  with  name 'wheel',
        e_to Down_by_River,
        description "A tourist river-boat, glass-roofed. You can climb out to the shore to the east. At the helm is a very strange man, at times almost a straw dummy, almost perhaps a hollow cut-out made of paper. He (or it) turns the wheel and casts his eyes to windward.",
        section T_UNREAL,
  has   light;

Object -> hollow_man "hollow man"       
  with  name 'hollow' 'man',
        life HollowManLife,
        initial "The hollow man mechanically says: ~Where to, guv'nor?  Me with my big mouth, I gone and done it again, calling you the guv'nor. I was down Margate Sands way once, had a bloke come on board, he thought any old destination would do, like a real place, like anywhere was real... We are the hollow men, I says, he didn't like that... Hurry up, please, it's time.~",
        description "Every now and then he whimpers.",
        article "the",
  has   animate;

Object Near_Ring_Road "Near Ring Road"  
  with  name 'metro' 'pedestrians' 'army',
        w_to Unreal_City,
        d_to Chatelet_les_Halles,
        description "A dry, desolate waste of buildings borders here on a main road, so full of black-suited pedestrians off to work at banks that you can't force your way any further east. Once in a while a few of the bowler-hatted army step into the street and down some steps below a Metropolitan sign.",
        cant_go "You can't force your way through the tide of bankers.",
        each_turn UnrealEachTurn,
        section T_UNREAL,
  has   light;

Object Chatelet_les_Halles "Chatelet-les-Halles"        
  with  name 'gates',
        before ChateletBefore,
        u_to Near_Ring_Road,
        description "This is a vast underground station in great rectangular caverns, deep beneath the streets. You are outside the ticket gates, near a flight of steps back up to the city, and since you haven't a ticket you're likely to stay that way.",
        cant_go "Back up the stairs for you. Call yourself a traveller...",
        section T_UNREAL,
  has   light;

Object -> surly_shopkeeper "surly shopkeeper"   
  with  name 'surly' 'man' 'shopkeeper',
        life ShopkeeperLife,
        initial "Behind a kiosk, a surly-looking man is selling guide books and maps.",
        description "His jumper is unstriped, and there are no onions around his neck. Nonetheless he has a rather Gallic, disgruntled look to him. Perhaps he's a former Socialist cabinet minister.",
  has   animate;

Object tourist_map_of_Paris "tourist map of Paris"      
  with  name 'tourist' 'map' 'of' 'paris',
        description "Just the way you remember yours having been.",
        devil_hint "Burn it!  Burn it at once!",
        angel_hint "What a very useful map!  Now you can go on holiday.",
  has   ;

Object Museum_Foyer "Museum Foyer"      
  with  name 'shadows' 'bats' 'lamps' 'rain',
        s_to FoyerSouth,
        ne_to Revolving_Door1,
        description "The Museum of Arcana is deserted after nightfall and only dimly lit by distant sodium street-lamps. Outside it is a stormy October night and rain beats against the windowpanes. Shadows swoop and dive in the air like bats.^^The revolving door to northeast, which leads out, seems to be solidly blocked off. But a dim passage runs south, through a strange metal corridor.",
        cant_go "There's no apparent way but south.",
        section T_HAMBURG,
  has   light scored;

Object -> revolving_door_obj "revolving door"   
  with  name 'revolving' 'door',
        before RevolvingDoorBefore,
        description "Why not go northeast and look inside?",
  has   scenery;

Object -> publicity_poster "publicity poster"   
  with  name 'poster' 'publicity' 'pretentious' 'exhibition',
        initial "A publicity poster is displayed for passers-by outside to see.",
        description "One of those pretentious exhibition posters. Your German is just about adequate to the task:^^~Cults of the Druids - a Major Retrospective, October-November 1988~.",
  has   static;

Object Revolving_Door1 "Revolving Door" 
  with  n_to RevolvingDoorNorth,
        e_to "The door only turns clockwise.",
        sw_to Museum_Foyer,
        description "Inside one quarter of the cramped revolving door, which is blocked off from the world outside and opens only onto the foyer, southwest.",
        cant_go "To north and east are the walls of the door.",
        section T_HAMBURG,
  has   light;

Object -> door1 "door"  
  with  name 'door' 'revolving',
        before MuseumDoorBefore,
        description "You stand within it.",
  has   scenery;

Object Revolving_Door2 "Revolving Door" 
  with  n_to RevolvingDoorNorth,
        e_to "The door only turns clockwise.",
        sw_to Museum_Foyer,
        description "Inside one quarter of the cramped revolving door, which is blocked off from the world outside and opens only onto the foyer, southwest.",
        cant_go "To north and east are the walls of the door.",
        section T_HAMBURG,
  has   light;

Object -> door2 "door"  
  with  name 'door' 'revolving',
        before MuseumDoorBefore,
        description "You stand within it.",
  has   scenery;

Object -> beach_ball "beach ball"       
  with  name 'striped' 'beach' 'ball',
        before BeachBallBefore,
        after BeachBallAfter,
        initial "A colourful, striped inflated beach ball bounces around.",
  has   ;

Object Hall_of_Exhibits "Hall of Exhibits"      
  with  n_to Museum_Foyer,
        e_to Cabinet_Room,
        w_to Dark_Staircase,
        description "A great square gloomy room, just south of the foyer. There are square lintelled doorways east and west. The storm is dark, and the windows are high, but there's just enough light to see by.",
        section T_HAMBURG,
  has   light;

Object -> Tarot_box "Tarot box" 
  with  name 'box' 'of' 'tarot',
        before TarotBoxBefore,
        initial "Resting on a little display table is a Tarot box.",
        devil_hint "There's nothing worthwhile in it.",
  has   container openable;

Object -> -> Castle "Castle"    
  with  name 'castle' 'card' 'tarot',
        before TarotBefore,
        n_to Ruined_Castle_Cafe,
        sw_to "Tarot cards",
        description "A stone castle on a hill.",
        article "the",
        short TarotShort,
        parse_name TarotParseName,
        devil_hint "It leads nowhere.",
  has   card;

Object -> -> Star "Star"        
  with  name 'star' 'card' 'tarot',
        before TarotBefore,
        n_to Lighthouse,
        sw_to "Tarot cards",
        description "A single bright light in the darkness.",
        article "the",
        short TarotShort,
        parse_name TarotParseName,
        devil_hint "Ugh, what a nasty bright light. Good thing you'll never go there.",
  has   card;

Object -> -> Eight_of_Wands_card "Eight of Wands"       
  with  name 'eight' 'of' 'wands' 'card' 'tarot',
        before TarotBefore,
        sw_to "Tarot cards",
        article "the",
        short TarotShort,
        parse_name TarotParseName,
        rod_assoc rod_of_infinity,
        devil_hint "There's less to this card than meets the eye.",
  has   card hidden_rod;

Object -> -> Maiden_card "Maiden"       
  with  name 'maiden' 'card' 'tarot',
        before TarotBefore,
        n_to Sea_Shore,
        sw_to "Tarot cards",
        description "Andromeda chained to a rock on the sea-shore.",
        article "the",
        short TarotShort,
        parse_name TarotParseName,
        devil_hint "What an ugly girl!  Bet she's good for a laugh though.",
  has   card;

Object -> still_life "still life"       
  with  name 'long' 'painted' 'still' 'life' 'painting' 'disturbing',
        life LagachLife,
        initial "A long painted still life graces one wall near a corner.",
        description "A disturbing painting, perhaps by Edvard Munch, this is a still life of a seedling on a table, surrounded by a rusty iron rod with a star on the end, a glass bottle, a lamp and a bunch of keys. No doubt these arcane objects held some special significance for primitive tribes now absorbed into civilisation.",
  has   static talkable;

Object Dark_Staircase "Dark Staircase"  
  with  before DarkStaircaseBefore,
        after DarkStaircaseAfter,
        e_to Hall_of_Exhibits,
        u_to Hall_of_Exhibits,
        description "A dark staircase, turning from east to south as it descends. The hideous sound of arhythmic chanting can be heard from below.",
        section T_HAMBURG,
  has   light;

Object -> discarded_matchbook "discarded matchbook"     
  with  name 'match' 'matchbook' 'book',
        initial "On one step, an empty matchbook lies discarded.",
        description "It's from the Ruined Castle Cafe, and (like the Cafe) is matchless.",
        angel_hint "Ah, I fear it is only a token clue.",
  has   ;

Object Ace_of_Cups_card "Ace of Cups"   
  with  name 'ace' 'of' 'cups' 'card' 'tarot',
        before TarotBefore,
        n_to Cups_and_Glasses,
        sw_to "Tarot cards",
        description "It shows a great many crystal-glass cups and glasses.",
        article "the",
        short TarotShort,
        parse_name TarotParseName,
        devil_hint "It leads nowhere.",
  has   card;

Object Coven_Cell "Coven Cell"  
  with  before CovenCellBefore,
        description "An old administrative office of the museum, emptied and made into a prison cell: amateur but effective.",
        cant_go "There's definitely no way out of here.",
        number 0,
        daemon CovenCellDaemon,
        section T_HAMBURG,
  has   light;

Object -> goat "anxious-looking goat"   
  with  name 'anxious' 'goat' 'dobbin',
        life GoatLife,
        article "an",
  has   animate static;

Object -> crook "shepherd's crook"      
  with  name 'shepherds' 'crook',
        rod_assoc rod_of_husbandry,
        devil_hint "Just a crook. And what's wrong with crooks, that's what I say.",
  has   hidden_rod;

Object -> cell_door "cell door" 
  with  name 'cell' 'door',
        before CelldoorBefore,
        n_to Museum_Foyer,
        s_to "As you might expect, the cell door is closed.",
        w_to ne_obj,
  has   door locked openable static;

Object Cabinet_Room "Cabinet Room"      
  with  before CabinetRoomBefore,
        w_to Hall_of_Exhibits,
        description "An annexe to the museum, containing sundry archaelogical finds, badly labelled in German (which you can hardly read at the best of times) and securely pinioned inside glass cabinets. The storm outside thrashes against the narrow dark windows.",
        section T_HAMBURG,
  has   ;

Object -> glass_cabinet "glass cabinet" 
  with  name 'glass' 'cabinet' 'pane',
        before CabinetBefore,
        s_to "One cabinet looks particularly vulnerable.",
        initial "You could just look inside the broken glass cabinet.",
        number 0,
        daemon CabinetDAemon,
  has   container static transparent;

Object -> -> smooth_round_stone "smooth round stone"    
  with  name 'smooth' 'round' 'pumice' 'metal' 'stone',
        before RoundStoneBefore,
        initial nothing,
        description "A smooth palm-sized disc, perhaps of pumice stone, painted in yellows and browns with a single star motif, around which (clockwise) are the words ~nog~, ~er~, ~ska~ and ~iw~. If you remember the label rightly, something funny has been done to a piece of metal embedded in the top, but your German wasn't up to understanding what.",
        angel_hint "Doesn't the shape strike you as familiar at all?  - There, that should point you in the right direction.",
  has   scored;

Object -> -> papyrus_fragment "papyrus fragment"        
  with  name 'fragment' 'papyrus',
        description "Only one line has survived intact:^^.<anoppe> an-spe : ska er nog-er an-ge : to-ro-ma ka ur Al-x-an-dr u bir ka ur-a an-ge ur",
        angel_hint "You need more evidence before you can begin deciphering the language, I fear.",
  has   ;

Object Ruined_Castle_Cafe "Ruined Castle Cafe"  
  with  name 'decor' 'arrows' 'quartet' 'waiter',
        after CafeAfter,
        initial CafeInitial,
        description "This crowded, bohemian cafe bears only a passing resemblance to the ruined castle of the Tarot card: the decor imitates castle walls and arrowslits. You find yourself sitting at a table for one in the centre of the cafe floor. It is noisy, bustling and cheery, and a string quartet plays Strauss under the chattering of German voices. Your chances of attracting a waiter are very slight.",
        cant_go "The crowd is lively and exciting, but also inconsiderate and bulky.",
        each_turn CafeEachTurn,
        section T_TAROT,
  has   light scored;

Object -> cafe_table "cafe table"       
  with  name 'cafe' 'table' 'leg' 'legs',
        before CafeTableBefore,
  has   scenery supporter;

Object complicated_looking_bomb "complicated-looking bomb"      
  with  name 'bomb',
        after BombAfter,
        initial "Taped loosely to the underside of the table is a complicated-looking bomb.",
        description "It contains a timer-detonator, a bundle of plastic explosives and many, many wires. The most obvious ones are green, red, blue and black. They would pull out of their loose sockets in the timer easily, so perhaps this bomb disposal nonsense isn't as tricky as people make out.",
        number 0,
        time_left 0,
        daemon BombDaemon,
  has   concealed container open;

Object -> timer_detonator "timer-detonator"     
  with  name 'timer' 'detonater' 'detonator',
        before TimerBefore,
        number 10,
        time_left 0,
        daemon TimerDaemon,
        devil_hint "Time flies down here, you know. Eternity simply breezes by.",
        angel_hint "Good photographic gear that. You didn't get it from a... well, a bomb, I hope.",
  has   static;

Object -> green_wire "green wire"       
  with  name 'green' 'wire',
        before WireBefore,
  has   static wire;

Object -> red_wire "red wire"   
  with  name 'red' 'wire',
        before WireBefore,
  has   static wire;

Object -> blue_wire "blue wire" 
  with  name 'blue' 'wire',
        before WireBefore,
  has   static wire;

Object -> black_wire "black wire"       
  with  name 'black' 'wire',
        before WireBefore,
  has   static wire;

Object Cups_and_Glasses "Cups and Glasses"      
  with  name 'skylight' 'old' 'women' 'conspirators',
        n_to windowed_door,
        description "This basement room is filled with crate after crate of glasses and cups, enough for an entire hotel, or restaurant perhaps. Almost anything might be hidden among them. A little light comes in from an opaque skylight which is at street level outdoors. There is no way out of here, since the only door is shut tight.",
        cant_go "There's no apparent way out of here.",
        number 0,
        each_turn CupsAndGlassesEachTurn,
        section T_TAROT,
  has   light;

Object -> windowed_door "windowed door" 
  with  name 'door' 'window' 'windowed',
        n_to Cups_and_Glasses,
        w_to w_obj,
        description "Through the square window in the door you can see a bar at which staff are serving, and a very crowded and lively cafe-restaurant beyond. The cabaret act has her back to you, and a considerable amount of her front to the diners.",
  has   door lockable locked openable scenery;

Object -> cups_and_glasses "cups and glasses"   
  with  name 'crates' 'glasses' 'cups',
        before CupsAndGlassesBefore,
        article "numerous",
  has   scenery;

Object -> mounted_bottle "mounted bottle"       
  with  name 'mounted' 'whisky' 'glass' 'bottle',
        initial "An unlabelled whisky bottle, laid on its side and mounted on a wood plaque, lies deservedly unwanted on one of the crates.",
        description "Old, unwanted, dusty, empty.",
        angel_hint "The great challenge, of course, is to get a ship inside.",
  has   ;

Object ship_in_a_bottle "ship in a bottle"      
  with  name 'ship' 'in' 'bottle',
        before BottleShipBefore,
        description "Within the whisky bottle is a model sailing ship, far too large to have passed the neck.",
        angel_hint "Oh, well done!  Why not take a closer look, you deserve it?",
  has   ;

Object model_ship "model ship"  
  with  name 'model' 'sailing' 'ship' 'anchor' 'chain' 'mermaid' 'filigree' 'prow' 'stern',
        before ModelShipBefore,
        description "A superb model sailing ship, about six inches from prow to stern, immaculate in every detail from an anchor on a filigree chain to a carved mermaid up front.",
        angel_hint "The great challenge, of course, is to get it inside a bottle.",
  has   general;

Object stick_with_an_anchor "stick with an anchor"      
  with  name 'stick' 'with' 'anchor' 'chain' 'sticks' 'ship',
        before ModelShipBefore,
        description "A tightly-folded bundle of sticks, about six inches long, with a filigree chain and anchor hanging from it.",
        angel_hint "The great challenge, of course, is to get it inside a bottle.",
  has   ;

Object Sea_Shore "Sea Shore"    
  with  before SeaShoreBefore,
        u_to Cliffs,
        description SeashoreDesc,
        cant_go "The rocks are too dangerous. You'll have to scale the cliff.",
        section T_TAROT,
  has   light;

Object -> Andromeda "Andromeda" 
  with  name 'andromeda' 'maiden',
        life AndromedaLife,
        initial "Chained to the cliff face is the beautiful Andromeda, looking nobly out to sea as she awaits her fate.",
        description AndromedaDesc,
  has   animate proper;

Object -> amber_hairband "amber hairband"       
  with  name 'amber' 'hairband' 'hair' 'band',
        description "A long clasp of amber, perfect for long straggly Greek hair.",
        article "Andromeda's",
        rod_assoc rod_of_sacrifice,
        devil_hint "Mmm... it still has her perfume on it. Hehehehe. Bet she's dead now.",
  has   concealed static hidden_rod;

Object Cliffs "Cliffs"  
  with  name 'pharos' 'lighthouse' 'tower',
        e_to Clifftop_Walk,
        sw_to Cave_Mouth,
        d_to Sea_Shore,
        description "On top of some exposed cliffs on the Mediterranean. A dangerous slither down leads on one side to the shore, all other ways down being even more hazardous. Atop the cliffs is the Pharos tower, a round stone pinnacle lighthouse, but there is no way in from here.^^A grassy walk leads east, and a narrow crack leads southwest into a cave mouth.",
        cant_go "There's only dull grassland that way.",
        section T_TAROT,
  has   light;

Object Clifftop_Walk "Clifftop Walk"    
  with  s_to Wall_of_Thorns,
        e_to ClifftopEast,
        w_to Cliffs,
        description "A long clifftop walk by the sea, from the lighthouse to the west to the village not far east. These fields are occupied by herds of hardy mountain goats, continually butting each other and frisking. To the south a path leads across sparse grassland to a great outgrowth of some kind.",
        cant_go "There's only dull grassland that way.",
        section T_TAROT,
  has   light;

Object -> herd_of_goats "herd of goats" 
  with  name 'goat' 'goats' 'herd' 'of',
        life GoatsLife,
  has   scenery talkable;

Object Outside_Taverna "Outside Taverna"        
  with  s_to Eraina_Taverna,
        w_to Clifftop_Walk,
        description "A long walk along the cliffs from the lighthouse leads naturally here, just outside the Eraina Taverna, whose open doorway lies to the south.",
        cant_go "There's only dull grassland that way.",
        section T_TAROT,
  has   light;

Object -> small_thorny_tree "small thorny tree" 
  with  name 'tree' 'thorny' 'small',
        before ThornyTreeBefore,
        description "Only a small, thorny, unclimbable fig tree.",
  has   scenery;

Object -> fig "fig"     
  with  name 'fig',
        initial "Hanging from a low branch of a fig tree is, as you might expect, a fig.",
        description "Legend has it that the Roman emperor Augustus was killed by his wife Livia, who painted the figs on his tree with poison. Actually it looks like a perfectly nice piece of fruit.",
        devil_hint "You can ask a god for a date, but they just don't give a fig.",
        angel_hint "Good enough for a god.",
  has   edible;

Object Eraina_Taverna "Eraina Taverna"  
  with  before TavernBefore,
        n_to Outside_Taverna,
        description "A plain but cheery taverna, fill of miserable and rather ashamed men who are drinking retsina heavily. The day is dawning outside the north door, but they strangely do not share your uplifted feeling at the sight.",
        cant_go "The tavern entrance is to the north.",
        each_turn TavernEachTurn,
        section T_TAROT,
  has   light scored;

Object -> Ekmek_Special "Ekmek Special" 
  with  name 'ekmek' 'special' 'dessert',
        before DessertBefore,
        initial "Left untouched on one table is an Ekmek Special dessert.",
        description "A speciality dessert of the Taverna: ice cream, kateifi, raspberry sauce, cream. An acquired taste.",
        devil_hint "Better with chocolate ice cream, I think.",
        angel_hint "Doesn't somebody else need this more than you?",
  has   edible proper scored;

Object -> bartender "bartender" 
  with  name 'bar' 'tender' 'bartender',
        life BartenderLife,
        initial "Behind the bar, a depressed bartender polishes glasses.",
        description "Morose and unconvivial at the best of times. This is not the best of times.",
  has   animate;

Object Wall_of_Thorns "Wall of Thorns"  
  with  n_to Clifftop_Walk,
        s_to wall_of_thorns_object,
        description "The rather sparse rolling landscape is dominated here by a massive, and suspiciously unnatural, wall of thorns, which forms a great ring about an area perhaps a hundred yards in diameter. There are goat pastures to the north.",
        cant_go "There's only dull grassland that way.",
        section T_TAROT,
  has   light;

Object -> wall_of_thorns_object "wall of thorns"        
  with  name 'gap' 'thorns' 'of' 'wall',
        n_to Sacred_Earth,
        s_to "The wall rustles and clashes its thorns like a beast alive.",
        w_to ne_obj,
        initial "A ragged gap in the wall has been burnt out to the south.",
        description "It's hard to imagine what could possibly shift a wall like that.",
  has   door static;

Object Sacred_Earth "Sacred Earth"      
  with  after SacredEarthAfter,
        n_to Wall_of_Thorns,
        s_to SacredEarthSouth,
        description "Here inside the thorn wall, a north-south path leads across sacred earth into the imposing marble Temple of Zeus. You feel distinctly uneasy walking on such hallowed turf. There are any number of myths about gods getting cross about that sort of thing.",
        cant_go "The wall of thorns hems you in.",
        section T_TAROT,
  has   light;

Object Temple_of_Zeus "Temple of Zeus"  
  with  name 'pillar',
        n_to TempleNorth,
        se_to East_Cloister,
        sw_to West_Cloister,
        description "The beautiful candle-lit Temple of Zeus, a cavern of marble pillars which is quite empty and featureless save for the entrance at the north. So much for all the rumours about hoards of treasure - it looks as if Zeus (who is, by the way howling with anger outside) was bluffing all along.^^Cloisters lead southeast and southwest, deeper into the temple.",
        section T_TAROT,
  has   light scored;

Object -> copper_coin "copper coin"     
  with  name 'copper' 'coin' 'obol',
        description "On one side, a man's face: on the other, a symbol, I. One obol, or one-sixth of a drachma.",
        article "one",
        angel_hint "This currency is only valid in ancient Greece. Where on earth have you been?",
  has   ;

Object East_Cloister "East Cloister"    
  with  name 'niche',
        nw_to Temple_of_Zeus,
        sw_to Inner_Sanctum,
        description "The east cloister of the Temple, which turns from northwest to southwest, is bare but for a small niche.",
        section T_TAROT,
  has   ;

Object -> inscribed_stone "inscribed stone"     
  with  name 'rosetta' 'stone' 'inscribed' 'pumice',
        initial "Resting in the niche is an inscribed pumice stone, two feet tall.",
        description InscribedStoneDesc,
        article "an",
        angel_hint "Whoever wrote this must have wanted to get the message across very badly, to write it all out twice.",
  has   scored;

Object West_Cloister "West Cloister"    
  with  ne_to Temple_of_Zeus,
        se_to Inner_Sanctum,
        description "Along the west cloister, turning from northeast to southeast, is a broad bas relief depicting the seasons: the planting of seed, high summer, the harvest, floods and then the coming of ice.",
        section T_TAROT,
  has   ;

Object -> symbol "symbol"       
  with  name 'symbol' 'symbols',
        initial "A curious symbol is repeated along the top of the relief.",
        description SymbolDesc,
  has   static;

Object Inner_Sanctum "Inner Sanctum"    
  with  n_to Cross_Centre,
        ne_to East_Cloister,
        nw_to West_Cloister,
        d_to Cross_Centre,
        initial InnerSanctumInitial,
        description "Here from the dark heart of the temple, cloisters fork northeast and northwest while a flight of narrowing steps lead down and to the north.",
        section T_TAROT,
  has   ;

Object -> Homer "Homer" 
  with  name 'homer' 'blind' 'poet',
        life HomerLife,
        initial "The blind poet Homer half-slumbers here, clutching his syrinx (or Pan-pipes) to himself.",
        description "Homer is wearing a Columbo-style raincoat.",
        time_left 0,
  has   animate proper;

Object -> -> Pan_pipes "Pan pipes"      
  with  name 'pan' 'pipes' 'panpipes' 'syrinx',
        before PanPipesBefore,
        description "Carefully cut from river reeds, these once belonged to Homer himself. As you may recall.",
        article "the",
        angel_hint "Marvellous! A sound to soothe the spirit.",
  has   ;

Object Cross_Centre "Cross Centre"      
  with  before CrossBefore,
        after CrossAfter,
        s_to Inner_Sanctum,
        ne_to Northeast_Cross,
        se_to Southeast_Cross,
        nw_to Northwest_Cross,
        sw_to Southwest_Cross,
        u_to Inner_Sanctum,
        d_to inscriptions,
        initial CrossInitial,
        description "The fabled Labyrinth seems only to consist of a broad cross. Arms run to northeast, northwest, southeast and southwest, while a flight of stone steps widens and climbs south.",
        daemon CrossDaemon,
        section T_TAROT,
  has   ;

Object -> inscriptions "inscriptions"   
  with  name 'inscription' 'opening',
        before InscriptsBefore,
        n_to Oubliette,
        s_to "There are extremely scuffed and faded inscriptions at the centre of the cross.",
        w_to thedark,
        initial "Beside the inscriptions is an opening in the floor, about two feet square.",
        description "~ka-i ur-a re-im ka an-ge~",
        article "the",
  has   door static;

Object Oubliette "Oubliette"    
  with  name 'crushed' 'broken' 'bones',
        u_to Cross_Centre,
        description "A foul, musty bone pit, beneath the cross, where sacrificial victims were once dropped and ~forgotten~.",
        section T_TAROT,
  has   ;

Object -> gleaming_amber_gem "gleaming amber gem"       
  with  name 'amber' 'gem',
        before GemBefore,
        initial "Lying on top of crushed, broken bones, in plain view, is a gleaming gem of amber.",
        description "Embedded within is the body of a fly. Scratched upon one face is the word ~GALITA~.",
        angel_hint "Isn't there some classical legend about her?",
  has   scored;

Object Northeast_Cross "Northeast Cross"        
  with  name 'carvings' 'fish' 'nets',
        sw_to Cross_Centre,
        description "This cross-corner is inlaid with carvings of fish, of the waves, of great casting nets sweeping through the water.^^The Labyrinth lies to southwest.",
        section T_TAROT,
  has   ;

Object -> statue_of_Demeter "statue of Demeter" 
  with  name 'demeter' 'statue' 'of',
        before ClassicalStatueBefore,
        after ClassicalStatueAfter,
        initial "A fine statue of the goddess Demeter stands here.",
  has   static statue_flag;

Object Northwest_Cross "Northwest Cross"        
  with  name 'carvings' 'wheat',
        se_to Cross_Centre,
        description "This cross-corner is surrounded with carvings of wheat swaying in the breeze, bathed with sunshine.^^The Labyrinth lies to southeast.",
        section T_TAROT,
  has   ;

Object -> statue_of_Dionysus "statue of Dionysus"       
  with  name 'dionysus' 'statue' 'of',
        before ClassicalStatueBefore,
        after ClassicalStatueAfter,
        initial "A fine statue of the god Dionysus stands here.",
  has   static statue_flag;

Object Southeast_Cross "Southeast Cross"        
  with  name 'carvings' 'hoplite' 'warriors',
        nw_to Cross_Centre,
        description "This cross-corner is decorated with carvings of massed ranks of hoplite warriors, advancing into battle.^^The Labyrinth lies to northwest.",
        section T_TAROT,
  has   ;

Object -> statue_of_Ares "statue of Ares"       
  with  name 'ares' 'statue' 'of',
        before ClassicalStatueBefore,
        after ClassicalStatueAfter,
        initial "A fine statue of the god Ares stands here.",
  has   static statue_flag;

Object Southwest_Cross "Southwest Cross"        
  with  name 'carvings' 'grape' 'vines' 'barrels',
        ne_to Cross_Centre,
        description "This cross-corner is decorated with carvings of grape-vines and barrels.^^The Labyrinth lies to northeast.",
        section T_TAROT,
  has   ;

Object -> statue_of_Poseidon "statue of Poseidon"       
  with  name 'poseidon' 'statue' 'of',
        before ClassicalStatueBefore,
        after ClassicalStatueAfter,
        initial "A fine statue of the god Poseidon stands here.",
  has   static statue_flag;

Object Cave_Mouth "Cave Mouth"  
  with  name 'lamps' 'trestle' 'altar' 'stone',
        ne_to Cliffs,
        description "A dry cave opening from a crack to the northeast, becoming a fair-sized cavern, furnished with bronze and lit by trestle lamps chained from the ceiling.",
        section T_TAROT,
  has   light;

Object -> flaming_bronze_urn "flaming bronze urn"       
  with  name 'flaming' 'bronze' 'urn' 'flame' 'cube' 'obsidian' 'altar' 'stone',
        before UrnBefore,
        initial "In the centre of the cave rests an obsidian altar stone with a flaming bronze urn.",
        description "The altar stone, sometimes called ~Omphalos~ or ~the navel~, bears an odd cross or plus sign and is fabled to mark the centre of the world.^^Around the side of the urn are reliefs of feasts, of oxen being tracked and sacrificed, of the gathering of fruit and the making of cheese.",
        article "the",
  has   container open static;

Object Oracle "Oracle"  
  with  name 'oracle' 'masked' 'priestess' 'pythian' 'loxias' 'of' 'apollo',
        life OracleLife,
        initial "The Oracle, the masked priestess of Apollo, stands here behind an obsidian altar-stone, three cubits cubed: to her side is a bronze urn, mouthing perpetual flame.",
        article "the",
  has   animate;

Object Lighthouse "Lighthouse"  
  with  name 'smudge' 'quinquire',
        d_to LighthouseDown,
        description LighthouseDesc,
        cant_go "Being a lighthouse, this pinnacle is way up in the air. Point taken?",
        section T_TAROT,
  has   light scored;

Object -> mirrored_device "mirrored device"     
  with  name 'device' 'mirrored' 'bronze',
  has   container open scenery;

Object Greek_Frieze1 "Greek Frieze"     
  with  u_to Lighthouse,
        description "A brown-tinted frieze, depicting hunters and spear-carriers, surrounds this dark stair-well, which has no exit except for a spiral staircase leading back up.",
        section T_TAROT,
  has   light;

Object -> Greek_frieze2 "Greek frieze"  
  with  name 'greek' 'frieze' 'mural',
        life LagachLife,
        description "The decorated strip of entablature between the architrave and the cornice, in the Attic style circa fifth century B.C.^^Well, you did ask.",
  has   scenery talkable;

Object port_obj "port wall"     
  with  name 'port',
        w_to nw_obj,
        article "the",
  has   scenery;

Object starboard_obj "starboard wall"   
  with  name 'starboard',
        w_to se_obj,
        article "the",
  has   scenery;

Object fore_obj "fore wall"     
  with  name 'fore',
        w_to w_obj,
        article "the",
  has   scenery;

Object aft_obj "aft wall"       
  with  name 'aft',
        w_to ne_obj,
        article "the",
  has   scenery;

Object some_landlubbers_direction "some landlubber's direction" 
  with  name 'north' 'n//' 'south' 's//' 'east' 'e//' 'west' 'w//',
        before LandlubberBefore,
  has   proper scenery;

Object Aboard_Ship "Aboard Ship"        
  with  name 'rail' 'storm',
        n_to Prow_of_the_Lady_Magdalena,
        s_to Stern,
        u_to Up_the_Mast,
        description "There is a storm tossing the deck, one which drives no rain: you reel from one side to the other, hanging onto the rail, grabbing at the mast or the rigging. Nobody else seems to be aboard. The boat makes no headway in a strange, glassy mist.^^The mast rises dizzyingly high.^^You can't even make out the water below. A great pink haze spreads across the sky. With omens like these, who needs albatrosses?",
        cant_go "The deck runs fore to aft (as all decks do).",
        daemon OnShipDaemon,
        each_turn OnShipEachTurn,
        section T_TAROT,
  has   light ship_flag;

Object -> mast_and_rigging "mast and rigging"   
  with  name 'mast' 'rigged' 'rigging',
        before RiggingBefore,
        article "the",
  has   scenery;

Object Up_the_Mast "Up the Mast"        
  with  before OnMastBefore,
        after OnMastAfter,
        w_to OnMastWest,
        d_to OnMastDown,
        description "Coming up here must be one of your less inspired ideas. The mist is all around you, confusing your senses. Two pale, bluish moons hang in a pink sky.",
        cant_go "Down might be a better idea.",
        section T_TAROT,
  has   light ship_flag;

Object -> flagpole "flagpole"   
  with  name 'pole' 'flagpole' 'mast' 'ensign' 'spar',
        before FlagpoleBefore,
        initial "A flagpole juts out portwards from the top of the mast, far too insubstantial to bear any weight. From it hangs the ensign of the British Merchant Navy (which you could just reach the bottom of).",
        description "The flagpole juts out to port with the prevailing... wind?",
  has   static;

Object -> flag_of_the_British_Merchant_Navy "flag of the British Merchant Navy" 
  with  name 'flag' 'ensign' 'navy' 'british' 'merchant' 'of' 'tassels',
        before FlagBefore,
        initial "The flag has fluttered to a heap on deck.",
        description "Broad, heavy, scarlet cloth, halfway between a silken sheet and a carpet, with a cross and a Union Jack in one corner.",
        devil_hint "Piece of advice - it's never very comfortable wrapping yourself in the Flag.",
  has   concealed;

Object old_timber_spar "old timber spar"        
  with  name 'old' 'prop' 'timber' 'flagpole' 'spar',
        after TimberSparAfter,
        initial "The broken flagpole, a plain timber spar, lies beside the mast.",
        description "An old timber prop, once the spar of a main mast.",
        article "an",
        rod_assoc rod_of_returning,
        devil_hint "A plain old piece of timber.",
  has   hidden_rod;

Object Prow_of_the_Lady_Magdalena "Prow of the Lady Magdalena"  
  with  name 'lady' 'magdalena' 'mermaid' 'figurine',
        s_to Aboard_Ship,
        description "You stand in the triangular prow of the ship, which is graced by a carved and painted figurine and named the ~Lady Magdalena~. There is no sign of water, but the boat is rocked too often for it to be aground. And the glassy mist hangs ahead.",
        cant_go ProwCantGo,
        section T_TAROT,
  has   light ship_flag;

Object -> green_branch "green branch"   
  with  name 'green' 'branch' 'leafed',
        before BranchBefore,
        initial "In the Lady Magdalena's loose grip is a traditional sailor's good-luck token: a green-leafed branch, to attract the gulls of an approaching shore.",
        section T_TAROT,
        angel_hint "Oh, you startled me for a moment there! I am getting flighty.",
  has   ;

Object Stern "Stern"    
  with  name 'sand' 'bank' 'mist',
        n_to Aboard_Ship,
        d_to SternDown,
        description "The square stern of the ship looks out south, not onto receding waves, but to what seems a tunnel through dense, glassy mist. You can faintly make out an odd, pale reddish sand bank in the distance.",
        cant_go "The boat runs fore.",
        section T_TAROT,
  has   light ship_flag;

Object -> capstan "capstan"     
  with  name 'capstan' 'anchor' 'chain' 'wheel',
        before CapstanBefore,
        initial "The top of the anchor chain is wound around the capstan, a great wheel on the deck beside you. The chain disappears over the side.",
  has   static;

Object Garden_Stream "Garden Stream"    
  with  name 'reeds',
        before GardenStreamBefore,
        n_to "Better not... you'd be seen from the Library.",
        s_to coal_bunker,
        e_to Beside_the_Wall,
        w_to "Better not... you'd be seen from the Orangery.",
        ne_to "Better not... you'd be seen from the Old Ballroom.",
        nw_to Family_Tree,
        d_to "The Hall is not safely climbable.",
        description "In the lush, verdant (which is to say, under-cared for) gardens of Meldrew House, where a stream gurgles pleasantly as it meanders through reeds. The house rises up high above you to the south and you dare not be seen from the windows by the rest of the family, so you'll have to go northwest, deeper into the gardens, or else east along a path hugging the wall.",
        cant_go "The bulk of the Hall is in your way.",
        section T_GARDEN,
  has   light scored;

Object -> coal_bunker "coal bunker"     
  with  name 'coal' 'bunker' 'loading' 'door',
        after CoalBunkerAfter,
        n_to Dark_Passage,
        s_to "On the house wall is a coal bunker, whose loading door is shut.",
        w_to ne_obj,
        initial "On the house wall is a coal bunker, whose door stands open.",
  has   door locked openable static;

Object -> stream "stream"       
  with  name 'stream' 'water' 'gurgling',
        before StreamBefore,
  has   scenery;

Object Beside_the_Wall "Beside the Wall"        
  with  n_to "You'd be seen from the Old Ballroom that way.",
        s_to "There's no door into the Hall.",
        w_to Garden_Stream,
        nw_to "You'd be seen from the Library that way.",
        u_to "The walls of the Hall are unclimbable to someone suffering from your degree of vertigo.",
        d_to nothing,
        description "The east-west path along the foot of Meldrew Hall ends here at one of the carved walls bordering the garden.",
        cant_go "The stone wall blocks further passage east.",
        section T_GARDEN,
  has   light;

Object -> potted_shrub "potted shrub"   
  with  name 'pot' 'potted' 'tub' 'plant' 'shrub',
        before ShrubBefore,
        initial "A shrub is being nursed in a wide round tub in the centre of the path, sheltered behind the wall.",
  has   static;

Object -> stone_wall "stone wall"       
  with  name 'stone' 'wall' 'carved' 'carvings' 'painted',
        before StoneWallBefore,
        life StoneWallLife,
        description "The garden wall once bore painted carvings, but they have fallen into disrepair.",
        found_in Beside_the_Wall Beside_the_Drive,
  has   scenery talkable;

Object timber_hatch "timber hatch"      
  with  name 'timber' 'hatch' 'old' 'rotted' 'rotting' 'lid',
        after TimberHatchAfter,
        n_to Wine_Cellars,
        s_to "Beside the shrub is a timber hatch, three feet across.",
        w_to thedark,
        initial "The timber lid stands open beside the shrub, revealing the old barrel-hatch.",
  has   door openable static;

Object Family_Tree "Family Tree"        
  with  name 'sign' 'signpost' 'post',
        n_to FamilyTreeNorth,
        e_to Lawn_Ornaments,
        w_to Clearing,
        se_to Garden_Stream,
        u_to Up_the_Plane_Tree,
        initial FamilyTreeInitial,
        description "You stand in the shade of a great plane tree, seedlings for which were brought back from Spain by an ancestor of yours in 1806. To the southeast is a stream, to the west is a small clearing and to the north a single break in the green privet hedge marks the entrance to the famously difficult Meldrew Hall Maze. A signpost reading ~To the Mosaic~ points east across the lawn.",
        section T_GARDEN,
  has   light;

Object -> plane_tree "plane tree"       
  with  name 'plane' 'tree' 'family',
        before PlaneTreeBefore,
  has   scenery;

Object Lawn_Ornaments "Lawn Ornaments"  
  with  name 'gnomes' 'nymphs' 'windmills' 'gnome' 'nymph' 'windmill' 'ornament' 'ornaments',
        e_to Mosaic,
        w_to Family_Tree,
        d_to Mosaic,
        description "Several hundred years of rolling have made this a rather fine patch of grass, between the privet hedge (north), the plane tree (west) and the mosaic (east). Unfortunately, it is adorned with all the really ugly ornaments (gnomes, plaster nymphs, stone windmills to grow flowers in), this being the corner of the garden least visible from the house.",
        cant_go "The options appear to be east or west.",
        section T_GARDEN,
  has   light;

Object -> plaster_statuette "plaster statuette" 
  with  name 'plaster' 'statuette' 'bust' 'statue',
        initial "Prominent amongst these is a plaster statuette, a bust of a woman.",
        description "It stands four feet high. At the base is an engraving: ~Self-Portrait, H.M. '54~. (It's presumably not by Her Majesty the Queen, though.)",
  has   static;

Object ancient_well "ancient well"      
  with  name 'ancient' 'well' 'dark',
        after WellAfter,
        initial "The lawn is lightly coated with broken plaster and dust, and in the spot where the statuette once stood is a dark, ancient well.",
        description "You can make out nothing below, and the well is too small to climb down.",
  has   container open static;

Object Mosaic "Mosaic"  
  with  name 'perspex' 'scenes' 'quadrants',
        e_to nothing,
        w_to Lawn_Ornaments,
        u_to Lawn_Ornaments,
        description "This sunken corner of the garden has been excavated and then covered over with tough perspex to protect it from visitors' shoes. It consists of a time-worn Roman mosaic, divided into four quadrants, each showing scenes of idealised Roman life. There was probably a villa on this site, but your family has never been keen on archaeologists so the excavations went no further.",
        cant_go "From here you can climb back up to the lawn.",
        section T_GARDEN,
  has   light;

Object -> Roman_mosaic "Roman mosaic"   
  with  name 'roman' 'mosaic',
        life LagachLife,
        description "Made of terra-cotta and ceramic fragments, it has held together surprisingly well.",
  has   scenery talkable;

Object -> hard_wooden_ball "hard wooden ball"   
  with  name 'croquet' 'hard' 'wooden' 'ball',
        initial "A hard wooden ball, palm-sized, rolls about across the mosaic.",
        angel_hint "Splendid, you're having a ball. I do hope you hit it off.",
  has   ;

Object Clearing "Clearing"      
  with  s_to Vegetable_Garden,
        e_to Family_Tree,
        w_to Garage,
        description "A clearing at the edge of the garden, surrounded by walls and the privet hedges of the maze. To the east is the plane tree, to the west an opening in the wall makes a garage entrance and to the south is a small vegetable garden.",
        section T_GARDEN,
  has   light;

Object Vegetable_Garden "Vegetable Garden"      
  with  n_to Clearing,
        u_to runner_bean_plant,
        description "A recently-turned vegetable garden, using up a shady corner of the garden. The patch testifies more to good intentions than horticulture.",
        cant_go "From this corner, you can only go back to the clearing.",
        section T_GARDEN,
  has   light;

Object -> runner_bean_plant "runner-bean plant" 
  with  name 'runner' 'bean' 'plant',
        n_to Up_the_Beanstalk,
        s_to "Only a runner-bean plant graces the vegetable garden.",
        w_to u_obj,
        initial "A giant runner-bean plant leads up vertiginously into the sky from here.",
        section T_GARDEN,
  has   door static;

Object Up_the_Beanstalk "Up the Beanstalk"      
  with  before BeanStalkBefore,
        after BeanStalkAfter,
        n_to Heavenly_Place,
        d_to Vegetable_Garden,
        description "At the top of the beanstalk, in amongst the clouds. There is no safe way to go from here except back down, not surprisingly. A dangerous way might be to step out onto the clouds to the north, but even if this is a fairy-tale it would be taking a lot on trust.",
        cant_go "The clouds are too tenuous that way.",
        section T_GARDEN,
  has   light;

Object Garage "Garage"  
  with  e_to Clearing,
        description "A modest brick garage, built into the garden walls. A big open doorway leads east onto the clearing.",
        section T_GARDEN,
  has   light;

Object -> garden_roller "garden roller" 
  with  name 'garden' 'roller' 'switch' 'motor' 'motorised' 'power',
        before RollerBefore,
        s_to "A big motorised garden roller is parked here.",
        initial "The garden roller sits here, its engine still running.",
        description "A motorised garden roller of the kind you sit inside, among whose simple controls is a big on/off switch.",
        each_turn RollerEachTurn,
  has   container enterable open static switchable;

Object -> weed_killer_bottle "weed killer bottle"       
  with  name 'weed' 'killer' 'bottle' 'weedkiller',
        before WeedKillerBefore,
        initial "In the shadows is a weed killer bottle.",
        description "If squeezed, it squirts weed killer over the ground. There are many warning labels about getting it on one's hands.",
        daemon WeedKillerDaemon,
        angel_hint "The funny thing is, they didn't have weedkillers in the early nineteenth century, and yet they still planned some marvellous gardens.",
  has   ;

Object -> spade "spade" 
  with  name 'bladed' 'agricultural' 'implement' 'zzzzzzzzz',
        before SpadeBefore,
        initial "Hanging from a hook is a bladed agricultural implement.",
        short SpadeShort,
        angel_hint "Do you think there's anywhere in the garden particularly suitable for such an implement?",
  has   ;

Object Up_the_Plane_Tree "Up the Plane Tree"    
  with  name 'jemima' 'conservatory' 'window',
        before UpTreeBefore,
        d_to Family_Tree,
        description "A magnificent view of the gardens would be yours, were it not for the branches and leaves which surround you. You can make out Aunt Jemima up at one of the conservatory windows, but hide from her view. Down below, the privet-hedge layout of the maze can be seen through the lower branches.",
        cant_go "No, don't go out on a limb.",
        section T_GARDEN,
  has   light;

Object -> maze_layout "maze layout"     
  with  name 'maze' 'layout',
        description LayoutDesc,
        article "the",
  has   scenery;

Object Maze "Maze"      
  with  before MazeBefore,
        after MazeAfter,
        s_to Family_Tree,
        w_to Viewpoint_Ledge,
        description "A maze of green privet passages, all alike.",
        cant_go "The privet hedges are in the way.",
        section T_GARDEN,
  has   light scored;

Object Patio_in_Maze "Patio in Maze"    
  with  name 'patio' 'flagstone',
        before PatioBefore,
        after PatioAfter,
        u_to "Up?  Are we playing the same game?",
        d_to Crypt,
        description "This is an old stone patio in the heart of the garden maze. A missing flagstone offers an intriguing dark prospect beneath.",
        cant_go "The privet hedges are in the way.",
        section T_GARDEN,
  has   light scored;

Object -> marble_rose "marble rose"     
  with  name 'marble' 'rose' 'flower',
        before RoseBefore,
        initial "Sticking out of some soft earth is a perfectly-carved marble rose.",
        angel_hint "Perfection set in stone. Not a gift for mortal women!",
  has   ;

Object Viewpoint_Ledge "Viewpoint Ledge"        
  with  name 'motorway' 'coaches',
        before ViewpointBefore,
        e_to Maze,
        description "This flagstoned rampart on the hillside looks across the valley, down (unfortunately) to the motorway below. Coaches pass by, reminding you of the rapidly approaching time when visitors will have to be let in again for the summer. The only safe way to go is back east into the maze. To one side is a plaque.",
        cant_go "The hillside is too steep.",
        section T_GARDEN,
  has   light scored;

Object -> plaque "plaque"       
  with  name 'plaque',
        description "~This viewpoint, one of the finest in the county, was laid down by Capability Meldrew, a well-known landscape gardener of his day. It was intended as one of the rewards of the garden maze, and was constructed c. 1808 after an earlier folly on the site collapsed.~",
  has   scenery;

Object -> miniature "miniature" 
  with  name 'miniature' 'plastic' 'etching',
        n_to Folly,
        initial "A miniature plastic etching rests on the plaque.",
        description "No larger than a playing card, it depicts the Folly which used to stand on the hillside outcrop.",
        devil_hint "What's the point of a drawing so small it might almost be a playing card?",
  has   ;

Object Folly "Folly"    
  with  name 'wain' 'hay' 'valley',
        after FollyAfter,
        e_to Maze_Foundations,
        description "This is a rampart on the hillside, a natural ledge leading east. Down below in the valley, rough cottages surround a church. Labourers toil in the fields, and a hay wain is being pulled across the river.^^Towering over you is a monstrously awful piece of architecture, a Folly. The freestanding tower has no appreciable purpose and no apparent entrance. The latter is just as well since it looks extremely unsafe.",
        cant_go "The hillside is too steep.",
        section T_GARDEN_PAST,
  has   light scored;

Object -> Folly_tower "Folly tower"     
  with  name 'folly' 'tower' 'bricks' 'unsafe',
        description "Decidedly unsteady.",
  has   scenery;

Object -> bean_pole "bean pole" 
  with  name 'bean' 'pole' 'beanpole',
        after BeanpoleAfter,
        initial "A bean pole, of the kind used to grow climbing plants, rests against the side of the tower.",
        number 0,
        daemon BeanpoleDaemon,
        rod_assoc rod_of_stalking,
        devil_hint "Whatever you do, it'll always be a bean pole.",
  has   general hidden_rod;

Object Maze_Foundations "Maze Foundations"      
  with  before FoundationsBefore,
        after FountdationsAfter,
        s_to Tree_Planting,
        w_to Folly,
        description "A square grid of plots of grass and seedbeds, all alike.",
        section T_GARDEN_PAST,
  has   light;

Object Tree_Planting "Tree Planting"    
  with  after PlantingAfter,
        description "Capability Meldrew and his gang of workmen are delicately planting a sapling plane tree here. Your disturbance annoys them immensely and you are immediately arrested for vagrancy and theft. After a few months in prison, you are hauled up before the County Assizes and sentenced...",
        section T_GARDEN_PAST,
  has   light;

Object Bricked_Path "Bricked Path"      
  with  e_to Hedgery,
        sw_to White_Hallway,
        initial BrickPathInitial,
        description "You're strolling on a pleasant bricked path, passing from the outer rooms of Meldrew Hall to a track through the eastern side of the garden.",
        section T_GARDEN,
  has   light;

Object Hedgery "Hedgery"        
  with  n_to HedgeryNorth,
        e_to Croquet_Lawn,
        w_to Bricked_Path,
        description "Named by some family wag generations back, this is a restful hedge garden, crowned with a summer house to the north, widening out to a broad croquet lawn east.",
        section T_GARDEN,
  has   light;

Object -> flock_of_sparrows "flock of sparrows" 
  with  name 'flock' 'of' 'sparrows',
        initial "A flock of sparrows crowds around the gutters of the summer house. Every now and then one flits up and lands somewhere else, and they bustle about chirpily.",
  has   static;

Object Summer_House "Summer House"      
  with  after SummerHouseAfter,
        n_to nothing,
        s_to SummerHouseSouth,
        description "An old wooden summer house, reeking of varnish and uncertain beneath your feet. Several segments of the tall glass many-sided pyramidal roof are missing and others are cracked, but this is still somehow a homely and welcoming retreat. The only entrance is also the only exit.",
        section T_GARDEN,
  has   light;

Object -> croquet_mallet "croquet mallet"       
  with  name 'croquet' 'mallet',
        initial "A croquet mallet stands by one wooden wall.",
        devil_hint "It's for mashing croquet potatoes.",
        angel_hint "Croquet is the Devil's own game!",
  has   ;

Object -> gold_watch_on_a_chain "gold watch on a chain" 
  with  name 'gold' 'watch' 'on' 'chain',
        before ChainBefore,
        initial "Something golden hangs by a chain from a loose pane in the roof, but it's too high up to reach.",
        description "It is beautifully polished, and captivates the eye. You could stare for hours...",
        angel_hint "How easily are the weak mesmerised by baubles.",
  has   ;

Object Behind_Summer_House "Behind Summer House"        
  with  s_to loose_board,
        w_to Mosaic,
        se_to Croquet_Lawn,
        d_to Mosaic,
        description "Among dense hedges by the shabby wood-slatted back of the summer house. Dark scratchy branches hem you in, but you could scramble down to the west or out onto the croquet lawn southeast.",
        section T_GARDEN,
  has   light scored;

Object -> loose_board "loose board"     
  with  name 'loose' 'board',
        before BoardBefore,
        n_to Summer_House,
        s_to "One board of the back wall is noticeably loose, making a good-sized crack.",
        w_to ne_obj,
        initial "You could easily squeeze past the loose board south into the summer house.",
  has   door openable static;

Object -> crack "crack" 
  with  name 'crack' 'gap' 'hole' 'summerhouse' 'summer' 'house',
        before CrackBefore,
        after CrackAfter,
        description "Through the crack you can see the summer house.",
  has   container open scenery;

Object -> irate_squirrel_friend "irate squirrel friend" 
  with  name 'irate' 'my' 'squirrel' 'friend',
        life SquirrelLife,
        initial nothing,
        description "Not at all shy when on his own territory.",
        article "your",
  has   animate;

Object Croquet_Lawn "Croquet Lawn"      
  with  w_to Hedgery,
        nw_to nothing,
        initial CroquetLawnInitial,
        description CroquetLawnDesc,
        cant_go "The lawn is enclosed on all sides, but for a gap back west.",
        short CroquetLawnShort,
        section T_GARDEN,
  has   light;

Object -> peg_and_six_hoops "peg and six hoops" 
  with  name 'peg' 'hoop' 'hoops',
        description "There are six arched hoops in a croquet set, arranged around a central peg. These ones have been safely anchored in place since the lawn was laid out in, oh, Midsummer 1923 if family lore is to be believed.",
  has   scenery;

Object strongbox "strongbox"    
  with  name 'strong' 'box' 'strongbox',
        e_to iron_key,
        description "A good strong strongbox, buried for two centuries and now unearthed; it bears a fine gothic iron lock, and a tasteless coat of arms (a wild boar rampant).",
        angel_hint "You might have read about this. One of your ancestors is the key, perhaps?",
  has   container lockable locked openable;

Object -> golden_astrolabe "golden astrolabe"   
  with  name 'golden' 'gold' 'astrolabe' 'eyepiece',
        before AstrolabeBefore,
        after AstrolabeAfter,
        initial nothing,
        description "A very old instrument for measuring altitudes, this is all that remains of Sir Joshua Meldrewe's stolen hoard of gold. There is an eyepiece.",
        angel_hint "A mighty fine instrument, though not much use hand-held.",
  has   scored;

Object dug_hole "dug hole"      
  with  name 'hole' 'dug',
        before DugHoleBefore,
        description "The rich loam, the silver of earthworms, the dignity of toil... none of these pastoral consolations is yours as you scrabble in the dirt.",
        describe DugHoleDesc,
  has   container open static;

Object Murky_Cave "Murky Cave"  
  with  w_to Spur_of_Rock,
        ne_to Valley_Prospect,
        initial MurkyCaveInitial,
        description "This is a murky hillside cave, whose mouth opens to the northeast, though a tight squeeze might lead a little way west. Outside is a clear starry night. There is no traffic noise, and the air smells fresh.",
        daemon MurkyCaveDaemon,
        section T_ANCIENT_BRITAIN,
  has   ;

Object -> flaming_torch "flaming torch" 
  with  name 'flaming' 'torch',
        initial "Hanging up on an iron bracket is a flaming torch.",
  has   light;

Object -> historical_pamphlet "historical pamphlet"     
  with  name 'historical' 'pamphlet',
        sw_to n_obj,
        description "It is a summary of the writings of a polemical monk called Gildas, and relates to events following the fall of the tyrant Vortigern at the turn of the fifth century A.D. After dark decades of pillage by Saxon mercenaries, Britain was reunited by Ambrosius Aurelianus and then defended at the Battle of Badon Hill, some time in the early years of the sixth century.^^This remarkable victory was of no religious significance, so Gildas does not dwell upon it. He tends only to mention bad kings and leaders, and then chiefly to insult them. (Talking about Gildas is an excellent way to annoy an Anglo-Saxon historian.)  Nobody even knows where Badon Hill is any more, or anything else about it, although some students of Welsh poetry believe Ambrosius was the source of the legend of King Arthur.",
        article "an",
  has   ;

Object Spur_of_Rock "Spur of Rock"      
  with  e_to Murky_Cave,
        d_to Hanging_on_Rope,
        description "An uncomfortable spur of rock on the hillside crags. The only natural access to this spot is a crevice in the hill to the east, but there is also a securely fastened rope hanging down into the darkness.",
        cant_go "The crags are too precipitous.",
        section T_ANCIENT_BRITAIN,
  has   light;

Object -> hanging_rope "hanging rope"   
  with  name 'hanging' 'rope',
        before RopeBefore,
  has   scenery;

Object Hanging_on_Rope "Hanging on Rope"        
  with  name 'patrol' 'men',
        before HangingOnRopeBefore,
        after HangingOnRopeAfter,
        u_to Spur_of_Rock,
        d_to RopeDown,
        description "You are hanging perilously on a hemp rope, suspended from an overhang of rock above, which drops down into the darkness of the valley. On the tracks below, patrols of men can be heard, and you feel instinctively that they are not friendly.",
        cant_go "Up and down are it, quite frankly.",
        section T_ANCIENT_BRITAIN,
  has   light;

Object -> hemp_rope "hemp rope" 
  with  name 'hemp' 'rope',
  has   scenery;

Object -> yellow_daisy "yellow daisy"   
  with  name 'yellow' 'daisy',
        before DaisyBefore,
        after DaisyAfter,
        u_to DaisyUp,
        initial "A single yellow daisy grows from a little tuft of grass on the crags.",
  has   clothing scored;

Object Valley_Prospect "Valley Prospect"        
  with  e_to Roman_Villa,
        sw_to Murky_Cave,
        description "The geography is strangely familiar here. You are on a natural shelf on the hillside, overlooking the valley below. An all-but invisible cleft in the rock leads to a cave to the southwest, and the slope can safely be traversed to the east.^^It is a brightly moonlit night, cool as in late spring. There will be a sharp frost tomorrow. Down in the valley, a great cartwheel circle of camp fires illuminate some dark shapes, perhaps crude encampments. There is no other sign of civilisation.",
        cant_go "The hillside is too steep.",
        section T_ANCIENT_BRITAIN,
  has   light;

Object Roman_Villa "Roman Villa"        
  with  name 'timber' 'door',
        s_to Atrium_Cloister,
        e_to Stream,
        w_to Valley_Prospect,
        description "You stand beside a Roman villa, whose columns cast shadows of an Empire in the moonlight. It is thirty years since the fall of the West, and Britain is cut off from the continent, where soon even the existence of the Anglis will become a myth. This villa has survived the pestilence and devastation of the civil war, and although it must be a couple of centuries old, it is still standing. From here you could cut across the hillside east to west, or slip in through a none-too-secure timber door.",
        section T_ANCIENT_BRITAIN,
  has   light;

Object Stream "Stream"  
  with  name 'river' 'road' 'stream' 'roof',
        before EndStreamBefore,
        w_to Roman_Villa,
        u_to "You climb the ladder and are about to jump onto the roof when you catch sight of a man swaddled in animal furs, spreadeagled over the tiles, looking down into the central courtyard of the villa. He has a nasty-looking sword and since he hasn't seen you, you quietly shin back down the ladder again.",
        description "A stream runs past the villa and cascades down the hillside here, to join the river far below, near the Roman road which will, in 1500 years time, become the motorway which so spoils the view from your back garden. A rough ladder of wood lashed together with leather rests against the villa at the lowest point of the tiled roof.",
        section T_ANCIENT_BRITAIN,
  has   light;

Object -> rough_ladder "rough ladder"   
  with  name 'rough' 'ladder',
        before LadderBefore,
  has   scenery;

Object Atrium_Cloister "Atrium Cloister"        
  with  name 'timber' 'door',
        n_to Roman_Villa,
        s_to Atrium,
        description "The shadowy cloisters of the villa's atrium. You disturb a fieldmouse, and hear the scratching of tiny claws on stone. Moonlight filters in from the central courtyard to the south, and a rotten timber door leads back north.",
        section T_ANCIENT_BRITAIN,
  has   light;

Object -> summoning_horn "summoning horn"       
  with  name 'horn' 'summoning' 'on' 'pole',
        before HornBefore,
        initial "Resting against one pillar is a horn made from a tusk, mounted on a long spear-like pole.",
        rod_assoc rod_of_language,
  has   hidden_rod;

Object Atrium "Atrium"  
  with  n_to Atrium_Cloister,
        s_to Entrance,
        e_to Guard_Quarters,
        w_to Triclinium,
        description "The central well of the villa, ringed with columns. On the north side is a cloister and stone-linteled doorways lead east, south and west. The central floor area is commanded by a beautiful Roman mosaic, quartered into individual scenes, around the edges of which are vents from the hypocaust. There is no roof over the courtyard, and the atrium is lit by moonlight.",
        section T_ANCIENT_BRITAIN,
  has   light;

Object -> mosaic "mosaic"       
  with  name 'mosaic',
        description "The four quarters show white-beards in the Forum, farmers in Italian fields, a military fortification and a grain ship unloading at Ossia.",
  has   scenery;

Object Guard_Quarters "Guard Quarters"  
  with  name 'armour' 'spears' 'hides' 'blankets',
        w_to Atrium,
        description "Whatever function this spacious room once had, now it is evidently home to military men, for it is filled with crude armour, spears, rough blankets which are little more than animal hides. Fortunately for you the guards are absent.",
        section T_ANCIENT_BRITAIN,
  has   light;

Object -> bone_die "crude bone die"     
  with  name 'die' 'dice' 'bone',
        after DieAfter,
        description "A crude six-sided die made from animal bone.",
  has   ;

Object -> leather_sandals "leather sandals"     
  with  name 'sandals' 'shoes' 'leather',
        article "a pair of",
  has   clothing;

Object Triclinium "Triclinium"  
  with  e_to Atrium,
        d_to TricliniumDown,
        description "What was once the villa's triclinium, or kitchen, is now deserted and long since ransacked for metal. (Nobody lives on their own in this century, and this villa wouldn't be easy to defend.)  A doorway to the east gives onto the atrium.",
        section T_ANCIENT_BRITAIN,
  has   light;

Object -> kitchen_well "kitchen well"   
  with  name 'well' 'hinged' 'wooden' 'cover',
        after WellAfter,
        n_to Inside_Well,
        s_to "In one corner is a hinged wooden cover of some kind, which is shut.",
        w_to thedark,
        initial "The hinged wooden cover is raised, revealing a circular well about a yard in diameter. It is very dark inside.",
        description "The well has a hinged wooden cover. You can't tell by looking how deep it is.",
        number 0,
        daemon WellDaemon,
  has   container door openable static;

Object Inside_Well "Inside Well"        
  with  name 'air',
        before InsideWellBefore,
        e_to Hypocaust,
        u_to Triclinium,
        description "You are clinging perilously to the walls of the deep and dangerous well. You can hardly see a thing, even with the aid of the torch, but curiously enough you feel warm air blowing across you from the east.",
        cant_go "Too risky. There might not be anything that way, for all you know.",
        section T_ANCIENT_BRITAIN,
  has   ;

Object Hypocaust "Hypocaust"    
  with  name 'fires' 'heating' 'log' 'logs',
        w_to Inside_Well,
        description "This very low almost-cellar underneath the atrium is a tiny access space for log fires which are kept going to provide a form of central heating for the villa. They are lit and going away nicely, interestingly. It isn't very warm by twentieth-century standards, but you have to admit it works.^^A tiny amount of light filters in from the vents in the roof; just enough to see by. The only way in seems to be the way you came.",
        cant_go "The log fires are hot, and anyway the only way out large enough for you is back west.",
        section T_ANCIENT_BRITAIN,
  has   light;

Object -> vents "vents" 
  with  name 'hypocaust' 'vents',
        before VentsBefore,
        article "the",
  has   scenery;

Object Entrance "Entrance"      
  with  before EntranceBefore,
        after EntranceAfter,
        n_to Atrium,
        description "A well-flagstoned forecourt at the villa entrance, surrounded by lesser wooden buildings. Some of these are in use as stables, and figures of men slip between them. You hide from sight, not wishing to draw attention to yourself. Up on the hill, where Meldrew Hall will one day be built, men on horseback can be seen circling the access track. For a deserted villa, this is certainly well-guarded.",
        section T_ANCIENT_BRITAIN,
  has   light scored;

Object Rough_Tent "Rough Tent"  
  with  name 'hides',
        description "Well, here you are, imprisoned again. This time the cell is a tent of stitched animal hides, perhaps twenty feet in diameter, supported by a central pole. You have no idea where the entrance is, because you were blindfolded on the way in. There is at least a dim light from the camp-fires outside the tent.",
        cant_go "This tent doesn't seem to have an exit, either.",
        section T_ANCIENT_BRITAIN,
  has   light scored;

Object -> tent_pole "tent pole" 
  with  name 'tent' 'pole' 'central',
        before TentPoleBefore,
        after TentPoleAfter,
        number 0,
        daemon TentPoleDaemon,
        rod_assoc rod_of_returning2,
  has   concealed static hidden_rod;

Object unconscious_Saxon_spy "unconscious Saxon spy"    
  with  name 'saxon' 'spy',
        before SpyBefore,
        life SpyLife,
        initial "An unconscious Saxon spy is slumped on the ground. Occasionally faint noises can be heard from him.",
        description "He is dishevelled, wiry and unconscious. He is also covered with dust and leaves, as if he has been lying down on his front outdoors for hours.",
        number 0,
        daemon SpyDaemon,
  has   animate;

Object Encampment "Encampment"  
  with  name 'fires' 'camp' 'dolmen',
        e_to EncampmentEast,
        description "Luckily for you the tent, now collapsed, was hardly being watched at all, because all the attention is diverted to a ghastly ritual being carried out over beyond the camp-fires. But your luck cannot hold for long. You are so surrounded by hostile territory that you simply have nowhere to run or hide. Things are, not to put too fine a point on it, looking grim.",
        cant_go "Far, far too risky.",
        number 0,
        daemon EncampmentDaemon,
        section T_ANCIENT_BRITAIN,
  has   light scored;

Object -> dolmen "dolmen"       
  with  name 'dolmen' 'coals' 'hot' 'rock',
        n_to Beneath_Dolmen,
        w_to e_obj,
        initial "An erratic glacial rock, which seems in the feverish firelight to make a natural dolmen, can be made out to the east, on the other side of an almost-extinguished campfire of hot coals.",
  has   door open static;

Object Beneath_Dolmen "Beneath Dolmen"  
  with  name 'dolmen',
        w_to Encampment,
        description "You stand beside the eerie dolmen, surrounded by the terrible noises and incantations of a druidic rite.",
        cant_go "Far, far too risky.",
        section T_ANCIENT_BRITAIN,
  has   light scored;

Object -> bluish_stone "bluish stone"   
  with  name 'stone' 'blue' 'bluish',
        initial "Resting on top of the dolmen is a polished blue stone.",
        rod_assoc fifty_franc_note,
        devil_hint "I wouldn't wave that around if I were you!",
  has   scored hidden_rod;

Object fifty_franc_note "fifty-franc note"      
  with  name 'fifty' 'franc' 'note' 'francs',
  has   ;

Object ghost_of_yourself "ghost of yourself"    
  with  before YourGhostBefore,
        description "You are transparent like a ghost.",
        time_left 0,
        capacity 1,
  has   ;

Object Premonition "Premonition"        
  with  e_to PremonitionEast,
        sw_to Camp_Fire,
        description "It is a frosty, clear night, but there is a scent of camp-fires burning in the distance. You are passing through the landscape as if a ghost, and all seems faintly unreal. To the east is one side of an animal-hide tent, but there is no way in from here. To southwest, some soldiers sit around the embers of a fire. There is a terrible sense of something about to happen.",
        cant_go DreamCantGo,
        section T_DREAMING,
  has   light;

Object The_Generals_Tent "The General's Tent"   
  with  n_to Beside_Table,
        w_to GeneralsTentWest,
        description "This is the tent of a thin, reedy man who wears no uniform but has an obvious and commanding presence. He has an aquiline, patrician nose and, at five feet four, is taller than anyone else present. The others are advisers, junior officers, scheming politicians and their like. They are keeping their distance from a trestle table at the north end of the tent.",
        cant_go DreamCantGo,
        section T_DREAMING,
  has   light;

Object Beside_Table "Shrine of the Bear"        
  with  s_to The_Generals_Tent,
        description "This is a kind of improvised shrine. A trestle table bears entrails, crude drawings sketched out on hide, and caged animals: draped beside it is a primitive tapestry of a bear reared up on its hind legs.",
        cant_go DreamCantGo,
        section T_DREAMING,
  has   light;

Object -> bear_tapestry "bear tapestry" 
  with  name 'bear' 'tapestry',
        life BearTapestryLife,
        description "Primal, bestial, terrifying.",
  has   scenery talkable;

Object -> heavy_iron_mascot "heavy iron mascot" 
  with  name 'heavy' 'iron' 'mascot',
        before MascotBefore,
        after MascotAfter,
        initial "On the table is a heavy iron mascot of some kind.",
        description "The mascot is in the shape of an ankh, with a lemniscus (or infinity) symbol moulded onto it.",
        number 0,
        daemon MascotDaemon,
        devil_hint "An absolute essential.",
  has   ;

Object -> Druid "Druid" 
  with  name 'druid' 'druidess',
        life DruidLife,
        initial "Beside the table is a more substantial adviser, as if she too walks in this strange spirit plane. She is wearing frightening druidical robes, of strange pelts and furs, with nasty-looking charms around her neck. Every so often, she seems to catch sight of you out of the corner of her eye, but then look round and see nothing. The military men do not believe in her power, and yet... they treat her with respect.",
  has   animate proper;

Object Camp_Fire "Camp Fire"    
  with  e_to Near_Dolmen,
        ne_to Premonition,
        description "You can almost smell fear here. A motley platoon of soldiers are sitting about the embers of a fire. None are talking or sleeping, and the false good humour of the evening has died away. At first light, you realise, there will be a battle. It isn't a risk you'd like to run in their place. And there is a strange light already in the east... not yet a dawn, for the soldiers seem unaware of it.",
        cant_go DreamCantGo,
        section T_DREAMING,
  has   light;

Object Near_Dolmen "Near Dolmen"        
  with  after DolmenAfter,
        description "A standing stone, perhaps a glacial erratic, stands here and on top of it is a shining blue stone, whose brightness almost blinds you. You feel irresistably drawn to it, and your hand reaches out...",
        cant_go DreamCantGo,
        section T_DREAMING,
  has   light;

Object Melancholy_Dream "Melancholy Dream"      
  with  e_to nothing,
        d_to nothing,
        description "A strangely familiar, dusty passage, sloping down from a southern end bathed in hostile light to some kind of metal barrier in the north.",
        cant_go DreamCantGo,
        each_turn DreamEachTurn,
        section T_EGYPT_DREAMING,
  has   light;

Object -> metal_barrier "metal barrier" 
  with  name 'metal' 'barrier',
        before BarrierBefore,
  has   scenery;

Object green_luminescence "flurries of green luminescence"      
  with  name 'green' 'flurries' 'of' 'luminesce',
        before LumnescenceBefore,
        initial "Flurries of green luminescence whirl endlessly around you, west to east and over.",
        description "The flurries have almost endless fascination... but you manage to tear your eyes away after, oh, an hour?",
  has   static;

Object Solid_Sand "Solid Sand"  
  with  e_to Octagonal_Tomb,
        w_to Melancholy_Dream,
        u_to Melancholy_Dream,
        d_to Octagonal_Tomb,
        description "Your ghostly self is embedded in a diagonal downward shaft (descending to the east) entirely filled with dry sand. Solid flagstones line the walls.",
        cant_go DreamCantGo,
        section T_EGYPT_DREAMING,
  has   light;

Object Octagonal_Tomb "Octagonal Tomb"  
  with  name 'torch' 'torches' 'slab',
        w_to Solid_Sand,
        u_to Solid_Sand,
        description "Flaming torches bracketed in the wall gutter as the last oxygen in the air is consumed, and the flicker of flame plays across the yellow-orange glaze of the tomb walls.^^This octagonal chamber is lined with Egyptian hieroglyphics. Sand spills across the floor from under the sole entrance, sealed by an ingenious stone slab.",
        cant_go DreamCantGo,
        section T_EGYPT_DREAMING,
  has   light;

Object -> hieroglyphic_symbols "hieroglyphic symbols"   
  with  name 'symbols' 'hieroglyphs' 'egyptian',
        description HieroglyphsDescription,
        article "some",
  has   scenery;

Object -> ships_wheel "ship's wheel"    
  with  name 'ships' 'wheel',
        before ShipWheelBefore,
        initial "A kind of ship's wheel (of eight-spoked timber) is affixed to the northwest wall.",
  has   static;

Object Crypt "Crypt"    
  with  s_to bronze_mural,
        u_to Patio_in_Maze,
        d_to bronze_mural,
        initial CryptInitial,
        description "A dismal crypt, disused, rainswept and strewn with leaves. Light streams in from the square hole in the roof. There are no bones or urns on show.",
        section T_CATACOMBS,
  has   light;

Object -> bronze_mural "bronze mural"   
  with  name 'bronze' 'mural',
        life LagachLife,
        n_to Jagged_Passage,
        s_to "The south wall forms a giant bronze mural, which has stood the test of time.",
        w_to thedark,
        initial "The mural stands slightly to one side, revealing a passage leading downward.",
        description "The mural depicts an old bearded wise man following a star in the western sky. He has his right arm around an attractive young woman and holds a bundle of wands with his left hand. Around the border are astrological symbols of all kinds, from Tarot suits to zodiacal constellations.",
  has   door static talkable;

Object Jagged_Passage "Jagged Passage"  
  with  name 'bones',
        before CryptRoomBefore,
        n_to Crypt,
        s_to The_Catacombs,
        e_to Charnel_Passage,
        u_to Crypt,
        d_to The_Catacombs,
        description "An eerie passage, running down from an opening at the north to murky depths in the south. The walls are jagged, uneven and decorated with bones. An unpleasantly stale, charnel odour drifts in through a gap to the east.",
        section T_CATACOMBS,
  has   ;

Object -> wrought_iron_key "long wrought iron key"      
  with  name 'long' 'wrought' 'iron' 'key',
        sw_to compass,
        initial "You appear to be standing on a wrought iron key.",
        description "A figure-eight double ring, a long barrel and a finely-cut ten-groove claw: this is the ultimate in keys. It is superb.",
  has   ;

Object Charnel_Passage "Charnel Passage"        
  with  before CryptRoomBefore,
        e_to Sarcophagus,
        w_to Jagged_Passage,
        description "A long, winding, vile passage through the earth, running east to west. The distasteful odour grows stronger as you go east.",
        section T_CATACOMBS,
  has   ;

Object Sarcophagus "Sarcophagus"        
  with  before CryptRoomBefore,
        w_to Charnel_Passage,
        description "Well, perhaps ~sarcophagus~ is a little melodramatic, but it's that kind of moment. This must be somewhere under the old parish church. You are stooped over inside a stone tomb, stained and crumbled with decay, broken only by a crevice you crawled in by. It is a nightmarish place.",
        section T_CATACOMBS,
  has   ;

Object -> tombstone "tombstone" 
  with  name 'tombstone' 'tomb' 'stone',
        initial "Nightmarishly, even the floor you kneel on is a fallen tombstone.",
        description "The gist of the inscription is: ~Henri Maladreue, obiit mcdlvi.~",
  has   static;

Object The_Catacombs "Catacombs"        
  with  before CryptRoomBefore,
        n_to Jagged_Passage,
        w_to CR,
        u_to Jagged_Passage,
        d_to nothing,
        description "A large, grisly cave, deep under the garden, dimly lit and eerie. Darkness curls around the natural pillars of rock like a mist: and there is a peculiar, vaguely familiar odour to it. The only obvious routes out are an uneven passage climbing to the north and a crawl west.",
        cant_go "You bumped into something unpleasant there.",
        time_left 0,
        section T_CATACOMBS,
  has   ;

Object aluminium_staircase "aluminium staircase"        
  with  name 'staircase' 'stairs' 'stair' 'case' 'aluminium',
        before AluminumStairBefore,
        initial "The odd smell seems to be ozone, and it drifts up from a previously concealed aluminium staircase.",
        description "Leading down.",
        article "an",
  has   static;

Object CR "CR"  
  with  name 'basket' 'seesaw' 'hand' 'cannon' 'glass',
        after CRAfter,
        n_to metal_wall,
        s_to nothing,
        e_to CREast,
        description "The cartoonist Heath Robinson used to specialise in drawings of fantastically complicated machines of string, pulleys, levers, counterweights, cogs, mice running about on wheels and the like. Just such a contraption fills the west end of this room, though most of the workings are behind a glass wall which, although running with age, is as solid as the day it was built. The parts are very old (hand-made, not machined) but uncorroded.^^The only way out appears to be via the crawl to the east.",
        time_left 2,
        short CRShort,
        section T_CATACOMBS,
  has   ;

Object -> metal_wall "metal wall"       
  with  name 'mirror' 'metal' 'bronze' 'wall' 'sheet' 'amber',
        before MetalWallBefore,
        n_to CR,
        s_to "The north edge of the room is a big sheet of dull amber-coloured metal.",
        w_to w_obj,
        initial MetalWallInitial,
        description "Someone rather good-looking (you can't help thinking) is reflected in the metal surface.",
  has   door static;

Object -> iron_grid "iron grid" 
  with  name 'iron' 'grid' 'contraption' 'panel',
        initial IronGridInitial,
        description GridDesc,
  has   static;

Object -> glowing_golden_orb "glowing golden orb"       
  with  name 'glowing' 'golden' 'orb',
        before CannonballBefore,
        description "How tantalisingly valuable it seems.",
  has   scenery;

Object -> cannonball "cannonball"       
  with  name 'cannon' 'ball' 'cannonball',
        before CannonballBefore,
        description "Solid, heavy, reliable, out of reach on the other side of the glass.",
  has   scenery;

Object Universe_Maintenance_Room "Universe Maintenance Room"    
  with  name 'gauges' 'machines' 'cube' 'dials',
        u_to The_Catacombs,
        description "You really should try to be more awestruck, for this is Merlin's cave, the hub of Creation. Every visitor perceives this place differently, according to his or her own myths and beliefs. Your particular creed being science, there is only a black metal one-metre cube with an unimpressive collection of gauges and dials. An aluminium staircase leads up.",
        section T_CATACOMBS,
  has   scored;

Object -> big_electricians_switch "big electrician's switch"    
  with  name 'big' 'electricians' 'switch',
        after SwitchAfter,
        description "The lower, on, position is labelled ~Determinism~. The upper, off, position is labelled ~Chance~.",
  has   on scenery static switchable;

Object -> large_dial "large dial"       
  with  name 'large' 'dial' 'gauges' 'dials',
        before DialBefore,
        initial "Particularly prominent are a large dial, like the volume control on an expensive hi-fi amplifier, and a big electrician's switch. Both are labelled in small print.",
        description "Above the dial is a lower-case letter h with a slashed line through it. It is currently turned to 1.055 or thereabouts. There is something worryingly dangerous about its matter-of-factness.",
  has   static;

Object Inside_the_Orb "Inside the Orb"  
  with  name 'light',
        after InOrbAfter,
        description "You half-stand, half-float in a golden, misty sphere perhaps ten yards across, which slowly spins. The centre, out of reach and somehow insubstantial, is an eight-by-eight lattice of oblong crystals, bathed in warm pearly light.",
        number 0,
        each_turn InOrbEachTurn,
        section T_CATACOMBS,
  has   light;

Object -> array_of_oblong_crystals "array of oblong crystals"   
  with  name 'array' 'oblong' 'lattice' 'crystals' 'images' 'board' 'chess' 'pieces' 'king' 'queen' 'white' 'black' 'kings' 'queens' 'bishops' 'knights',
        initial "Images lurk about the array of oblong crystals.",
        description "They are extremely hard to see and impossible to touch, as if you can only catch anything at all through the corner of your eye.",
        article "an",
  has   static;

Object Causeway "Causeway"      
  with  before CausewayBefore,
        n_to Island_of_Pharos,
        se_to Crossroads,
        initial CausewayInitial,
        description "A warm winter's night in the ancient city of Alexandria, on the Heptastadion causeway across the harbour to the Island of Pharos (to north). The Mediterranean waters lap against the land bridge, and the whole city (southeast) is lit up with torches: it is a night of celebration.",
        number 2,
        daemon CausewayDaemon,
        section T_ALEXANDRIA,
  has   light;

Object Island_of_Pharos "Island of Pharos"      
  with  name 'pharos' 'lighthouse' 'moon' 'circle' 'octagon' 'square' 'defences' 'causeway' 'island' 'harbour',
        before CausewayBefore,
        s_to Causeway,
        u_to "The Pharos is unclimbable, alas.",
        d_to rusty_iron_grating,
        description "The island of the Pharos: the lighthouse after which others are named, one of the Seven Wonders of the World, blazes into the sharp moonlit sky. It is 120 metres high, a circle on an octagon on a square.^^A light wind blows across the coastal defences. On this spot, seventy-two scholars first translated the Old Testament into Greek: shivering continuously if it was as chilly as this. A narrow causeway runs south across the harbour.",
        cant_go "The causeway is the only land route off the island.",
        daemon PharosDaemon,
        each_turn PharosEachTurn,
        section T_ALEXANDRIA,
  has   light;

Object -> rusty_iron_grating "rusty iron grating"       
  with  name 'rusty' 'iron' 'grating' 'seaweed' 'grate' 'rusted',
        before IronGratingBefore,
        n_to Jetty,
        s_to "In one wall of the wave defences is a rusty seaweed-wreathed iron grating, closed up tight.",
        e_to rusty_iron_key,
        w_to thedark,
        initial "A rusty seaweed-wreathed iron grating lies open here.",
  has   door lockable locked openable static;

Object -> rusty_iron_key "rusty iron key"       
  with  name 'rusty' 'iron' 'key',
        before RustyKeyBefore,
        sw_to compass,
        initial "Interestingly, a key which looks as if it would fit the grating can be seen inside the passage beneath.",
        angel_hint "Oh dear, surely it's gratingly obvious what this fits?",
  has   ;

Object Jetty "Jetty"    
  with  before CausewayBefore,
        u_to Island_of_Pharos,
        description "Down on a dark stone jetty, where the waters of the Alexandrian harbour splash insistently. Rough-hewn steps rise up the island through the grating.",
        each_turn JettyEachTurn,
        section T_ALEXANDRIA,
  has   light scored cat_nofollow;

Object -> skiff "skiff" 
  with  name 'skiff' 'boat' 'small',
        initial "A skiff (a small sail-boat) is moored up here.",
        description "You could easily sail away: where you would end is at the mercy of the tides and the night breeze, since you have no idea how to guide a rudder or trim a sail.",
  has   container enterable light open static;

Object -> -> adamantine_heart "adamantine heart"        
  with  name 'adamantine' 'heart' 'adamant',
        initial "An adamantine heart lies in the skiff.",
        description "A cardioid of the kind favoured by Valentine's cards rather than surgeons.^^It reminds you oddly of one of the symbolic pieces in Monopoly - the ship, the hat and so on.",
        article "an",
        angel_hint "There must be more to this marvellous figure somewhere.",
  has   ;

Object Harbour_Mouth "Harbour Mouth"    
  with  before HarbourMouthBefore,
        description "As the skiff passes the jaws of the Royal Harbour, beneath the great Pharos light, you have a final view of the receding civilisation of Alexandria: ahead lies the vast, oil-calm Mediterranean and moonlight on the waters.",
        cant_go "The skiff is not under your control.",
        each_turn HarbourMouthEachTurn,
        section T_ALEXANDRIA,
  has   light cat_nofollow;

Object Drifting "Drifting"      
  with  name 'curious' 'fish' 'zephyr' 'sea',
        before HarbourMouthBefore,
        description "You drift in the wide, peaceful Lunar sea. Curious fish, their yellow-green eyes gleaming beneath the silver ripples, brush past your wake: the night zephyr is almost slack but still you drift. Minutes pass like hours in paradise.",
        cant_go "You feel only a drug-like calm.",
        each_turn DriftingEachTurn,
        section T_ALEXANDRIA,
  has   light cat_nofollow;

Object Crossroads "Crossroads"  
  with  name 'procession' 'tower',
        before CrossroadsBefore,
        ne_to Outside_the_Royal_Museum,
        se_to A_Tower,
        nw_to Causeway,
        sw_to Necropolis,
        description "The great crossroads at the heart of chlamys-shaped Alexandria, greatest city of the civilised world. The northwest-southeast road runs from the causeway to the Tower: the main road runs southwest from the Necropolis gate, northeast to the great public buildings of the city.",
        section T_ALEXANDRIA,
  has   light;

Object Necropolis "Necropolis"  
  with  s_to XIIth_Dynasty_Pyramid,
        ne_to Crossroads,
        d_to nothing,
        description "A spacious, sombre, moonlit and magnificent valley of tombs, some brand new, just outside the walls of Alexandria (to the northeast). Already it is ancient. Most of the little termite-hill style pyramids have been invaded time after time: indeed, one pyramid's entrance gapes open to the south.",
        cant_go "This is no place to wander after dark.",
        section T_ALEXANDRIA,
  has   light;

Object -> birds_of_prey "birds of prey" 
  with  name 'birds' 'of' 'prey',
        initial "Birds of prey circle high in the night sky, their talons glinting in the moonlight.",
        article "some",
  has   static;

Object unexciting_tombstone "unexciting tombstone"      
  with  name 'tomb' 'tombstone' 'stone' 'unexciting' 'face' 'socket' 'steps' 'mouth',
        before TombstoneBefore,
        n_to The_Height_of_Fashion,
        s_to "You stand near the tombstone to which the birds of prey were so inexplicably drawn.",
        w_to thedark,
        initial "You stand near the tombstone, which has become rather more interesting now that a flight of steps downward has appeared.",
        description "It bears just one word of epigram: ~GALITA~. Below that is a curious face, with an open empty socket of a mouth.",
  has   door static;

Object cloak_of_many_colours "cloak of many colours"    
  with  name 'of' 'many' 'colours' 'cloak' 'coat' 'chlamys',
        before CloakBefore,
        initial "A cloak of many colours lies folded on it.",
        description "A fine cloak, grey-lined, sapphire-encrusted, rippled across with rainbow fabrics from the trade routes of the world.",
        angel_hint "Are you sure it isn't inside out?",
  has   clothing;

Object grey_cloak "grey cloak"  
  with  name 'grey' 'cloak' 'coat' 'chlamys',
        before CloakBefore,
        description "A fine grey cloak, sapphire-encrusted, lined with rainbow fabrics from the trade routes of the world.",
        angel_hint "Are you sure it isn't inside out?",
  has   clothing;

Object XIIth_Dynasty_Pyramid "XIIth Dynasty Pyramid"    
  with  before PyramidBefore,
        n_to Necropolis,
        description "Ransacked, dimly-lit, cramped and empty, this rough-built and uneven burial mound is to the Great Pyramids of Giza (built just a century before) what the summerhouse in your garden is to Windsor Castle. There are only dull painted writings, an unpleasant odour and a passage out to the north.",
        section T_ALEXANDRIA,
  has   light cat_nofollow;

Object -> painted_writings "painted writings"   
  with  name 'painted' 'paintings' 'writing' 'writings',
        life LagachLife,
        description "One of the so-called Pyramid Texts making up the so-called ~Book of the Dead~. This dramatic passage seems to be devoted to wise men preparing their bodies to rise in the afterlife, anointing themselves with oil. An interesting motif of ten strokes, arranged^^   III IIIIII I^^catches the eye.",
        article "some",
  has   scenery talkable;

Object The_Height_of_Fashion "The Height of Fashion"    
  with  name 'table' 'panelling' 'doorway' 'door',
        before HeightFashionBefore,
        w_to HeightFashionWest,
        u_to Necropolis,
        description "A perfectly-cut room of rose-coloured granite, twelve feet across, painted in yellows and browns to simulate alabaster panelling. This is the latest in modern funerary apartments.^^There's a couch for visitors, a table, a flight of steps up and a doorway to the west, flanked by two stone sphinxes.",
        section T_ALEXANDRIA,
  has   scored cat_nofollow;

Object -> sphinxes "sphinxes"   
  with  name 'sphinx' 'sphinxes' 'stone' 'statue' 'statues',
        initial "The sphinxes seem to stare balefully at you.",
        description "No grave would be complete without one.",
        article "two",
  has   static;

Object -> wooden_couch "wooden couch"   
  with  name 'wood' 'wooden' 'couch' 'bed' 'weave' 'matting',
        description "A comfortable-looking wooden couch, covered with weave matting.",
  has   enterable scenery supporter;

Object stone_nose_of_a_sphinx "stone nose of a sphinx"  
  with  name 'stone' 'nose',
        before NoseBefore,
        initial "One of the sphinxes does have rather a prominent nose, it must be said.",
        description "Splendid.",
  has   static;

Object The_Spirit_World "The Spirit World"      
  with  name 'table' 'panelling' 'doorway' 'door',
        before SpiritWorldBefore,
        after SpiritWorldAfter,
        w_to SpiritWorldWest,
        description "A perfectly-cut room of rose-coloured granite, twelve feet across, painted in yellows and browns to simulate alabaster panelling, at the foot of a flight of steps which leads only to a sealed wall.",
        number 1,
        each_turn SpiritWorldEachTurn,
        section T_SPIRIT_WORLD,
  has   light scored;

Object -> spirit_sphinxes "sphinxes"    
  with  name 'sphinx' 'sphinxes' 'stone' 'statue' 'statues',
        initial "Stone sphinxes guard the west doorway, staring balefully at you.",
        description "No grave would be complete without one.",
  has   static;

Object -> spirit_wooden_couch "wooden couch"    
  with  name 'wood' 'wooden' 'couch' 'bed' 'weave' 'matting',
        initial "The weave matting on the couch is now in some disarray.",
        description "A comfortable-looking wooden couch, covered with weave matting.",
  has   enterable scenery supporter;

Object Napoleonic_officers "Napoleonic officers"        
  with  name 'napoleonic' 'officers' 'soldiers' 'officer' 'soldier' 'lanterns',
        life OfficerLife,
        initial "Two Napoleonic officers stand awestruck as light splashes from their lanterns over the riches of the tomb.",
        description "The officers wear the uniforms of the Emperor's 1798 occupation of the Nile Delta, and carry fine brass lanterns.",
        article "two",
  has   animate;

Object This_Is_The_Death "This Is The Death"    
  with  name 'painted' 'scenes' 'glass' 'ornaments',
        e_to The_Height_of_Fashion,
        w_to marble_wall,
        u_to The_Height_of_Fashion,
        d_to marble_wall,
        description "The passage, descending from the east down to the west, is cut from marble, lined with painted scenes from the fashionable comedies of Menander, decorated with Alexandrian coloured glass ornaments.^^The expression ~You can't take it with you~ doesn't seem to be popular hereabouts.",
        cant_go "Just an east-west passage.",
        section T_ALEXANDRIA,
  has   cat_nofollow;

Object -> model_of_ugly_animal "model of an animal so ugly you can't bear to look at it"        
  with  name 'model' 'animal' 'ugly' 'monkey',
        initial "Despite the tasteful decor, the most hideously ugly model animal you have ever seen sits on a little shelf here.",
        description "You simply can't bear to look. It might be a monkey... at least it has a tail... No. No, you have to look away.",
        short UglyAnimalShort,
        devil_hint "Exquisite. Simply charming.",
        angel_hint "Oh dear.",
  has   ;

Object -> marble_wall "marble wall"     
  with  name 'marble' 'wall',
        n_to Quite_an_Undertaking,
        s_to "Unfortunately, the passage slants down only into a solid marble wall.",
        w_to thedark,
        initial "The passage opens out onto the burial chamber below.",
  has   door static;

Object Quite_an_Undertaking "Quite an Undertaking"      
  with  before UndertakingBefore,
        e_to This_Is_The_Death,
        u_to This_Is_The_Death,
        description "A really luxurious burial chamber, far beneath the entrance court.^^A yard-wide square channel runs away fractionally east of north, in an apparently endless stooped passage.^^On the west wall are three curious sockets, above a painting of a priest of the half-mythical pharoah Sosostris in full sceptred, grey-clad regalia.",
        cant_go "The passage rises sharply to the east.",
        section T_ALEXANDRIA,
  has   scored cat_nofollow;

Object -> painting_of_the_priest "painting of the priest"       
  with  name 'painting' 'of' 'priest' 'sosostris',
        description "Drawn in the odd aspect favoured by the Egyptians, who believed in ideal angles rather than accurate drawing. The sceptre, only half the size of the large ones you once saw in the British Museum, looks oddly familiar.^^This close to the wall, you notice words written above the three sockets.",
  has   scenery;

Object -> mummy_case "mummy case"       
  with  name 'mummy' 'case' 'lid' 'sarcophagus' 'coffin',
        before MummyCaseBefore,
        initial "A beautiful gold and blue mummy case, or sarcophagus, rests massively here.",
        description "Golden, kingfisher-blue, smoothly curved, immensely heavy, beautiful. And final, and dead.",
  has   enterable static;

Object -> first_socket "first socket"   
  with  name 'first' 'socket' 'sockets' 'words',
        before SocketBefore,
        description SocketDesc,
        article "the",
        number 1,
  has   scenery;

Object -> second_socket "second socket" 
  with  name 'second' 'socket' 'sockets' 'words',
        before SocketBefore,
        description SocketDesc,
        article "the",
        number 1,
  has   scenery;

Object -> third_socket "third socket"   
  with  name 'third' 'socket' 'sockets' 'words',
        before SocketBefore,
        description SocketDesc,
        article "the",
        number 1,
  has   scenery;

Object Buried_Alive "Buried Alive"      
  with  before BuriedBefore,
        u_to Sarcophagus,
        description "You lie in the mummy case, your arms folded across each other, face grimaced, running out of air rapidly and with almost no room to maneouvre. The coffin lid is about ten times heavier than you, and its seal is very good.",
        number 5,
        each_turn BuriedEachTurn,
        section T_ALEXANDRIA,
  has   light cat_nofollow;

Object adamantine_skull "adamantine skull"      
  with  name 'adamantine' 'skull' 'adamant',
        initial "An adamantine skull lies here, as if casually dropped by a god's hand.",
        description "It reminds you oddly of one of the symbolic pieces in Monopoly - the car, the boot and so on.",
        article "an",
        angel_hint "There must be more to this marvellous figure somewhere.",
  has   ;

Object Stadium "Stadium"        
  with  sw_to Outside_the_Royal_Museum,
        description "The great Stadium of Alexandria, with capacity enough to hold the whole population of the city: and it looks full. Olympic openings in the age of television have nothing on these people. The procession surges continually in, around the track and then out again, and amid the bustle you cannot push through.",
        cant_go "It would be easier to breathe back southwest.",
        section T_ALEXANDRIA,
  has   light;

Object Outside_the_Theatre "Outside the Theatre"        
  with  n_to Outside_Royal_Palace,
        s_to Outside_the_Royal_Museum,
        w_to Warehouses_and_Port,
        description "Tragically, the Theatre is closed tonight, but roads lead past the great stepped bowl: north toward the Palace, south to the Museum and west to the harbour-front.",
        section T_ALEXANDRIA,
  has   light;

Object Outside_the_Royal_Museum "Outside the Royal Museum"      
  with  n_to Outside_the_Theatre,
        ne_to Stadium,
        se_to OutsideRoyalMuseumSE,
        sw_to Crossroads,
        description "The main southwest-northeast road forks off with a road due north to the Theatre. Despite the kaleidoscopic din you are impressed by the sober majesty of the Museum of the Ptolemies, whose fine portico entrance, decked with reliefs, is southeast.",
        daemon OutsideRoyalMuseumDaemon,
        section T_ALEXANDRIA,
  has   light;

Object -> portico "portico"     
  with  name 'portico' 'reliefs' 'relief' 'entrance',
        description "Reliefs of the cat-god bestride the square-cut entrance. The fanaticism of the cult of the Cat in Lower Egypt has such a stranglehold that the image is everywhere. You remember reading somewhere that passers-by in the street have been torn to death before, just on suspicion of mistreating a sacred cat.",
  has   scenery;

Object A_Tower "A Tower"        
  with  nw_to Crossroads,
        u_to defaced_door,
        description "This is not the famous Alexandrian tower (which is not due to be built by the Emperor Domitian for centuries), just an anonymous little monument on the same site. It is square-cut inside and there's only a small exit northwest.",
        section T_ALEXANDRIA,
  has   light;

Object -> defaced_door "defaced door"   
  with  name 'defaced' 'sosostris' 'door' 'writings' 'scripts',
        before DefacedDoorBefore,
        n_to Ancient_Consulting_Room,
        s_to "In one wall is a door heavily defaced with writings, the same word, over and over in a hundred tongues and scripts: the word ~Sosostris~, in fact.",
        w_to in_obj,
        initial "The heavily defaced door opens onto a staircase up.",
  has   door openable static;

Object Ancient_Consulting_Room "Consulting Room"        
  with  name 'sevenbranched' 'candelabra' 'sticks' 'candles',
        e_to "Peculiarly, the hanging curtain seems to be solid iron when you walk into it.",
        d_to A_Tower,
        description "The stairs end at a shabby room, with screened windows, lit by incense sticks and sevenbranched candelabra. A doorway with a hanging bead curtain leads east. In the centre of the room is a table, which is bare.",
        section T_ALEXANDRIA,
  has   light scored cat_nofollow;

Object -> ancient_table "table" 
  with  name 'bare' 'table',
        before TableBefore,
        description "Madame Sosostris stares at it fixedly as she meditates.",
  has   scenery supporter;

Object -> ancient_curtain "curtain"     
  with  name 'curtain' 'bead' 'hanging',
        description "Unmoving.",
  has   scenery;

Object -> Ancient_Madame_Sosostris "Madame Sosostris, famous clairvoyante"      
  with  name 'sosostris' 'madame' 'clairvoyant',
        life SosostrisLife2,
        initial "Madame Sosostris, famous clairvoyante, meditates here.",
        description "Known to be the wisest woman in Asia Minor.",
  has   animate proper;

Object quarterstaff "green oak quarterstaff"    
  with  name 'green' 'oak' 'staff' 'quarterstaff' 'quarter' 'beam' 'wooden',
        before QuarterstaffBefore,
        initial "You seem to have dislodged one of the wooden beams used by the tomb's builders: a useful length of greenish oak.",
        description "It needs to be left to mature, and yet there's something awfully familiar about it.",
        devil_hint "Ready to use.",
        angel_hint "Perhaps it could be put aside for later use.",
  has   ;

Object silver_keepsake "silver keepsake"        
  with  name 'silver' 'locket' 'keepsake',
        description "A silver locket on a thin chain, with a heart-shaped picture of a knight placing a rose in his lady's hair. Quite nauseously romantic.",
        angel_hint "For me? Oh, you shouldn't have... oh, you didn't. Well give it to someone else then.",
  has   clothing;

Object Warehouses_and_Port "Warehouses and Port"        
  with  before CausewayBefore,
        e_to Outside_the_Theatre,
        description "Down by the sea-front, in the old harbourlands, surrounded by warehouses. The Mediterranean laps darkly against the hard, splashing an occasional wave up the slope. The city, and the party, lie back east.",
        cant_go "There's nowhere to go but the city, east.",
        section T_ALEXANDRIA,
  has   light scored;

Object -> gambling_sailor "gambling sailor"     
  with  name 'sailor' 'gambling' 'gambler' 'grizzled',
        before SailorBefore,
        life SailorLife,
        initial "A grizzled sailor sits at a harbourside table.",
        each_turn GamblingSailorEachTurn,
  has   animate;

Object -> inscribed_die "inscribed die" 
  with  name 'inscribed' 'die' 'dice' 'cube',
        before InscribedDieBefore,
        initial "An inscribed six-sided die lies on the table in front of him.",
        description "The sides you can see are labelled with short words.",
        article "an",
        number 3,
  has   static;

Object The_Birdcage_of_the_Muses "The Birdcage of the Muses"    
  with  name 'little' 'door' 'books',
        s_to Oil_Room,
        e_to Reading_Corridor,
        se_to Geography_Room,
        nw_to Outside_the_Royal_Museum,
        nw_to Outside_the_Royal_Museum,
        description "The celebrated Library of Alexandria, finest in the entire world, possessed of hundreds of thousands of books: where the ruling Ptolemies keep fanatic, infighting scholars almost imprisoned as they turn out rival commentaries on the ancient poems - hence the nickname.^^There is a little door to the south; a dusty corridor southeast; a thoroughfare east, and a grand entrance northwest.",
        number 0,
        each_turn BirdcageEachTurn,
        section T_ALEXANDRIA,
  has   light scored;

Object -> pigeonhole "pigeonhole"       
  with  name 'pigeon' 'hole' 'pigeonhole',
        initial "There is a pigeonhole mounted on one wall.",
        description "A depository for scrolls.",
  has   container open static;

Object tube_with_an_alpha_on "tube with an alpha on"    
  with  name 'alpha' 'with' 'tube' 'cylinder',
        description "An open-ended hollow tube, marked with a Greek capital Alpha.",
        parse_name TubeParse,
        angel_hint "Surely this is addressed to someone?",
  has   container open;

Object -> scroll_bearing_an_epic_poem "scroll bearing an epic poem"     
  with  name 'long' 'epic' 'scroll' 'poem',
        description "All Greek to you, alas, and running on for 1000 lines or more.",
        parse_name ScrollParse,
        angel_hint "Oh my. Well, the plot, um, there are seven attackers, all with different shields, one for each of the seven city gates, and it's a civil war so of course the brothers are really in a duel and there are champions and the women are upset but it's all because of their brother who was really their father... Never mind. It's strictly for aficionados.",
  has   ;

Object tube_with_a_kappa_on "tube with a kappa on"      
  with  name 'kappa' 'with' 'tube' 'cylinder',
        description "An open-ended hollow tube, marked with a Greek capital Kappa.",
        parse_name TubeParse,
        angel_hint "Surely this is addressed to someone?",
  has   container open;

Object -> scroll_bearing_a_short_poem "scroll bearing a short poem"     
  with  name 'short' 'scroll' 'poem',
        description "All Greek to you, alas. Only a dozen lines or so, though.",
        parse_name ScrollParse,
        angel_hint "Oh my. ~I touch your... and the scent of you rises from... your beautiful...~  I'd better not read the rest. Strictly for aficionados.",
  has   ;

Object Oil_Room "Oil Room"      
  with  before OilRoomBefore,
        n_to The_Birdcage_of_the_Muses,
        description "This small, dark (by night) room is a repository for Library supplies: above all, for lamp oil, which is stored in broad shallow earthenware troughs. Lucky your torch is electric, when you think about it. Anyway, a passage leads back north.",
        section T_ALEXANDRIA,
  has   ;

Object -> oil_filled_troughs "oil-filled troughs"       
  with  name 'oil' 'troughs' 'shallow' 'lamp',
        before OilTroughsBefore,
        article "the",
  has   scenery;

Object Geography_Room "Geography Room"  
  with  nw_to The_Birdcage_of_the_Muses,
        description "The rather neglected hall for the accurate study of geography: as opposed to the lurid travellers' tales preferred by most writers in this slapdash century. Nobody is working here, and one can only file back northwest.",
        cant_go "In order to make sure the geographers don't get lost, the only exit is northwest.",
        section T_ALEXANDRIA,
  has   light;

Object -> spindle_from_the_globe "spindle from the globe"       
  with  name 'spindle' 'axis' 'globe' 'earth',
        before SpindleBefore,
        after SpindleAfter,
        initial "Protruding from a broken globe of the Earth (marked with very tentative and approximate maps) is the spindle, the only thing holding it together.",
        description "Perhaps the best work of cartography likely for the next two thousand years, though it seems unlikely to last the next two hours.",
        rod_assoc rod_of_ice,
        devil_hint "Don't go waving this about.",
  has   hidden_rod;

Object Reading_Corridor "Reading Corridor"      
  with  s_to Librarians_Office,
        w_to The_Birdcage_of_the_Muses,
        description "A spacious, densely colonnaded corridor, its walls lined with inset shelves on which are scrolls beyond count, ribboned, dusty, disintegrating, badly catalogued so that only an expert can find what he wants.",
        cant_go "You wander through the columns, but can find no exit save the thoroughfare west and a little office south.",
        section T_ALEXANDRIA,
  has   light;

Object -> dusty_scrolls "dusty scrolls" 
  with  name 'dusty' 'scrolls' 'scroll' 'books' 'book',
        description "Even a single book may run for dozens of individual scrolls, and the titles are hard to interpret: anyway, most of the books are rubbish. Dewey decimal numbers are not due to be invented for millenia.",
        article "endless",
  has   scenery;

Object -> Callimachus "Callimachus"     
  with  name 'callimachus' 'expert' 'librarian',
        life CallimachusLife,
        initial "The expert in question being Callimachus, who is brooding over a scroll, and hardly aware of your presence.",
        description "Callimachus is famous for something or other. You wonder what...",
  has   animate proper;

Object mystic_scroll "mystic scroll"    
  with  name 'mystic' 'scroll',
        initial "Apollonius seems to have dropped a mystic scroll in the scuffle.",
        description "It tells that even the greatest mortal must choose of the three High [and the next word is illegible], for once and all, but that for each there is a way. The usual mystic nonsense.",
        devil_hint "Don't you believe it!",
        angel_hint "We in the afterlife, um, have a policy of never commenting on leaked documents.",
  has   ;

Object purple_sash "purple sash"        
  with  name 'purple' 'sash',
        initial "And Callimachus' purple shoulder-sash has come off.",
        description "Worn over the shoulder.",
  has   clothing;

Object Librarians_Office "Librarian's Office"   
  with  name 'table' 'sand' 'wells' 'sandwells',
        n_to Reading_Corridor,
        description "A tiny office adjoining the colonnades north, this is home to Apollonius the head Librarian, whose writing implements, table and sand-wells are scattered untidily about.",
        section T_ALEXANDRIA,
  has   light;

Object -> Apollonius "Apollonius"       
  with  name 'apollonius' 'head' 'expert' 'librarian',
        life CallimachusLife,
        initial "Apollonius paces about self-importantly in a purple sash, perusing documents on his desk.",
        description "His aim in life is chiefly to annoy Callimachus, his junior librarian and the modern poet he despises most.",
  has   animate proper;

Object Outside_Royal_Palace "Outside the Royal Palace of Alexander"     
  with  n_to PalaceNorth,
        s_to Outside_the_Theatre,
        description "A hugely impressive edifice, and everything you might expect from the man who conquered the whole of Asia Minor at an age when most people are starting to think about getting a mortgage.^^There are of course guards, but they're trying to catch the procession, so if you're careful not to draw attention to yourself you could probably sneak in to the north.",
        section T_ALEXANDRIA,
  has   light;

Object Lost_inside_the_Palace "Lost inside the Palace"  
  with  before InsidePalaceBefore,
        after InsidePalaceAfter,
        n_to Lost_inside_the_Palace,
        s_to Lost_inside_the_Palace,
        e_to Lost_inside_the_Palace,
        w_to Lost_inside_the_Palace,
        ne_to Lost_inside_the_Palace,
        se_to Lost_inside_the_Palace,
        nw_to Lost_inside_the_Palace,
        sw_to Lost_inside_the_Palace,
        description "Scholars are divided on the origin of the ~maze~ legend: some hold that to a primitive culture, the Knossos palace was so complex as to seem a maze, and the king so fearsome as to seem a Minotaur.^^Others say the early palaces really were labyrinths to protect sacred altars.^^And you think it's because this is a maze of twisty little passages, all alike.",
        section T_ALEXANDRIA,
  has   light scored cat_nofollow;

Object -> slave "slave" 
  with  name 'slave' 'deaf' 'mute',
        life SlaveLife,
        initial "A slave stands impassively by one wall.",
        description "Such a slave, a highly trained professional, stands at every intersection of passages in the palace. They are deaf mutes, to prevent them overhearing State secrets.",
  has   animate;

Object Palace_Balustrade "Palace Balustrade"    
  with  before BalustradeBefore,
        description "The magnificent balcony overlooking the Royal harbour of Alexandria. In two hundred years' time, Julius Caesar will be besieged here, and will hold the palace with a tiny force of men against an entire army: and will lose his heart to Cleopatra...^^For the mean time, this is a broad stone balustraded balcony. The coin-bright moon, low in the sky, reflects off the black waters far below.",
        cant_go "There seems to be absolutely no way off the balcony, as the stone doors to the heart of the palace are sealed shut.",
        section T_ALEXANDRIA,
  has   light scored cat_nofollow;

Object -> astronomical_mounting "astronomical mounting" 
  with  name 'mounting' 'socket' 'astronomical' 'tripod',
        before MountingBefore,
        initial "An impressive astronomical mounting stands on a tripod here. But there is no telescope.",
        article "an",
  has   static;

Object Beside_the_Drive "Beside the Drive"      
  with  name 'wistaria' 'car' 'gravel',
        before DriveBefore,
        n_to "The old carved southern wall of the gardens blocks your way around the edge of the Hall.",
        w_to "The Hall is in the way.",
        ne_to Public_Footpath,
        u_to "The fire escape is perilous and leads nowhere. Doubtless it would be useless in any real fire.",
        description "At the foot of the Hall is the drive, a long gravel lane approaching the house through trees.^^Since your family are intermittently loading suitcases into the car, which only makes you feel guilty, the only safe way to creep away is along the public footpath, to northeast.",
        cant_go "Better not - they might catch you.",
        section T_NE_OF_HOME,
  has   light;

Object -> fire_escape "fire escape"     
  with  name 'fire' 'escape' 'white' 'rope' 'rickety',
        before FireEscapeBefore,
        initial FireEscpeInitial,
        description "For the first couple of storeys, an old iron zig-zag, and after that a ladder that might or might not be well-anchored. The gardeners have done a good job of concealing it behind wistaria which (in any case) looks the stronger of the two.",
  has   static;

Object Public_Footpath "Public Footpath"        
  with  name 'stile' 'dragonflies' 'house' 'hall' 'battlements',
        n_to Stone_Cross,
        sw_to Beside_the_Drive,
        d_to Hollow,
        description "By a stile in the public footpath across the fields to the village, which lies to the north. Sitting on the stile you have a splendid view of the house and its battlements. The air is ablaze with pollen and dragonflies.^^It might be possible to scramble down to a hollow, but it surely wouldn't be pleasant.",
        cant_go "The footpath turns from southwest to north.",
        section T_NE_OF_HOME,
  has   light;

Object Hollow "Hollow"  
  with  nw_to Mosaic,
        u_to Public_Footpath,
        description "A low, muddy, stinking hollow, trodden with reeds, dried out in the long summer and no more than moist now. You could climb back up, or go northwest, though that would mean crawling through a thorny hedge.",
        section T_NE_OF_HOME,
  has   light;

Object -> nest "nest"   
  with  name 'nest',
        initial "There's a bird's nest at the bottom of the hollow.",
  has   static;

Object -> bunch_of_nuts "bunch of nuts" 
  with  name 'bunch' 'of' 'nuts',
        before NutsBefore,
        initial "Entwined in the nest is a bunch of nuts.",
        description "A bunch of nuts, left over from last autumn.",
        devil_hint "Nuts to you too.",
        angel_hint "Do you know, I love nuts, but I have to be so careful what I eat now... Still, the little ones will have them.",
  has   edible scored;

Object -> corn_crake "corn crake"       
  with  name 'corn' 'crake' 'corncrake' 'deaf' 'rail' 'bird',
        life CornCrakeLife,
        initial "And sat upon it is, as you might expect, a bird: a corn crake, in fact.",
        description "A rail with a distinctive cry. And a possessive look.",
  has   animate;

Object Stone_Cross "Stone Cross"        
  with  name 'pub' 'goat' 'compasses',
        n_to parish_church_obj,
        s_to Public_Footpath,
        description "Beside the long triangle of the green, under the stone cross of the First World War memorial. The public footpath runs south to a stile. The village is tiny: the parish church, the ~Goat and Compasses~ pub (which, owing to quaint English licensing laws, is closed) and a few houses and desultory tea-shops for tourists visiting Meldrew Hall.",
        cant_go "You wander around the peaceful green for a while, but there's nothing to do.",
        section T_NE_OF_HOME,
  has   light;

Object -> Old_Evans "Old Evans" 
  with  name 'racing' 'enthusiast' 'old' 'evans',
        life OldEvansLife,
        initial "Old Evans, the village racing enthusiast, sits on the steps of the memorial, combing the back pages of his ~Racing Times~ newspaper.",
        description "In the band of his hat is his lucky mascot: a little picture of the crescent moon.",
  has   animate proper transparent;

Object -> -> Crescent_Moon "Crescent Moon"      
  with  name 'crescent' 'moon' 'mascot' 'lucky' 'card' 'tarot',
        before CrescentMoonBefore TarotBefore,
        n_to Parish_Church,
        sw_to "Tarot cards",
        description "Some kind of crescent moon, an old Druidical symbol.",
        article "the",
        short TarotShort,
        parse_name TarotParseName,
        devil_hint "It leads nowhere.",
  has   card;

Object -> -> Racing_Times "Racing Times"        
  with  name 'paper' 'newspaper' 'racing' 'times',
        before RacingTimesBefore,
        description "The front page story (~Lord Lucan's new acquisition Shergar comes out of retirement to win the Grand National~) is so boringly unsensational that you quickly lose interest. But Evans is eternally fascinated with minute details of the form of the horses, tomorrow's race meetings, current odds quoted by the bookmakers, and so on.",
  has   ;

Object -> -> hat_band "hat band"        
  with  name 'hat' 'band',
        before HatBandBefore,
        description "Racing aficionados consider it lucky to wear mascots in the bands of their hats.",
  has   ;

Object -> war_memorial "war memorial"   
  with  name 'war' 'memorial' 'cross' 'green' 'stone' 'fallen',
        description "The stone cross, for the fallen of the Great War of 1914-18, contains more names than there are houses in the village.^^Your eye is caught by Second Lieutenant Gerard Meldrew of the 19th/21st Rifles, and you shiver, although the afternoon is warm.",
  has   scenery;

Object -> parish_church_obj "parish church"     
  with  name 'parish' 'church' 'door',
        before ChurchBefore,
        n_to Parish_Church,
        w_to w_obj,
        description "The fourteenth-century Church of St Michael and All Angels doesn't seem to be locked up, exactly - just barred from the other side.",
  has   door scenery;

Object -> Goat_and_Compasses "Goat and Compasses"       
  with  name 'pub' 'goat' 'compasses' 'public' 'house' 'bar',
        before GoatsCompassesBefore,
        w_to w_obj,
        description "In the days of Oliver Cromwell, it was called ~God Encompasseth~, but the locals have worn down the name over the centuries to ~Goat and Compasses~. It is of course closed, owing to the licensing laws. You congratulate yourself on living in such a modern, forward-looking country.",
  has   door locked proper scenery;

Object pet_monkey "pet monkey"  
  with  name 'pet' 'monkey',
        before PetMonkeyBefore,
        initial "The monkey sits on Evans' shoulder, cheeping with excitement. Evans has found a pet, and is so gruffly delighted that he has forgotten all about the mascot you stole. Now if he could only predict the 3.40 at Borchester Mills...",
  has   animate;

Object Parish_Church "Parish Church"    
  with  name 'flowers' 'pews' 'woven' 'mattings' 'lectern' 'altar',
        s_to ParishChurchSouth,
        e_to East_Side_Chapel,
        w_to West_Side_Chapel,
        u_to Bell_Tower,
        d_to ParishChurchDown,
        description "Before this was the Norman church of St Michael and All Angels, it was a Saxon one: this is an ancient site. A great space of stone, filled with dark wooden pews and woven mattings. Flowers left over from Sunday grace the lectern and altar. A narrow stair leads upward, and the village green lies to the south.^^Old side chapels lie east and west.",
        section T_NE_OF_HOME,
  has   light;

Object -> Moonstone "Moonstone" 
  with  name 'moonstone' 'moon' 'stone' 'door' 'flagstone' 'iron' 'rings' 'old',
        before MoonstoneBefore,
        s_to "Set into the floor, and slightly raised, is the Moonstone, an ancient broad flagstone the size of a door, inscribed with a crescent moon.",
        w_to thedark,
        initial "A passage slants down through a solid crystal doorway in the Moonstone.",
        description "The Moonstone is very old, probably pre-dating the rest of the church by some centuries. Legends about it abound: some say the spirits of the departed pass beneath. Old iron rings are set in it, but nobody has ever succeeded in lifting the colossal weight.",
        article "the",
  has   door static;

Object West_Side_Chapel "West Side Chapel"      
  with  name 'stained' 'glass' 'windows' 'resurrect',
        before WestSideChapelBefore,
        after WestSideChapelAfter,
        e_to Parish_Church,
        description "An alcove in the ancient west side of the church, beneath stained glass windows of the Resurrection.",
        cant_go "The church lies east.",
        each_turn WestSideChapelEachTurn,
        section T_NE_OF_HOME,
  has   light;

Object -> adamantine_statue "adamantine statue" 
  with  name 'adamantine' 'statue' 'adamant' 'knight',
        description "The statue is half-skeleton, and you can see clear through the bones.",
        article "an",
  has   concealed static;

Object adamantine_knight "adamantine knight"    
  with  name 'adamantine' 'statue' 'adamant' 'knight',
        life AdamantineKnightLife,
        initial "The adamantine knight stands staunchly here.",
        description AdamantineKnightDesc,
        article "the",
  has   animate;

Object East_Side_Chapel "East Side Chapel"      
  with  name 'stained' 'glass' 'windows' 'nativity',
        w_to Parish_Church,
        description "A small clear space to the side of the church, in a bay ringed with stained glass windows of the Nativity.",
        cant_go "The church lies west.",
        section T_NE_OF_HOME,
  has   light;

Object -> statue_of_Diana "statue of Diana"     
  with  name 'marble' 'statue' 'of' 'diana',
        before DianaBefore,
        initial "A tall marble statue of Diana stands here: a find from the nearby Roman remains.",
        description "There is a sly look in her eye as she smiles aslant.",
  has   static;

Object Bell_Tower "Bell Tower"  
  with  name 'clerestory' 'plaque',
        u_to "The ropes are too smooth and noisy to climb.",
        d_to Parish_Church,
        description "The bell-ringing chamber, half-way up the church tower. Thick braided ropes hang down, tailing into sashes. A plaque on one wall announces that in 1901, ten men (Roger Meldrew among them) rang a Kent Triple Bob.",
        section T_NE_OF_HOME,
  has   light;

Object -> bell_ropes "bell ropes"       
  with  name 'bell' 'bells' 'rope' 'ropes' 'braided' 'sash' 'sashes',
        before BellRopesBefore,
        article "eight",
  has   scenery;

Object Out_on_the_Spire "Out on the Spire"      
  with  name 'village' 'clerestory' 'hills' 'farmlands' 'weather' 'vane' 'weathervane',
        d_to OutOfSpireDown,
        description "There is a beautiful view over the green parceled farmlands and hills surrounding the village, and you feel a certain pride to see Meldrew Hall sitting amongst it. It's also windy and dangerous up here on the grey lead spire of the parish church, beside the old clock: fortunately an opening leads down into the clerestory.",
        section T_NE_OF_HOME,
  has   light;

Object -> adamantine_hand "adamantine hand"     
  with  name 'adamantine' 'hand' 'adamant',
        initial "Mounted loosely on the end of the weathervane, an adamantine hand points the way the wind blows.",
        description "Like a solid glove.^^It reminds you oddly of one of the symbolic pieces in Monopoly - the ship, the car and so on.",
        article "an",
        angel_hint "There must be more to this marvellous figure somewhere.",
  has   ;

Object -> old_village_clock "old village clock" 
  with  name 'clock' 'old' 'plaque' 'commemorative',
        description "The clock stands at ten past three, as it has done for some years. According to a small commemorative plaque, it was the work of William Snelson the Clockmaker (1776-1848).",
        article "William Snelson's",
  has   scenery;

Object Hellish_Place "Hellish Place"    
  with  name 'desk',
        after HellishPlaceAfter,
        n_to Cellar_West,
        u_to Cellar_West,
        description "Hell, you always imagined, would contain fiery, sulphurous pits and a great many gentlemen with forked tails. You were right about the last part. A demon is sitting behind a flame-proofed desk at the bottom of the stairs. There are some disconcerting screams from further away, but nothing to worry about. Not in this life, anyway.",
        cant_go HellishPlaceCantGo,
        each_turn HellishPlaceEachTurn,
        section T_AFTERLIFE,
  has   light;

Object -> demon "demon" 
  with  name 'devil' 'demon' 'demonic' 'gentleman',
        life DemonLife,
        description "If you were to cast a film of your adventures so far, you would hire Donald Sutherland to play this gentleman.",
        number 4,
  has   animate scenery;

Object Heavenly_Place "Heavenly Place"  
  with  name 'furniture' 'cloud',
        before HeavenBefore,
        after HeavenAfter,
        s_to Up_the_Beanstalk,
        description "Heaven, you always imagined, would be a world of marble pillars, fluffy clouds, harps and angelic ladies with serene expressions. You were right about the last part. An angel is sitting here behind some new office furniture, next to a blue Tourist Information sign. A bridge of cloud extends south across the sky to the beanstalk. There is some choral singing going on somewhere, but not loud enough for you to hear properly. Not in this life, anyway.",
        cant_go HeavenCantGo,
        each_turn HeavenEachTurn,
        section T_AFTERLIFE,
  has   light;

Object -> angel "angel" 
  with  name 'angel' 'lady' 'angelic',
        life AngelLife,
        description "If you were to cast a film of your adventures so far, you would hire Dame Judi Dench to play this lady.",
        number 4,
  has   animate scenery;

Object carbolic_soap "carbolic soap"    
  with  name 'soap' 'carbolic',
        before SoapBefore,
        description "~For foulmouths everywhere~.",
        article "a cake of",
        devil_hint "That's the spirit, keep it up!",
        angel_hint "Really!  How disgraceful!",
  has   concealed;


Constant STUCK_PE = 1;
Constant UPTO_PE = 2;
Constant NUMBER_PE = 3;
Constant CANTSEE_PE = 4;
Constant TOOLIT_PE = 5;
Constant NOTHELD_PE = 6;
Constant MULTI_PE = 7;
Constant MMULTI_PE = 8;
Constant VAGUE_PE = 9;
Constant EXCEPT_PE = 10;
Constant ANIMA_PE = 11;
Constant VERB_PE = 12;
Constant SCENERY_PE = 13;
Constant ITGONE_PE = 14;
Constant JUNKAFTER_PE = 15;
Constant TOOFEW_PE = 16;
Constant NOTHING_PE = 17;
Constant ASKSCOPE_PE = 18;

Constant PARSING_REASON = 0;
Constant TALKING_REASON = 1;
Constant EACH_TURN_REASON = 2;
Constant REACT_BEFORE_REASON = 3;
Constant REACT_AFTER_REASON = 4;
Constant LOOPOVERSCOPE_REASON = 5;
Constant TESTSCOPE_REASON = 6;

Constant NEWLINE_BIT = 1;
Constant INDENT_BIT = 2;
Constant FULLINV_BIT = 4;
Constant ENGLISH_BIT = 8;
Constant RECURSE_BIT = 16;
Constant ALWAYS_BIT = 32;
Constant TERSE_BIT = 64;
Constant PARTINV_BIT = 128;
Constant DEFART_BIT = 256;
Constant WORKFLAG_BIT = 512;
Constant ISARE_BIT = 1024;
Constant CONCEAL_BIT = 2048;
Constant NOARTICLE_BIT = 4096;
Constant ID_BIT = 8192;

Constant T_MODERN = 1;
Constant T_UNREAL = 2;
Constant T_HAMBURG = 3;
Constant T_TAROT = 4;
Constant T_GARDEN = 5;
Constant T_GARDEN_PAST = 6;
Constant T_ANCIENT_BRITAIN = 7;
Constant T_DREAMING = 8;
Constant T_CATACOMBS = 9;
Constant T_EGYPT_DREAMING = 10;
Constant T_ALEXANDRIA = 11;
Constant T_NE_OF_HOME = 12;
Constant T_SPIRIT_WORLD = 13;
Constant T_AFTERLIFE = 14;

Constant DIED = 1;
Constant WON = 2;
Constant FAILED = 3;
Constant DESTROYED_UNIVERSE = 4;
Constant AUSTRALIA = 5;
Constant PARADOX = 6;
Constant MYTH = 7;
Constant PRISON = 8;
Constant CHECKMATED = 9;
Constant SPOOKED = 10;

Constant SCORE_HAMBURG = 0;
Constant SCORE_TORCH = 1;
Constant SCORE_JOSHUA = 2;
Constant SCORE_SECRETDOOR = 3;
Constant SCORE_DEMIJOHN = 4;
Constant SCORE_WAITER = 5;
Constant SCORE_WAND = 6;
Constant SCORE_AIMWAND = 7;
Constant SCORE_WIRELESS = 8;
Constant SCORE_DAISY = 9;
Constant SCORE_CHOCOLATE = 10;
Constant SCORE_ANDROMEDA = 11;
Constant SCORE_BATTERY = 12;
Constant SCORE_PLUMBING = 13;
Constant SCORE_SMELL = 14;
Constant SCORE_REFLECTING = 15;
Constant SCORE_HENRIPOST = 16;
Constant SCORE_ORB = 17;
Constant SCORE_MAP = 18;
Constant SCORE_ARC = 19;
Constant SCORE_WELL = 20;
Constant SCORE_MASCOT = 21;
Constant SCORE_BISCUIT = 22;
Constant SCORE_SMOKE = 23;
Constant SCORE_SHIP = 24;
Constant SCORE_FLAG = 25;
Constant SCORE_SLEEP = 26;
Constant SCORE_SECRET_PASS = 27;
Constant SCORE_ROD_IDENT = 28;
Constant SCORE_WATCH = 29;
Constant SCORE_HYPNOSIS = 30;
Constant SCORE_SECURITY = 31;
Constant SCORE_TEMPLE = 32;
Constant SCORE_HOMER = 33;
Constant SCORE_ORACLE = 34;
Constant SCORE_STRONGBOX = 35;
Constant SCORE_AUSTIN = 36;
Constant SCORE_WASH = 37;
Constant SCORE_LIBRARY = 38;
Constant SCORE_SPHINX = 39;
Constant SCORE_QUARTERSTAFF = 40;
Constant SCORE_AFTERLIFE = 41;
Constant SCORE_KNIGHT = 42;
Constant SCORE_KNIGHT_ENCOURAGE = 43;
Constant SCORE_HIGHROD = 44;


Global location = compass;
Global sline1;
Global sline2;
Global the_time = 65535;
Global time_rate = 1;
Global time_step;
Global score;
Global turns = 1;
Global player;
Global lightflag = true;
Global real_location = thedark;
Global print_player_flag;
Global deadflag;
Global transcript_mode;
Global last_score;
Global notify_mode = true;
Global places_score;
Global things_score;
Global lookmode = 1;
Global lastdesc;
Global top_object;
Global toomany_flag;
Global actor;
Global actor_location;
Global verb;
Global inp1;
Global inp2;
Global special_number1;
Global special_number2;
Global self;
Global noun;
Global second;
Global special_word;
Global special_number;
Global parsed_number;
Global multiflag;
Global notheld_mode;
Global onotheld_mode;
Global meta;
Global orders;
Global action;
Global consult_from;
Global consult_words;
Global undo_flag;
Global parser_trace;
Global global47;
Global lm_n;
Global lm_o;
Global wn;
Global num_words;
Global verb_word;
Global verb_wordnum;
Global global54;
Global multi_wanted;
Global multihad;
Global multi_context;
Global pcount;
Global pcount2;
Global parameters;
Global params_wanted;
Global nsns;
Global interfrom;
Global inferword;
Global oops_from;
Global saved_oops;
Global number_matched;
Global number_of_classes;
Global match_length;
Global match_from;
Global parser_action;
Global parser_one;
Global parser_two;
Global vague_word;
Global vague_obj;
Global itobj;
Global himobj;
Global herobj;
Global lookahead;
Global indef_mode;
Global indef_type;
Global indef_wanted;
Global indef_guess_p;
Global allow_plurals;
Global notholding;
Global global86;
Global global87;
Global held_back_mode;
Global hb_wn;
Global pcount2;
Global etype;
Global last_command_from;
Global last_command_to;
Global token_was;
Global advance_warning;
Global placed_in_flag;
Global global97;
Global action_to_be;
Global dont_infer;
Global scope_reason;
Global scope_token;
Global scope_error;
Global scope_stage;
Global ats_flag;
Global ats_hls;
Global take_all_rule = 1;
Global usual_grammar_after;
Global undone_flag;
Global pretty_mode = true;
Global menu_nesting;
Global submenu_number = 8;
Global submenu_header = "Nameless item";
Global menu_item;
Global active_timers;
Global rod_identity = 1;
Global c_style;
Global lt_value;
Global listing_together;
Global listing_size;
Global wlf_indent;
Global inventory_style;
Global keep_silent;
Global receive_action;
Global game_section = T_MODERN;
Global good_try_bonus;
Global debug_deterministic_transportation;
Global KnowLanguages;
Global rewdraw_statusline = true;
Global before_short_desc;
Global short_loc_var;
Global save_game_sec;
Global save_score;
Global global133;
Global rod_score;
Global StrongboxX;
Global StrongboxY;
Global LocationSave;
Global ContainerSave;
Global projector_reversed;
Global tablet_eaten;
Global daisy_given;
Global Mouse_x = 8;
Global Mouse_y = 3;
Global MouseUnderstandsMask;
Global card_ptr;
Global hollow_man_cnt;
Global poseiden_warning;
Global priest_cnt;
Global MazeX = 4;
Global MazeY = 6;
Global WeedkillerX = 100;
Global WeedkillerY = 100;
Global DigX;
Global DigY;
Global OldDigX;
Global OldDigY;
Global CouncilCnt;
Global DreamCnt;
Global OzoneSmelled;
Global slide_moves;
Global PlanckWarning;
Global SpiritCnt;
Global MummyWarning;
Global PalaceCnt;
Global palace_move1;
Global palace_move2;
Global palace_move3;
Global HighRodWarn;
Global HighRodBalance;
Global LeftHand;
Global SkullFit;
Global quote_selection = 65535;
Global one_time_try_bonus;
Global croquet_var;
Global yard_dir;
Global dig_cnt;
Global current_game_sec;
Global global182;
Global global183;
Global global184;
Global global185;
Global global186;
Global global187;
Global global188;
Global global189;
Global global190;
Global global191;
Global global192;
Global global193;
Global global194;
Global global195;
Global global196;
Global global197;
Global global198;
Global global199;
Global global200;
Global global201;
Global global202;
Global global203;
Global global204;
Global global205;
Global global206;
Global global207;
Global global208;
Global global209;
Global global210;
Global global211;
Global global212;
Global global213;
Global global214;
Global global215;
Global global216;
Global global217;
Global global218;
Global global219;
Global global220;
Global global221;
Global global222;
Global global223;
Global global224;
Global global225;
Global global226;
Global global227;
Global global228;
Global global229;
Global global230;
Global global231;
Global global232;
Global global233;
Global global234;
Global global235;
Global global236;
Global global237;
Global global238;
Global generic_globvar;

Array task_scores ->    
    3
    7
    7
    10
    3
    3
    5
    5
    2
    2
    3
    50
    3
    4
    6
    6
    15
    10
    1
    8
    4
    0
    0
    3
    3
    6
    5
    10
    7
    7
    3
    3
    3
    6
    3
    8
    3
    3
    7
    3
    3
    15
    15
    3
    1
;
Array standard_interpreter --> 1280[?]; 
Array mouse_maze ->     
    49
    49
    49
    49
    49
    49
    49
    49
    49
    49
    49
    49
    48
    48
    49
    48
    48
    49
    49
    49
    49
    49
    48
    48
    49
    48
    49
    49
    49
    49
    49
    49
    48
    48
    48
    48
    49
    49
    49
    49
    48
    48
    49
    49
    49
    49
    49
    49
    49
    49
    48
    48
    49
    49
    49
    49
    49
    49
    49
    49
    49
    49
    49
;
Array card_deck --> 1;  
Array garden_array ->   
    49
    49
    49
    49
    49
    49
    49
    49
    49
    48
    48
    48
    48
    48
    49
    48
    48
    49
    49
    49
    48
    49
    48
    48
    49
    48
    49
    49
    48
    48
    48
    49
    48
    48
    48
    49
    49
    49
    48
    49
    49
    49
    49
    49
    49
    49
    48
    48
    48
    48
    48
    49
    48
    49
    49
    49
    49
    49
    48
    49
    49
    49
    49
;
Array quote_line --> 10;        
Array type_of_tune table        
    "a synthesized"
    "a light orchestra"
    "a choral"
    "a snare drum and strings"
    "a country-and-western"
    "a one-finger piano"
    "a Welsh coal-miners' Eisteddfod choir"
    "a Hammond organ"
    "an easy-listening"
    "a ~lite-n-mellow~"
    "a jazz trio"
    "a Big Band"
;
Array tune_version table        
    " version of "
    " rendition of "
    " travesty of "
    " arrangement of "
    " transcription of "
;
Array horrible_tunes table      
    "Queen's ~I Want To Break Free~."
    "Bach's ~Air on a G-string~."
    "Mozart's ~Musical Joke~."
    "Stockhausen's ~Piano Pieces I-IX~."
    "Beethoven's ~Moonlight Sonata~."
    "Summer from Vivaldi's ~Four Seasons~."
    "the especially slow movement of Gorecki's ~Symphony no. 3~."
    "Spandau Ballet's ~Gold~."
    "Duran Duran's ~Is There Something I Should Know?~."
    "Derek and the Dominos' ~Layla~."
    "Don McLean's ~American Pie~."
    "Chopin's ~Nocturne no. 1~."
    "Oxygene by Jean-Michel Jarre."
    "the Beatles' ~Yellow Submarine~."
    "the Beatles' ~She Loves You~."
    "the Beatles' ~Hey Jude~."
    "the Beatles' ~Lucy in the Sky with Diamonds~."
    "Queen's ~Bohemian Rhapsody~."
    "the Beatles' ~Magical Mystery Tour~."
    "the Beatles' ~I Am The Walrus~."
    "Bill Haley's ~Rock Around the Clock~."
    "the old Elvis Presley number ~Jailhouse Rock~."
    "the old Elvis Presley number ~Blue Suede Shoes~."
    "ELO's ~Mr Blue Sky~."
    "Bach's Toccata in D minor for organ."
    "ABC's ~The Look of Love~."
    "the Beach Boys' ~California Girls~."
    "the Stranglers' ~Golden Brown~."
    "Genesis' ~That's All~."
    "Grieg's piano concerto."
    "Bruce Springsteen's ~Born in the USA~."
    "Beethoven's Symphony no. 5."
    "Beethoven's ~Emperor~ piano concerto."
    "Mozart's ~Elvira Madigan~ concerto."
    "Bach's Brandenburg Concerto no. 5."
    "Deep Purple's ~Smoke On The Water~."
    "Faure's Requiem."
    "Tchaikovsky's ~1812 Overture~."
    "the Swan from Saint-Saens' ~Carnival of the Animals~."
    "the ~O Fortuna~ from Carl Orff's ~Carmina Burana~."
    "Led Zeppelin's ~Stairway to Heaven~."
    "the Bugs Bunny theme tune."
    "Strauss' ~Blue Danube~ waltz."
    "the Star Wars theme tune."
    "the Star Trek theme tune."
    "the Dallas theme tune."
    "Wagner's ~Ride of the Valkyries~ overture."
    "Dire Straits' ~Money For Nothing~."
    "Dire Straits' ~Brothers In Arms~."
    "Dire Straits' ~Tunnel Of Love~."
    "Wham's ~Wake Me Up Before You Go-Go~."
    "something abysmal by Leo Sayer."
    "Lionel Richie's ~Hello~."
    "Hot Chocolate's ~Happy Birthday~."
    "Abba's ~Mama Mia~."
    "Abba's ~Knowing Me, Knowing You~."
    "Barry Manilow's ~I Write The Songs~."
    "Ian Dury and the Blockheads' ~Hit Me With Your Rhythm Stick~."
    "Ravel's ~Bolero~."
    "~Nessun Dorma~, as sung simultaneously by Pavarotti, Carreras and Dolly Parton."
    "Michael Jackson's ~Thriller~."
    "Michael Jackson's ~Billy Jean~."
    "Michael Jackson's ~Beat It~."
    "Kylie Minogue's ~I Should Be So Lucky~."
    "the Eurovision Song Contest's finest five minutes, ~Diggy-Loo Diggy-Lay (Life Is Going My Way)~."
    "Dexy's Midnight Runners' ~Come on Eileen~."
    "Steppenwolf's ~Born to be Wild~."
    "Toto's ~The Eye of the Tiger~."
    "Cyndi Lauper's ~Girls Just Wanna Have Fun~."
    "the traditional air ~Greensleeves~."
    "Hoagy Carmichael's ~Skylark~."
    "Noel Coward's ~Don't Put Your Daughter On The Stage~."
    "Chas and Dave's ~Rabbit Song~."
    "Paul McCartney's ~Mull of Kintyre~."
    "John Lennon's ~Imagine~."
    "that grisly carol, ~We Wish You A Merry Christmas~."
    "that hoary old favourite, ~Oh Come All Ye Faithful~."
    "~My Way~, crooned over by Frank Sinatra."
;
Array the_timers --> 1; 
Array array_23957 --> 1;        
Array buffer -> 
    120
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
;
Array buffer2 ->        
    120
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
;
Array parse string ! Unknown length -- cannot print;    
Array inputobjs --> 1;  
Array multiple_object --> 64;   
Array parse2 -> ! Unknown length -- cannot print;       
Array array_24553 --> 16384[?]; 
Array pattern --> 8;    
Array array_24634 --> 1;        
Array array_24650 --> 1;        
Array match_list --> 1; 
Array match_classes -> 128;     
Array kept_results --> 16;      
Array bomb_wires -> 4;  
Array henri_post_array ->       
    8
    2
    16
    14
    5
    12
    1
    3
    15
    18
    11
    19
    0
    9
    20
;
Array henry_post_initial_layout ->      
    8
    2
    16
    5
    12
    15
    14
    1
    19
    18
    3
    20
    9
    11
    0
;
Array demon_topics --> 2 'premonition' 'dream' "~In the premonition, it is vital to get hold of the mascot for later use.~" 2 'torch' 'battery' "~It's no use poking about on the attic floor for fresh torch batteries, because there aren't any.~" 3 'aunt' 'jemima' 'gloves' "~Your Aunt Jemima is not the kind of woman to be distracted by music or frivolous presents, mark my words.~" 3 'romance' 'novel' 'marie' "~Novels are, of course, invariably written by people using their real names, not disguised in any way.~" 3 'daisy' 'daisychain' 'daisies' "~The thing about daisies is, they are the same all year round, not changing with the calendar.~" 'medicine' "~Modern medicine bottles can even withstand falls from a great height. I should try heat if I were you.~" 'demijohn' "~You can easily get a grip on the demijohn with your bare hands.~" 'bottle' "~The answer's the same, whichever bottle you meant. That counts as your hint, I'm afraid. Not very fair, but then I am a demon.~" 'heaven' "The demon acknowledges the question, but cannot bring himself to speak of Heaven." 'hell' "~Hell?  Oh this isn't your eternal damnation, it's mine, having to answer all these wretched questions. No, Hell itself is a marvellous place, and it has an excellent health club too. Look forward to seeing you there.~" 2 'card' 'postcard' "~Don't worry, there's nothing written there. No need to look at the problem in a fresh light.~" 3 'ghost' 'sir' 'joshua' "~History never repeats itself, so it's pointless looking him up in the book.~" 2 'prayer' 'isaac' "~The really interesting stuff is at the very start of his working life.~" 4 'museum' 'arcana' 'doktor' 'stein' "~Forget it, there's no way to return from the museum, and Doktor Stein's medicine has no antidote.~" 2 'merlyn' 'merlin' "~Merlyn doesn't really come into this. Try working on something else.~" 'hat' "~Literally, Merlyn's actual hat. Green pointy felt, I wouldn't wonder.~" 'book' "~The answer's the same, whichever book you meant. That counts as your hint, I'm afraid. Not very fair, but then I am a demon.~" 'ebenezer' "~Ebenezer?  He's absolutely central to this. Concentrate on him, definitely.~" 3 'projector' 'slide' 'cards' "~Trouble with holiday snaps is, once somebody gets the old slide projector going, a boring time is on the cards for all.~" 2 'rod' 'rods' "~You'll need to be wide awake and alert to work out what to do with them. Finding them is easy - just remember to keep an eye out for short, fat things.~" 2 'tarot' 'sosostris' "~Clairvoyantes are expert at detecting stacked decks, so it's no good cheating.~" 2 'boat' 'hollow' "~Phlebas runs a very badly-advertised service, I'm afraid. I've got no time for him.~" 3 'mouse' 'robot' 'hole' "~Once the mouse is in the hole, forget it, it couldn't hear you even if you talked to the hole instead. But there is an alternative method.~" 'key' "~Your fault for letting the key get into the foundations - nothing can get in there to retrieve it.~" 2 'radio' 'wireless' "~Marvellous, marvellous contraption. Starts the moment you switch it on, and then nothing but solid gold classics all the way. You can really concentrate when that's playing.~" 2 'fireplace' 'chimney' "~What, the blocked-up old fireplace that doesn't lead anywhere?  You need to be carrying plenty of equipment to get down it - don't worry if it's dark at the bottom, after all there's nothing you can do about that.~" 2 'sandstone' 'recess' "~The sandstone recess is probably impassible. Better try only when you're wide awake.~" 2 'austin' 'cat' "~Austin's a perfect devil, isn't he?  She, I should say. Good for nothing except getting in the way, of course. Walks into walls just when you don't want, but at least Jemima calms her down.~" 3 'smoke' 'detector' 'alarm' "~Smoke detectors like yours are specially rigged not to be triggered by accidental shafts of light.~" 'ship' "~Of course the ship is far too large and ungainly ever to fit in the bottle.~" 'flag' "~Cold comfort.~" 2 'alison' 'bed' "~A good blanket might be a plain, colourless sort of covering with no emblem to it.~" 'revolving' "~The thing about the revolving door is, you can only revolve it when you're already standing inside.~" 2 'cabinet' 'glass' "~Unbreakable glass.~" 'matchbook' "~A vital clue, and useful in its own right.~" 'curses' "~The greatest computer game of all time. I'm proud to be a part of it.~" 'tera' "The demon blushes. ~Wasn't my fault!  My partner made a mess of it.~" "";     
Array angel_topics --> 3 'heaven' 'yourself' 'herself' "~Heaven?  Oh this isn't your eternal salvation, it's mine, able to serve by answering all these delightful questions. No, Heaven itself is a marvellous place, and it has an excellent health club too. Look forward to seeing you there.~" 2 'hell' 'demon' "The angel acknowledges the question, but cannot bring herself to speak of Hell." 'rods' "~The rods definitely fit into all this somewhere.~" 'maze' "~If only you could have been there when the maze was being laid out!~" 'master' "~The master game is like a point at infinity to we mortals,~ the angel says wistfully." 3 'infinity' 'lemniscus' 'arc' "~All a matter of fitting the rods in somewhere.~" 3 'andromeda' 'princess' 'maiden' "~How she must long to let her hair down now, instead of being chained to that rock,~ the angel says sorrowfully. ~But in deference to her wishes, I cannot help you rescue her.~" 'mural' "~Amazing fortune you must have in finding it, I can tell.~" 'folly' "~Ah yes, we must all lament for human folly,~ says the angel, misunderstanding completely." 'zeus' "~Zeus wasn't a true god, of course,~ the angel predictably insists, ~just a manifestation of the laws of physics to an Ancient Greek, a kind of symbol for the way the universe fundamentally worked.~" 2 'bomb' 'lighthouse' "The angel maintains a tight-lipped silence." 'sacrifice' "~That's too dangerous a rod to actually use, of course, and the Church no longer approves of martyrs.~" 'luck' "~Is there really such a thing as luck, or free will?  It's a theological grey area,~ says the angel with fine casuistry." 'fire' "~Certainly a thorny problem, that.~" 5 'mascot' 'old' 'evans' 'moon' 'racing' "~Old Evans would never give you his mascot of his own free will.~" 2 'ugly' 'idol' "~One has to reflect on ugliness like that.~" 3 'gold' 'golden' 'watch' "~It's quite hypnotically fascinating, don't you think?~" 4 'squirrel' 'loose' 'board' 'summerhouse' "~Squirrels are very fond of nuts, but you can't trust them an inch.~" 'spade' "~Just think what that would do to a decent lawn!  Oh, it makes me go cold all over.~" 2 'croquet' 'lawn' "~Whatever is a croquet lawn for, if not to play croquet?  Although, now I think about it, there is something else down there.~" 2 'anoppe' 'eppona' "~Ah yes, a code word understood by certain of Alexander the Great's slaves. But you'd have to be in the right place at the right time.~" 2 'tombstone' 'tomb' "~The mouth is the key, or rather the lock.~" 2 'sphinx' 'sphinxes' "~Do be careful. The sphinxes are only made of stone, but they could easily give you nightmares.~" 2 'couch' 'couches' "~Jolly comfortable, some of those funeral couches.~" 5 'skiff' 'yacht' 'boat' 'coffin' 'mummy' "~A one-way ride, but that's life.~" 2 'adamantine' 'knight' "~Once fired with life, the knight will only be yours to command when he has discharged his chivalric duty.~" 2 'hand' 'head' "~Some of those ancient knights were rather loose, but perhaps that's better than being screwed up.~" 2 'library' 'portico' "~The Great Library isn't for passing hooligans, you know,~ says the angel reprovingly. ~Besides, the guards understand their duty by the Cat God far too well to let you through.~" 3 'librarian' 'apollonius' 'callimachus' "~They're always at each other's throats. I shudder to think what might happen if a real fight broke out.~" 2 'alexandria' 'procession' "~Oh, find yourself a costume, join the party!~" 3 'quarterstaff' 'quarter' 'staff' "~The green wood may one day make a really good staff, but it could take ages. Better leave it with someone for safe keeping.~" 'high' "~Some choices are inevitable and permanent, at least in this world.~" 'oubliette' "~Do be careful of the trap, won't you!  You might want to take precautions with the opening.~" 3 'amber' 'gem' 'gemstone' "~Let me see.~" 2 'statues' 'gods' "~You appreciate, in my position I can't really comment on graven images of pagan gods. Better try some dictionary or other.~" 4 'oracle' 'priestess' 'delphic' 'altar' "~That woman will rabbit on, once you set her off. But only if you sacrifice something. Will you be joining us next Harvest Sunday, by the way?~" 2 'oil' 'trough' "~Ooh, it does make me shiver, thinking of the way they used to pour oil over themselves, anointing they called it.~" 2 'homer' 'poet' "~Shabby old gossip, Homer, always reminds me of Peter Falk. Anyway, just give him his answers. Shouldn't be too hard, with what you're wearing and carrying.~" 3 'summer' 'house' 'summerhouse' "~Going in round the front just scares the birds away, I fear.~" 3 'contraption' 'panel' 'grid' "~Find out what you can about your ancestor who built it - his tomb isn't far away. Then reflect as best you can on the problem.~" 'ozone' "~Well, if you know what the odour is, that's the main thing.~" "";       
Array quote_flag_set -> 48;     
Array task_done --> 22; 
Array rank_levels -->   
    48
    500 "happy Tourist."
    499 "very nearly happy Tourist."
    450 "master Druid."
    425 "journeyman Druid."
    400 "apprentice Druid."
    375 "Master Navigator."
    340 "Navigator."
    310 "Voyager."
    280 "Explorer."
    250 "expert Traveller."
    210 "Traveller."
    170 "Adventurer."
    150 "Connoisseur."
    125 "Jack-of-all-trades."
    100 "amateur Adventurer."
    75 "Dilettante."
    50 "cynical Tourist."
    35 "experienced Tourist."
    20 "seasoned Tourist."
    10 "casual Tourist."
    1 "gauche Tourist."
    0 "hapless Tourist."
    65438 "accursed Tourist."
    64536 "irresponsible deity."
;
Array actions_table --> 
    ScoreSub
    FullScoreSub
    QuitSub
    RestoreSub
    RestartSub
    VerifySub
    SaveSub
    ScriptOnSub
    ScriptOffSub
    LMode3Sub
    LMode2Sub
    LMode1Sub
    NounsSub
    NotifyOnSub
    NotifyOffSub
    VersionSub
    PlacesSub
    ObjectsSub
    ExitSub
    TakeSub
    RemoveSub
    EnterSub
    DisrobeSub
    TakeOffSub
    InvSub
    WearSub
    InsertSub
    PutOnSub
    DropSub
    EmptySub
    EmptyTSub
    TransferSub
    ThrowAtSub
    GiveRSub
    GiveSub
    ShowRSub
    ShowSub
    VagueGoSub
    GoSub
    InvTallSub
    InvWideSub
    LookSub
    ExamineSub
    SearchSub
    LookUnderSub
    ConsultSub
    OpenSub
    UnlockSub
    CloseSub
    SwitchOffSub
    EnterSub
    YesSub
    NoSub
    SorrySub
    StrongSub
    MildSub
    WaveHandsSub
    WaveSub
    SetSub
    SetToSub
    PullSub
    PushSub
    PushDirSub
    TurnSub
    SwitchOnSub
    LockSub
    AttackSub
    WaitSub
    AnswerSub
    TellSub
    AskSub
    AskForSub
    EatSub
    SleepSub
    SingSub
    ClimbSub
    BuySub
    SqueezeSub
    SwimSub
    SwingSub
    BlowSub
    PraySub
    WakeSub
    WakeOtherSub
    KissSub
    ThinkSub
    SmellSub
    ListenSub
    TasteSub
    TouchSub
    RubSub
    RepairSub
    BurnSub
    DrinkSub
    FillSub
    CutSub
    JumpSub
    JumpOverSub
    DigSub
    PlainSub
    PrettySub
    HintsSub
    HelpSub
    HelpSpecialSub
    TimeSub
    LookUpSub
    PaceDirSub
    RamSub
    LieSub
    LieDownSub
    ExamineInSub
    WashSub
    DigWithSub
    TurnWithSub
    RipSub
    RipDownSub
    ShoutSub
    LagachSub
    StrikeSub
    KillSub
    PointVagueSub
    PointAtSub
    PointSub
    PlayCroquetSub
    DiagnoseSub
    DanceSub
    BeepSub
    LeanSub
    PropWithSub
    SlideSub
    XyzzySub
    ShantihSub
    MilkSub
    PaceSub
    HypnotizeSub
    AnoppeSub
    SailSub
    AnointSub
    KnockSub
    WishSub
    InscribeSub
    InscribeOnSub
    GambleSub
    CloseWithSub
    StackSub
;
Array preactions_table --> IsDirection; 


[ Main ;        
    PlayTheGame();
    rtrue;
];

[ Keyboard a_buffer a_table nw i w x1 x2 ;      
    DisplayStatus();
  .labelXXX;
    i = 0;
  .labelXXX;
    if (i < 10) {
        array_24650->i = a_table->i;
        ++i;
        jump labelXXX;
    }
    a_buffer->0 = 120[steel_wrench?];
    a_table->0 = 64[Disused_Observatory?];
    L__M(##Prompt);
    Stub7();
    generic_globvar = 0;
    a_buffer->1 = 0;
    DrawStatusLine();
    @aread a_buffer a_table -> generic_globvar;
    nw = a_table->1;
    if (nw == 0) {
        L__M(##Miscellany,10);
        jump labelXXX;
    }
    w = a_table-->1;
    if (w == 'o//' or 'oops') {
        ! no code
    } else {
        if (w == 'undo' && parse->1 == 1[?]) {
            if (turns == 1) {
                L__M(##Miscellany,11);
                jump labelXXX;
            }
            if (undo_flag == 0) {
                L__M(##Miscellany,6);
                jump labelXXX;
            }
            if (undo_flag == 1) {
                ! no code
            } else {
                if (undone_flag == 1) {
                    L__M(##Miscellany,12);
                    jump labelXXX;
                }
                @restore_undo -> i;
                if (i ~= 0) jump labelXXX;
            }
            L__M(##Miscellany,7);
          .labelXXX;
            jump labelXXX;
        }
        @save_undo -> i;
        undone_flag = 0;
        undo_flag = 2;
        if (i == 65535) {
            undo_flag = 0;
        }
        if (i == 0) {
            undo_flag = 1;
        }
        if (i == 2) {
            style bold;
            PrintShortName(location);
            print "^";
            style roman;
            L__M(##Miscellany,13);
            undone_flag = 1;
            jump labelXXX;
        }
        return nw;
    }
    if (oops_from == 0) {
        L__M(##Miscellany,14);
        jump labelXXX;
    }
    if (nw == 1[?]) {
        L__M(##Miscellany,15);
        jump labelXXX;
    }
    if (nw > 2) {
        L__M(##Miscellany,16);
        jump labelXXX;
    }
    x1 = a_table-->3;
    x2 = a_table-->4;
    i = 0;
  .labelXXX;
    if (i < 10) {
        a_table->i = array_24650->i;
        ++i;
        jump labelXXX;
    }
    w = 2 * oops_from - 1;
    a_table-->w = x1;
    a_table-->(w + 1) = x2;
    return nw;
];

[ Parser results syntax line num_lines line_address i j token l m ;     
    if (notheld_mode == 1) {
        i = 0;
      .labelXXX;
        if (i < 8) {
            results-->i = kept_results-->i;
            ++i;
            jump labelXXX;
        }
        notheld_mode = 0;
        rtrue;
    }
    if (held_back_mode == 1) {
        held_back_mode = 0;
        i = 0;
      .labelXXX;
        if (i < 64) {
            parse->i = parse2->i;
            ++i;
            jump labelXXX;
        }
        new_line;
        jump labelXXX;
    }
  .labelXXX;
    Keyboard(buffer,parse);
  .labelXXX;
    num_words = parse->1;
    wn = 1;
    Stub6();
    num_words = parse->1;
    if (parser_trace >= 4) {
        print "[ ", num_words, " to parse: ";
        i = 1[?];
      .labelXXX;
        if (i <= num_words) {
            j = parse-->((i - 1) * 2 + 1);
            if (j == 0) {
                print "? ";
            } else {
                if (UnsignedCompare(j,0-->4) >= 0 && UnsignedCompare(j,0-->2) < 0) {
                    print (address) j;
                } else {
                    print j;
                }
                print " ";
            }
            ++i;
            jump labelXXX;
        }
        print "]^";
    }
    verb_wordnum = 1[?];
    actor = player;
    actor_location = location;
    usual_grammar_after = 0;
  .labelXXX;
    token_was = 0;
    scope_token = 0;
    action_to_be = ##-1;
  .labelXXX;
    wn = verb_wordnum;
    verb_word = NextWordStopped();
    if (verb_word == 'invalidDictWord65535') {
        pcount2 = 1[?];
    } else {
        if (verb_word == 'g//') {
            verb_word = 'again';
        }
        if (verb_word == 'again') {
            if (actor ~= player) {
                print "To repeat a command like ~frog, jump~, just say ~again~, not ~frog, again~.^";
                jump labelXXX;
            }
            if (array_24553->1 == 0) {
                print "You can hardly repeat that.^";
                jump labelXXX;
            }
            i = 0;
          .labelXXX;
            if (i < 64) {
                parse->i = array_24553->i;
                ++i;
                jump labelXXX;
            }
            jump labelXXX;
        }
        if (verb_word ~= 'again') {
            i = 0;
          .labelXXX;
            if (i < 64) {
                array_24553->i = parse->i;
                ++i;
                jump labelXXX;
            }
        }
        if (usual_grammar_after == 0) {
            i = RunRoutines(actor,grammar);
            if (parser_trace >= 2 && actor.grammar ~= 0 or 65535[?]) {
                print " [Grammar property returned ", i, "]^";
            }
            if (i < 0) {
                usual_grammar_after = verb_wordnum;
                i = 0 - i;
            }
            if (i == 1[?]) {
                results-->0 = verb;
                results-->1 = noun;
                results-->2 = second;
                rtrue;
            }
            if (i ~= 0) {
                verb_word = i;
                --wn;
                --verb_wordnum;
            } else {
                wn = verb_wordnum;
                verb_word = NextWord();
            }
        } else {
            usual_grammar_after = 0;
        }
        if (verb_word == 0 || verb_word->6 & 1 == 0) {
            wn = verb_wordnum;
            l = NounDomain(compass,0,0);
            if (l == 10000) {
                jump labelXXX;
            }
            if (l ~= 0) {
                results-->0 = 38[Meldrewes_History?];
                results-->1 = 1[?];
                results-->2 = l;
                jump labelXXX;
            }
            if (actor == player) {
                j = 2[?];
              .labelXXX;
                if (j <= num_words) {
                    i = NextWord();
                    if (i == 41628['xcomma'?]) {
                        jump labelXXX;
                    }
                    ++j;
                    jump labelXXX;
                }
                verb_word = Stub4(verb_word);
                if (verb_word ~= 0) {
                    jump labelXXX;
                }
            }
            pcount2 = 12[out_obj?];
            jump labelXXX;
          .labelXXX;
            j = wn - 1;
            if (j == 1[?]) {
                print "You can't begin with a comma.^";
                jump labelXXX;
            }
            wn = 1;
            lookahead = 1;
            scope_reason = TALKING_REASON;
            l = NounDomain(player,actor_location,6);
            scope_reason = PARSING_REASON;
            if (l == 10000) {
                jump labelXXX;
            }
            if (l == 0) {
                print "You seem to want to talk to someone, but I can't see whom.^";
                jump labelXXX;
            }
            if (l hasnt animate && l hasnt talkable) {
                print "You can't talk to ";
                Defart(l);
                print ".^";
                jump labelXXX;
            }
            if (wn ~= j) {
                print "To talk to someone, try ~someone, hello~ or some such.^";
                jump labelXXX;
            }
            ResetVagueWords(l);
            verb_wordnum = j + 1;
            actor = l;
            actor_location = l;
          .labelXXX;
            if (parent(actor_location) ~= nothing) {
                actor_location = parent(actor_location);
                jump labelXXX;
            }
            if (parser_trace >= 1) {
                print "[Actor is ";
                Defart(actor);
                print " in ";
                PrintShortName(actor_location);
                print "]^";
            }
            jump labelXXX;
        }
      .labelXXX;
        meta = verb_word->6 & 2 / 2;
        if (meta == 1 && actor ~= player) {
            pcount2 = 12[out_obj?];
            meta = 0;
        } else {
            i = 255 - verb_word->7;
            syntax = 0-->7-->i;
            num_lines = syntax->0 - 1;
            vague_word = 'it';
            vague_obj = itobj;
            if (parser_trace >= 1) {
                print "[Parsing for the verb '", (address) verb_word, "' (", num_lines + 1, " lines)]^";
            }
            pcount2 = 1[?];
            line = 0;
          .labelXXX;
            if (line <= num_lines) {
                line_address = syntax + 1 + line * 8;
                if (parser_trace >= 1) {
                    print "[Line ", line, ": ", line_address->0, " parameters: ";
                    pcount = 1;
                  .labelXXX;
                    if (pcount <= 6) {
                        token = line_address->pcount;
                        print token, " ";
                        ++pcount;
                        jump labelXXX;
                    }
                    print " -> action ", line_address->7, "]^";
                }
                notholding = 0;
                interfrom = 0;
                parameters = 0;
                params_wanted = line_address->0;
                nsns = 0;
                special_word = 0;
                special_number = 0;
                multiple_object-->0 = 0;
                multi_context = 0;
                etype = STUCK_PE;
                action_to_be = line_address->7;
                wn = verb_wordnum + 1;
                advance_warning = 65535;
                indef_mode = 0;
                i = 0;
                m = 0;
                pcount = 1;
              .labelXXX;
                if (pcount <= 6) {
                    scope_token = 0;
                    token = line_address->pcount;
                    if (token == 2) {
                        ++m;
                    }
                    if (token < 180) {
                        ++i;
                    }
                    if (token == 4 or 5 && i == 1[?]) {
                        if (parser_trace >= 2) {
                            print " [Trying look-ahead]^";
                        }
                        ++pcount;
                      .labelXXX;
                        if (pcount <= 6 && line_address->pcount >= 180) {
                            ++pcount;
                            jump labelXXX;
                        }
                        token = line_address->(pcount - 1);
                        if (token >= 180) {
                            j = AdjectiveAddress(token);
                          .labelXXX;
                            if (wn <= num_words) {
                                if (NextWord() == j) {
                                    l = NounDomain(actor_location,actor,token);
                                    if (parser_trace >= 2) {
                                        print " [Forward token parsed: ";
                                        if (l == 10000) {
                                            print "re-parse request]^";
                                        }
                                        if (l == 1) {
                                            print "but multiple found]^";
                                        }
                                        if (l == 0) {
                                            print "hit error ", etype, "]^";
                                        }
                                    }
                                    if (l == 10000) {
                                        jump labelXXX;
                                    }
                                    if (l >= 2) {
                                        advance_warning = l;
                                        if (parser_trace >= 3) {
                                            Defart(l);
                                            print "]^";
                                        }
                                    }
                                }
                                jump labelXXX;
                            }
                        }
                    }
                    ++pcount;
                    jump labelXXX;
                }
                take_all_rule = 0;
                if (m == 1[?] && params_wanted == 1[?] && action_to_be == ##Take) {
                    take_all_rule = 1;
                }
                notholding = 0;
                interfrom = 0;
                parameters = 0;
                nsns = 0;
                special_word = 0;
                special_number = 0;
                multiple_object-->0 = 0;
                etype = STUCK_PE;
                action_to_be = line_address->7;
                wn = verb_wordnum + 1;
                pcount = 1;
              .labelXXX;
                if (pcount <= 6) {
                    pattern-->pcount = 0;
                    scope_token = 0;
                    token = line_address->pcount;
                    if (parser_trace >= 2) {
                        print " [Token ", pcount, " is ", token, ": ";
                        if (token < 16) {
                            if (token == 0) {
                                print "<noun> or null";
                            }
                            if (token == 1) {
                                print "<held>";
                            }
                            if (token == 2) {
                                print "<multi>";
                            }
                            if (token == 3) {
                                print "<multiheld>";
                            }
                            if (token == 4) {
                                print "<multiexcept>";
                            }
                            if (token == 5) {
                                print "<multiinside>";
                            }
                            if (token == 6) {
                                print "<creature>";
                            }
                            if (token == 7) {
                                print "<special>";
                            }
                            if (token == 8) {
                                print "<number>";
                            }
                        }
                        if (token >= 16 && token < 48) {
                            print "<noun filter by routine ", token - 16, ">";
                        }
                        if (token >= 48 && token < 80) {
                            print "<general parse by routine ", token - 48, ">";
                        }
                        if (token >= 80 && token < 128) {
                            print "<scope parse by routine ", token - 80, ">";
                        }
                        if (token >= 128 && token < 180) {
                            print "<noun filter by attribute ", token - 128, ">";
                        }
                        if (token > 180) {
                            print "<adjective ", 255 - token, " '", (address) AdjectiveAddress(token), "'>";
                        }
                        print " at word number ", wn, "]^";
                    }
                    m = pcount + 1;
                    lookahead = 8;
                    if (m <= 6) {
                        lookahead = line_address->m;
                    }
                    if (lookahead == 0) {
                        m = parameters;
                        if (token <= 7) {
                            ++m;
                        }
                        if (m >= params_wanted) {
                            lookahead = 8;
                        }
                    }
                    if (token > 180) {
                        pattern-->pcount = 10000 + token;
                        if (wn > num_words) {
                            if (interfrom == 0 && parameters < params_wanted) {
                                interfrom = pcount;
                                inferword = token;
                            }
                            if (interfrom == 0) {
                                jump labelXXX;
                            }
                        }
                        if (wn <= num_words && token ~= AdjectiveWord()) {
                            jump labelXXX;
                        }
                    } else {
                        if (parameters == params_wanted) {
                            if (wn <= num_words) {
                                l = NextWord();
                                if (l == 40296 or 41628) {
                                    held_back_mode = 1;
                                    hb_wn = wn - 1;
                                } else {
                                    m = 0;
                                  .labelXXX;
                                    if (m < 8) {
                                        array_24634-->m = pattern-->m;
                                        ++m;
                                        jump labelXXX;
                                    }
                                    pcount2 = pcount;
                                    etype = UPTO_PE;
                                    jump labelXXX;
                                }
                            }
                            if (parameters >= 1 && results-->2 == 0) {
                                l = ReviseMulti(results-->3);
                                if (l ~= 0) {
                                    etype = l;
                                    jump labelXXX;
                                }
                            }
                            if (parameters >= 2 && results-->3 == 0) {
                                l = ReviseMulti(results-->2);
                                if (l ~= 0) {
                                    etype = l;
                                    jump labelXXX;
                                }
                            }
                            if (take_all_rule == 2 && results-->2 == actor) {
                                pcount2 = 17[rod_of_fire?];
                                jump labelXXX;
                            }
                            if (parser_trace >= 1) {
                                print "[Line successfully parsed]^";
                            }
                            if (interfrom ~= 0) {
                                print "(";
                                PrintCommand(interfrom,true);
                                print ")^";
                            }
                            results-->1 = params_wanted;
                            results-->0 = line_address->7;
                            if (parameters > 0 && results-->2 >= 2) {
                                ResetVagueWords(results-->2);
                            }
                            oops_from = 0;
                            if (notholding ~= 0 && actor == player) {
                                notheld_mode = 1;
                                i = 0;
                              .labelXXX;
                                if (i < 8) {
                                    kept_results-->i = results-->i;
                                    ++i;
                                    jump labelXXX;
                                }
                                results-->0 = 19[rod_of_stalking?];
                                results-->1 = 1[?];
                                results-->2 = notholding;
                                print "(first taking ";
                                Defart(notholding);
                                print ")^";
                            }
                            if (held_back_mode == 1) {
                                wn = hb_wn;
                                jump labelXXX;
                            }
                            rtrue;
                        }
                        if (token == 6 && action_to_be == ##Answer or ##Ask or ##AskFor or ##Tell) {
                            scope_reason = TALKING_REASON;
                        }
                        l = ParseObjectList(results,token);
                        scope_reason = PARSING_REASON;
                        if (parser_trace >= 3) {
                            print "  [Parse object list replied with";
                            if (l == 10000) {
                                print " re-parse request]^";
                            }
                            if (l == 0) {
                                print " token failed, error type ", etype, "]^";
                            }
                            if (l == 1) {
                                print " token accepted]^";
                            }
                        }
                        if (l == 10000) {
                            jump labelXXX;
                        }
                        if (l == 0) {
                            jump labelXXX;
                        }
                    }
                    ++pcount;
                    jump labelXXX;
                }
              .labelXXX;
                if (etype > pcount2) {
                    pcount2 = etype;
                }
                if (take_all_rule == 2 && etype == NOTHING_PE) {
                    ! no code
                } else {
                    ++line;
                    jump labelXXX;
                }
            }
        }
    }
  .labelXXX;
    etype = pcount2;
    if (actor ~= player) {
        if (usual_grammar_after > 0) {
            verb_wordnum = usual_grammar_after;
            jump labelXXX;
        }
        wn = verb_wordnum;
        special_word = NextWord();
        if (special_word == 'xcomma') {
            special_word = NextWord();
            ++verb_wordnum;
        }
        special_number = TryNumber(verb_wordnum);
        results-->0 = 264[aft_obj?];
        results-->1 = 2[?];
        results-->2 = 1[?];
        special_number1 = special_word;
        results-->3 = actor;
        consult_from = verb_wordnum;
        consult_words = num_words - consult_from + 1;
        rtrue;
    }
    if (Stub2(etype) ~= 0) {
        jump labelXXX;
    }
    if (etype == STUCK_PE) {
        print "I didn't understand that sentence.^";
        oops_from = 1;
    }
    if (etype == UPTO_PE) {
        print "I only understood you as far as wanting to ";
        m = 0;
      .labelXXX;
        if (m < 8) {
            pattern-->m = array_24634-->m;
            ++m;
            jump labelXXX;
        }
        pcount = pcount2;
        PrintCommand(0,true);
        print ".^";
    }
    if (etype == NUMBER_PE) {
        print "I didn't understand that number.^";
    }
    if (etype == CANTSEE_PE) {
        print "You can't see any such thing.^";
        oops_from = saved_oops;
    }
    if (etype == TOOLIT_PE) {
        print "You seem to have said too little!^";
    }
    if (etype == NOTHELD_PE) {
        print "You aren't holding that!^";
        oops_from = saved_oops;
    }
    if (etype == MULTI_PE) {
        print "You can't use multiple objects with that verb.^";
    }
    if (etype == MMULTI_PE) {
        print "You can only use multiple objects once on a line.^";
    }
    if (etype == VAGUE_PE) {
        print "I'm not sure what ~", (address) vague_word, "~ refers to.^";
    }
    if (etype == EXCEPT_PE) {
        print "You excepted something not included anyway!^";
    }
    if (etype == ANIMA_PE) {
        print "You can only do that to something animate.^";
    }
    if (etype == VERB_PE) {
        print "That's not a verb I recognise.^";
    }
    if (etype == SCENERY_PE) {
        print "That's not something you need to refer to in the course of this game.^";
    }
    if (etype == ITGONE_PE) {
        print "You can't see ~", (address) vague_word, "~ (";
        Defart(vague_obj);
        print ") at the moment.^";
    }
    if (etype == JUNKAFTER_PE) {
        print "I didn't understand the way that finished.^";
    }
    if (etype == TOOFEW_PE) {
        if (multihad == 0) {
            print "None";
        } else {
            print "Only ";
            EnglishNumber(multihad);
        }
        print " of those ";
        if (multihad == 1) {
            print "is";
        } else {
            print "are";
        }
        print " available.^";
    }
    if (etype == NOTHING_PE) {
        if (multi_wanted == 100) {
            print "Nothing to do!^";
        } else {
            print "There are none at all available!^";
        }
    }
    if (etype == ASKSCOPE_PE) {
        scope_stage = 3;
        generic_globvar = scope_error();
    }
    jump labelXXX;
  .labelXXX;
    if (wn > num_words) {
        rtrue;
    }
    i = NextWord();
    if (i == 40296['then'?] or 41628['xcomma'?]) {
        if (wn > num_words) {
            parse2->1 = parse2->1 - 1;
            held_back_mode = 0;
            rtrue;
        }
        if (actor == player) {
            j = 0;
        } else {
            j = verb_wordnum - 1;
        }
        last_command_from = j + 1;
        last_command_to = wn - 2;
        i = NextWord();
        if (i == 29712['again'?] or 33528['g//'?]) {
            i = 0;
          .labelXXX;
            if (i < j) {
                parse2-->(2 * i + 1) = parse-->(2 * i + 1);
                parse2-->(2 * i + 2) = parse-->(2 * i + 2);
                ++i;
                jump labelXXX;
            }
            i = last_command_from;
          .labelXXX;
            if (i <= last_command_to) {
                parse2-->(2 + 2 * j) = parse-->(2 * i);
                parse2-->(1 + 2 * j) = parse-->(2 * i - 1);
                ++i;
                ++j;
                jump labelXXX;
            }
            i = wn;
          .labelXXX;
            if (i <= num_words) {
                parse2-->(2 + 2 * j) = parse-->(2 * i);
                parse2-->(1 + 2 * j) = parse-->(2 * i - 1);
                ++i;
                ++j;
                jump labelXXX;
            }
            parse2->1 = j;
            held_back_mode = 1;
            rtrue;
        } else {
            --wn;
        }
        i = 0;
      .labelXXX;
        if (i < j) {
            parse2-->(2 * i + 1) = parse-->(2 * i + 1);
            parse2-->(2 * i + 2) = parse-->(2 * i + 2);
            ++i;
            jump labelXXX;
        }
        i = wn;
      .labelXXX;
        if (i <= num_words) {
            parse2-->(2 + 2 * j) = parse-->(2 * i);
            parse2-->(1 + 2 * j) = parse-->(2 * i - 1);
            ++i;
            ++j;
            jump labelXXX;
        }
        parse2->1 = j;
        held_back_mode = 1;
        rtrue;
    }
    pcount2 = 2[?];
    jump labelXXX;
];

[ NumberWord w ;        
    if (w == 'one') {
        return 1;
    }
    if (w == 'two') {
        return 2;
    }
    if (w == 'three') {
        return 3;
    }
    if (w == 'four') {
        return 4;
    }
    if (w == 'five') {
        return 5;
    }
    if (w == 'six') {
        return 6;
    }
    if (w == 'seven') {
        return 7;
    }
    if (w == 'eight') {
        return 8;
    }
    if (w == 'nine') {
        return 9;
    }
    if (w == 'ten') {
        return 10;
    }
    if (w == 'eleven') {
        return 11;
    }
    if (w == 'twelve') {
        return 12;
    }
    if (w == 'thirteen') {
        return 13;
    }
    if (w == 'fourteen') {
        return 14;
    }
    if (w == 'fifteen') {
        return 15;
    }
    if (w == 'sixteen') {
        return 16;
    }
    if (w == 'seventeen') {
        return 17;
    }
    if (w == 'eighteen') {
        return 18;
    }
    if (w == 'nineteen') {
        return 19;
    }
    if (w == 'twenty') {
        return 20;
    }
    return 0;
];

[ Descriptors context o flag n ;        
    indef_mode = 0;
    indef_type = 0;
    indef_wanted = 0;
    indef_guess_p = false;
    flag = 1;
  .labelXXX;
    if (flag == 1) {
        o = NextWord();
        flag = 0;
        if (o == 'the') {
            flag = 1;
        }
        if (o == 'a//' or 'an' or 'any' or 'either' or 'anything') {
            indef_mode = 1;
            flag = 1;
        }
        if (o == 'another' or 'other') {
            indef_mode = 1;
            flag = 1;
            indef_type = indef_type | 1;
        }
        if (o == 'my' or 'this' or 'these') {
            indef_mode = 1;
            flag = 1;
            indef_type = indef_type | 2;
        }
        if (o == 'that' or 'those') {
            indef_mode = 1;
            flag = 1;
            indef_type = indef_type | 4;
        }
        if (o == 'its') {
            indef_mode = 1;
            flag = 1;
            indef_type = indef_type | 16;
        }
        if (o == 'his' or 'your') {
            indef_mode = 1;
            flag = 1;
            indef_type = indef_type | 32;
        }
        if (o == 'lit' or 'lighted') {
            indef_mode = 1;
            flag = 1;
            indef_type = indef_type | 64;
        }
        if (o == 'unlit') {
            indef_mode = 1;
            flag = 1;
            indef_type = indef_type | 128;
        }
        if (o == 'all' or 'each' or 'every' or 'everything') {
            indef_mode = 1;
            flag = 1;
            indef_wanted = 100;
            if (take_all_rule == 1) {
                take_all_rule = 2;
            }
            indef_type = indef_type | 8;
        }
        if (allow_plurals == 1) {
            n = NumberWord(o);
            if (n > 1) {
                indef_guess_p = true;
                indef_mode = 1;
                flag = 1;
                indef_wanted = n;
                indef_type = indef_type | 8;
            }
        }
        if (flag == 1 && NextWord() ~= 'of') {
            --wn;
        }
        jump labelXXX;
    }
    --wn;
    if (indef_wanted > 0 && (context < 2 || context > 5)) {
        return 7;
    }
    return 0;
];

[ CreatureTest obj ;    
    if (obj has animate) {
        rtrue;
    }
    if (obj hasnt talkable) {
        rfalse;
    }
    if (action_to_be == ##Ask or ##Answer or ##Tell or ##AskFor) {
        rtrue;
    }
    rfalse;
];

[ ParseObjectList results token l o i j k and_parity single_object desc_wn many_flag ;  
    many_flag = 0;
    and_parity = 1;
    dont_infer = 0;
  .labelXXX;
    if (parser_trace >= 3) {
        print "  [Object list from word ", wn, "]^";
    }
    o = NextWord();
    --wn;
    if (o == 'it' or 'them') {
        vague_word = o;
        vague_obj = itobj;
        if (itobj == nothing) {
            etype = VAGUE_PE;
            return 0;
        }
    }
    if (o == 'him') {
        vague_word = o;
        vague_obj = himobj;
        if (himobj == nothing) {
            etype = VAGUE_PE;
            return 0;
        }
    }
    if (o == 'her') {
        vague_word = o;
        vague_obj = herobj;
        if (herobj == nothing) {
            etype = VAGUE_PE;
            return 0;
        }
    }
    if (o == 'me' or 'myself' or 'self') {
        vague_word = o;
        vague_obj = player;
    }
    if (token == 7) {
        l = TryNumber(wn);
        if (l ~= 64536) {
            if (nsns == 0) {
                special_number1 = l;
            } else {
                special_number2 = l;
            }
            special_number = l;
            ++nsns;
            if (parser_trace >= 3) {
                print "  [Read special as the number ", l, "]^";
            }
        }
        if (parser_trace >= 3) {
            print "  [Read special word at word number ", wn, "]^";
        }
        special_word = NextWord();
        single_object = 1;
    } else if (token == 8) {
        l = TryNumber(wn++);
        if (l == 64536) {
            etype = NUMBER_PE;
            rfalse;
        }
        if (parser_trace >= 3) {
            print "  [Read number as ", l, "]^";
        }
        if (nsns++ == 0) {
            special_number1 = l;
        } else {
            special_number2 = l;
        }
        single_object = 1;
    } else if (token >= 48 && token < 80) {
        l = (preactions_table-->(token - 48))();
        if (parser_trace >= 3) {
            print "  [Outside parsing routine returned ", l, "]^";
        }
        if (l < 0) {
            rfalse;
        }
        if (l == 0) {
            --params_wanted;
            rtrue;
        }
        if (l == 1) {
            if (nsns == 0) {
                special_number1 = parsed_number;
            } else {
                special_number2 = parsed_number;
            }
            ++nsns;
        }
        if (l == 10000) {
            return l;
        }
        single_object = l;
    } else {
        if (token >= 80 && token < 128) {
            scope_token = preactions_table-->(token - 80);
            scope_stage = 1;
            l = scope_token();
            if (parser_trace >= 3) {
                print "  [Scope routine returned multiple-flag of ", l, "]^";
            }
            if (l == 1) {
                token = 2;
            } else {
                token = 0;
            }
        }
        token_was = 0;
        if (token >= 16) {
            token_was = token;
            token = 0;
        }
        allow_plurals = 1;
        desc_wn = wn;
      .labelXXX;
        l = Descriptors(token);
        if (l ~= 0) {
            etype = l;
            return 0;
        }
        oops_from = wn;
        if (token ~= 1) {
            i = multiple_object-->0;
            if (parser_trace >= 3) {
                print "  [Calling NounDomain on location and actor]^";
            }
            l = NounDomain(actor_location,actor,token);
            if (l == 10000) {
                return l;
            }
            if (l == 0) {
                etype = CantSee();
                jump labelXXX;
            }
            if (parser_trace >= 3) {
                if (l > 1) {
                    print "  [ND returned ";
                    Defart(l);
                    print "]^";
                } else {
                    print "  [ND appended to the multiple object list:^";
                    k = multiple_object-->0;
                    j = i + 1;
                  .labelXXX;
                    if (j <= k) {
                        print "  Entry ", j, ": ";
                        CDefart(multiple_object-->j);
                        print " (", multiple_object-->j, ")^";
                        ++j;
                        jump labelXXX;
                    }
                    print "  List now has size ", k, "]^";
                }
            }
            if (l == 1) {
                if (many_flag == 0) {
                    many_flag = 1;
                } else {
                    k = multiple_object-->0;
                    multiple_object-->0 = i;
                    j = i + 1;
                  .labelXXX;
                    if (j <= k) {
                        if (and_parity == 1) {
                            MultiAdd(multiple_object-->j);
                        } else {
                            MultiSub(multiple_object-->j);
                        }
                        ++j;
                        jump labelXXX;
                    }
                    if (parser_trace >= 3) {
                        print "  [Merging ", k - i, " new objects to the ", i, " old ones]^";
                    }
                }
            } else {
                if (token == 6 && CreatureTest(l) == 0) {
                    etype = ANIMA_PE;
                    jump labelXXX;
                }
                if (many_flag == 0) {
                    single_object = l;
                } else {
                    if (and_parity == 1) {
                        MultiAdd(l);
                    } else {
                        MultiSub(l);
                    }
                    if (parser_trace >= 3) {
                        print "  [Combining ";
                        Defart(l);
                        print " with list]^";
                    }
                }
            }
        }
        if (token == 1) {
            l = NounDomain(actor,actor_location,token);
            if (l == 10000) {
                return l;
            }
            if (l == 0) {
                etype = CantSee();
                return l;
            }
            o = parent(l);
            if (o ~= actor) {
                if (notheld_mode == 1) {
                    saved_oops = oops_from;
                    etype = NOTHELD_PE;
                    jump labelXXX;
                }
                notholding = l;
                if (parser_trace >= 3) {
                    print "  [Allowing object ";
                    Defart(l);
                    print " for now]^";
                }
            }
            single_object = l;
        }
        wn = oops_from + match_length;
        o = NextWord();
        if (o == 'and' or 'but' or 'except' or 'xcomma') {
            if (parser_trace >= 3) {
                print "  [Read '", (address) o, "']^";
            }
            if (token < 2 || token >= 6) {
                etype = MULTI_PE;
                jump labelXXX;
            }
            if (o == 'but' or 'except') {
                and_parity = 1 - and_parity;
            }
            if (many_flag == 0) {
                multiple_object-->0 = 1;
                multiple_object-->1 = single_object;
                many_flag = 1;
                if (parser_trace >= 3) {
                    print "  [Making new list from ";
                    Defart(single_object);
                    print "]^";
                }
            }
            dont_infer = 1;
            interfrom = 0;
            jump labelXXX;
        }
        --wn;
    }
    if (many_flag == 1) {
        single_object = 0;
        multi_context = token;
    } else if (indef_mode == 1 && indef_type & 8 ~= 0 && (indef_wanted < 100 && indef_wanted > 1)) {
        multihad = 1;
        multi_wanted = indef_wanted;
        etype = TOOFEW_PE;
        jump labelXXX;
    }
    results-->(parameters + 2) = single_object;
    ++parameters;
    pattern-->pcount = single_object;
    return 1;
  .labelXXX;
    if (allow_plurals == 1 && indef_guess_p == true) {
        allow_plurals = 0;
        wn = desc_wn;
        jump labelXXX;
    }
    return 0;
];

[ NounDomain domain1 domain2 context first_word i j k l oldw answer_words marker ;      
    if (parser_trace >= 4) {
        print "   [NounDomain called at word ", wn, "^";
    }
    match_length = 0;
    number_matched = 0;
    match_from = wn;
    placed_in_flag = 0;
    SearchScope(domain1,domain2,context);
    if (parser_trace >= 4) {
        print "   [ND made ", number_matched, " matches]^";
    }
    wn = match_from + match_length;
    if (number_matched == 0) {
        ++wn;
        rfalse;
    }
    if (match_from <= num_words) {
        if (number_matched == 1) {
            i = match_list-->0;
            return i;
        }
        if (wn <= num_words) {
            i = NextWord();
            --wn;
            if (i ~= 29874 or 41628 or 40296 or 30927 or 32916) {
                if (lookahead == 8) {
                    rfalse;
                }
                if (lookahead > 8) {
                    if (lookahead ~= AdjectiveWord()) {
                        --wn;
                        if (parser_trace >= 3) {
                            print "   [ND failed at lookahead at word ", wn, "]^";
                        }
                        rfalse;
                    }
                    --wn;
                }
            }
        }
    }
    number_of_classes = 0;
    if (number_matched == 1) {
        i = match_list-->0;
    }
    if (number_matched > 1) {
        i = Adjudicate(context);
        if (i == 65535) {
            rfalse;
        }
        if (i == 1) {
            rtrue;
        }
    }
    if (i ~= 0) {
        if (dont_infer == 1) {
            return i;
        }
        if (interfrom == 0) {
            interfrom = pcount;
        }
        pattern-->pcount = i;
        return i;
    }
    if (match_from > num_words) {
        ! no code
    } else {
        if (context == 6) {
            print "Who";
        } else {
            print "Which";
        }
        print " do you mean, ";
        j = number_of_classes;
        marker = 0;
        i = 1;
      .labelXXX;
        if (i <= number_of_classes) {
          .labelXXX;
            if (match_classes-->marker ~= i && match_classes-->marker ~= 0 - i) {
                ++marker;
                jump labelXXX;
            }
            k = match_list-->marker;
            if (match_classes-->marker > 0) {
                Defart(k);
            } else {
                Indefart(k);
            }
            if (i < j - 1) {
                print ", ";
            }
            if (i == j - 1) {
                print " or ";
            }
            ++i;
            jump labelXXX;
        }
        print "?^";
      .labelXXX;
        answer_words = Keyboard(buffer2,parse2);
        first_word = parse2-->1;
        if (first_word == 'all' or 'both' or 'everything' or 'every' or 'each') {
            if (context >= 2 && context <= 5) {
                l = multiple_object-->0;
                i = 0;
              .labelXXX;
                if (i < number_matched && l + i < 63) {
                    k = match_list-->i;
                    multiple_object-->(i + 1 + l) = k;
                    ++i;
                    jump labelXXX;
                }
                multiple_object-->0 = i + l;
                rtrue;
            }
            print "Sorry, you can only have one item here. Which one exactly?^";
            jump labelXXX;
        }
        j = first_word->6;
        if (0 ~= j & 1) {
            Copy(buffer,buffer2);
            Copy(parse,parse2);
            return 10000;
        }
        oldw = parse->1;
        parse->1 = answer_words + oldw;
        k = oldw + answer_words;
      .labelXXX;
        if (k > match_from) {
            MoveWord(k,parse,k - answer_words);
            --k;
            jump labelXXX;
        }
        k = 1;
      .labelXXX;
        if (k <= answer_words) {
            MoveWord(match_from + k - 1,parse2,k);
            ++k;
            jump labelXXX;
        }
        return 10000;
    }
    if (context == 6) {
        print "Whom";
    } else {
        print "What";
    }
    print " do you want";
    if (actor ~= player) {
        print " ";
        Defart(actor);
    }
    print " to ";
    PrintCommand(0,true);
    print "?^";
    answer_words = Keyboard(buffer2,parse2);
    first_word = parse2-->1;
    j = first_word->6;
    if (0 ~= j & 1) {
        Copy(buffer,buffer2);
        Copy(parse,parse2);
        return 10000;
    }
    oldw = parse->1;
    if (interfrom == 0) {
        k = 1;
      .labelXXX;
        if (k <= answer_words) {
            MoveWord(oldw + k,parse2,k);
            ++k;
            jump labelXXX;
        }
    } else {
        j = pcount - interfrom;
        k = 1;
      .labelXXX;
        if (k <= answer_words) {
            MoveWord(oldw + k + j,parse2,k);
            ++k;
            jump labelXXX;
        }
        j = interfrom;
      .labelXXX;
        if (j < pcount) {
            if (pattern-->j >= 2 && pattern-->j < 10000) {
                parse2-->1 = 34860['it'?];
                itobj = pattern-->j;
            } else {
                parse2-->1 = AdjectiveAddress(pattern-->j - 10000);
            }
            MoveWord(oldw + 1 + j - interfrom,parse2,1[?]);
            ++answer_words;
            ++j;
            jump labelXXX;
        }
    }
    parse->1 = answer_words + oldw;
    return 10000;
];

[ Adjudicate context i j k good_ones last n ultimate flag offset ;      
    if (parser_trace >= 4) {
        print "   [Adjudicating match list of size ", number_matched, "^";
    }
    j = number_matched - 1;
    good_ones = 0;
    last = match_list-->0;
    i = 0;
  .labelXXX;
    if (i <= j) {
        n = match_list-->i;
        if (n hasnt concealed) {
            ultimate = n;
          .labelXXX;
            ultimate = parent(ultimate);
            if (ultimate ~= actor_location or actor or nothing) jump labelXXX;
            if (context == 0 && ultimate == actor_location && (token_was == 0 || UserFilter(n) == 1[?])) {
                ++good_ones;
                last = n;
            }
            if (context == 1[?] && parent(n) == actor) {
                ++good_ones;
                last = n;
            }
            if (context == 2[?] && ultimate == actor_location) {
                ++good_ones;
                last = n;
            }
            if (context == 3[s_obj?] && parent(n) == actor) {
                ++good_ones;
                last = n;
            }
            if (context == 4[e_obj?] or 5[w_obj?]) {
                if (advance_warning == 65535) {
                    if (parent(n) == actor) {
                        ++good_ones;
                        last = n;
                    }
                } else {
                    if (context == 4[e_obj?] && parent(n) == actor && n ~= advance_warning) {
                        ++good_ones;
                        last = n;
                    }
                    if (context == 5[w_obj?] && parent(n) == actor && n in advance_warning) {
                        ++good_ones;
                        last = n;
                    }
                }
            }
            if (context == 6[ne_obj?] && CreatureTest(n) == 1[?]) {
                ++good_ones;
                last = n;
            }
        }
        ++i;
        jump labelXXX;
    }
    if (good_ones == 1[?]) {
        return last;
    }
    if (context == 6[ne_obj?] && good_ones == 0) {
        return match_list-->0;
    }
    if (indef_mode == 1 && indef_type & 8 ~= 0) {
        if (context < 2 || context > 5) {
            etype = MULTI_PE;
            return 65535;
        }
        i = 0;
        number_of_classes = 1;
        offset = multiple_object-->0;
        j = BestGuess();
      .labelXXX;
        if (j ~= 65535[?] && i < indef_wanted && i + offset < 63) {
            flag = 0;
            if (j hasnt concealed && j hasnt worn) {
                flag = 1;
            }
            if (context == 3[s_obj?] or 4[e_obj?] && parent(j) ~= actor) {
                flag = 0;
            }
            k = ChooseObjects(j,flag);
            if (k == 1[?]) {
                flag = 1;
            } else if (k == 2[?]) {
                flag = 0;
            }
            if (flag == 1) {
                ++i;
                multiple_object-->(i + offset) = j;
                if (parser_trace >= 4) {
                    print "   Accepting it^";
                }
            } else if (parser_trace >= 4) {
                print "   Rejecting it^";
            }
            j = BestGuess();
            jump labelXXX;
        }
        if (i < indef_wanted && indef_wanted < 100) {
            etype = TOOFEW_PE;
            multi_wanted = indef_wanted;
            multihad = multiple_object-->0;
            return 65535;
        }
        multiple_object-->0 = i + offset;
        multi_context = context;
        if (parser_trace >= 4) {
            print "   Made multiple object of size ", i, "]^";
        }
        return 1;
    }
    i = 0;
  .labelXXX;
    if (i < number_matched) {
        match_classes-->i = 0;
        ++i;
        jump labelXXX;
    }
    n = 1[?];
    i = 0;
  .labelXXX;
    if (i < number_matched) {
        if (match_classes-->i == 0) {
            match_classes-->i = n++;
            flag = 0;
            j = i + 1;
          .labelXXX;
            if (j < number_matched) {
                if (match_classes-->j == 0 && Identical(match_list-->i,match_list-->j) == 1[?]) {
                    flag = 1;
                    match_classes-->j = match_classes-->i;
                }
                ++j;
                jump labelXXX;
            }
            if (flag == 1) {
                match_classes-->i = 1 - n;
            }
        }
        ++i;
        jump labelXXX;
    }
    --n;
    if (parser_trace >= 4) {
        print "   Difficult adjudication with ", n, " equivalence classes:^";
        i = 0;
      .labelXXX;
        if (i < number_matched) {
            print "   ";
            CDefart(match_list-->i);
            print " (", match_list-->i, ")  ---  ", match_classes-->i, "^";
            ++i;
            jump labelXXX;
        }
    }
    number_of_classes = n;
    if (n > 1 && indef_mode == 0) {
        j = 0;
        good_ones = 0;
        i = 0;
      .labelXXX;
        if (i < number_matched) {
            k = ChooseObjects(match_list-->i,2);
            if (k == j) {
                ++good_ones;
            }
            if (k > j) {
                j = k;
                good_ones = 1[?];
                last = match_list-->i;
            }
            ++i;
            jump labelXXX;
        }
        if (good_ones == 1[?]) {
            if (parser_trace >= 4) {
                print "   ChooseObjects picked a best.]^";
            }
            return last;
        }
        if (parser_trace >= 4) {
            print "   Unable to decide: it's a draw.]^";
        }
        return 0;
    }
    if (indef_mode == 0) {
        indef_type = 0;
    }
    if (n == 1[?]) {
        dont_infer = 1;
    }
    return BestGuess();
];

[ ReviseMulti second_p i low ;  
    if (parser_trace >= 4) {
        print "   Revising multiple object list of size ", multiple_object-->0, " with 2nd ", (name) second_p, "^";
    }
    if (multi_context == 4 or 5) {
        i = 1[?];
        low = 0;
      .labelXXX;
        if (i <= multiple_object-->0) {
            if (multi_context == 4 && multiple_object-->i ~= second_p || (multi_context == 5 && multiple_object-->i in second_p)) {
                ++low;
                multiple_object-->low = multiple_object-->i;
            }
            ++i;
            jump labelXXX;
        }
        multiple_object-->0 = low;
    }
    if (multi_context == 2) {
        i = 1[?];
        low = 0;
      .labelXXX;
        if (i <= multiple_object-->0) {
            if (parent(multiple_object-->i) == parent(actor)) {
                ++low;
            }
            ++i;
            jump labelXXX;
        }
        if (parser_trace >= 4) {
            print "   Token 2 plural case: number with actor ", low, "^";
        }
        if (take_all_rule == 2 || low > 0) {
            i = 1[?];
            low = 0;
          .labelXXX;
            if (i <= multiple_object-->0) {
                if (parent(multiple_object-->i) == parent(actor)) {
                    ++low;
                    multiple_object-->low = multiple_object-->i;
                }
                ++i;
                jump labelXXX;
            }
            multiple_object-->0 = low;
        }
    }
    i = multiple_object-->0;
    if (parser_trace >= 4) {
        print "   Done: new size ", i, "^";
    }
    if (i == 0) {
        return 17[rod_of_fire?];
    }
    return 0;
];

[ ScoreMatchL its_owner its_score obj i threshold a_s l_s ;     
    if (indef_type & 1 ~= 0) {
        threshold = 40;
    }
    if (indef_type & 2 ~= 0) {
        threshold = threshold + 40;
    }
    if (indef_type & 4 ~= 0) {
        threshold = threshold + 40;
    }
    if (indef_type & 16 ~= 0) {
        threshold = threshold + 40;
    }
    if (indef_type & 32 ~= 0) {
        threshold = threshold + 40;
    }
    if (indef_type & 64 ~= 0) {
        threshold = threshold + 40;
    }
    if (indef_type & 128 ~= 0) {
        threshold = threshold + 40;
    }
    if (parser_trace >= 4) {
        print "   Scoring match list with type ", indef_type, ", threshold ", threshold, ":^";
    }
    a_s = (RECURSE_BIT|ENGLISH_BIT|FULLINV_BIT|INDENT_BIT);
    l_s = (RECURSE_BIT|FULLINV_BIT);
    if (action_to_be == ##Take or ##Remove) {
        a_s = (RECURSE_BIT|FULLINV_BIT);
        l_s = (RECURSE_BIT|ENGLISH_BIT|FULLINV_BIT|INDENT_BIT);
    }
    i = 0;
  .labelXXX;
    if (i < number_matched) {
        obj = match_list-->i;
        its_owner = parent(obj);
        its_score = 0;
        if (its_owner == actor) {
            its_score = a_s;
        }
        if (its_owner == actor_location) {
            its_score = l_s;
        }
        if (its_score == 0 && its_owner ~= 1[?]) {
            its_score = (ENGLISH_BIT|INDENT_BIT);
        }
        if (indef_type & 1 ~= 0 && obj ~= itobj or himobj or herobj) {
            its_score = its_score + 40;
        }
        if (indef_type & 2 ~= 0 && its_owner == actor) {
            its_score = its_score + 40;
        }
        if (indef_type & 4 ~= 0 && its_owner == actor_location) {
            its_score = its_score + 40;
        }
        if (indef_type & 64 ~= 0 && obj has light) {
            its_score = its_score + 40;
        }
        if (indef_type & 128 ~= 0 && obj hasnt light) {
            its_score = its_score + 40;
        }
        if (indef_type & 16 ~= 0 && its_owner == itobj) {
            its_score = its_score + 40;
        }
        if (indef_type & 32 ~= 0 && its_owner has animate && GetGender(its_owner) == 1) {
            its_score = its_score + 40;
        }
        its_score = its_score + ChooseObjects(obj,2);
        if (its_score < threshold) {
            match_list-->i = 65535;
        } else {
            match_classes-->i = its_score;
            if (parser_trace >= 4) {
                print "   ";
                CDefart(match_list-->i);
                print " (", match_list-->i, ") in ";
                Defart(its_owner);
                print " scores ", its_score, "^";
            }
        }
        ++i;
        jump labelXXX;
    }
    number_of_classes = 2;
    rtrue;
];

[ BestGuess earliest its_score best i ; 
    if (number_of_classes ~= 1) {
        ScoreMatchL();
    }
    earliest = 0;
    best = 65535;
    i = 0;
  .labelXXX;
    if (i < number_matched) {
        if (match_list-->i >= 0) {
            its_score = match_classes-->i;
            if (its_score > best) {
                best = its_score;
                earliest = i;
            }
        }
        ++i;
        jump labelXXX;
    }
    if (parser_trace >= 4) {
        if (best < 0) {
            print "   Best guess ran out of choices^";
        } else {
            print "   Best guess ";
            Defart(match_list-->earliest);
            print " (", match_list-->earliest, ")^";
        }
    }
    if (best < 0) {
        return 65535;
    }
    i = match_list-->earliest;
    match_list-->earliest = 65535;
    return i;
];

[ Identical o1 o2 p1 p2 n1 n2 i j flag ;        
    if (o1 == o2) {
        rtrue;
    }
    if (o1 == 0 || o2 == 0) {
        rfalse;
    }
    if (parent(o1) == compass || parent(o2) == compass) {
        rfalse;
    }
    if (o1.parse_name ~= nothing || o2.parse_name ~= nothing) {
        if (o1.parse_name ~= o2.parse_name) {
            rfalse;
        }
        parser_action = ##TheSame;
        parser_one = o1;
        parser_two = o2;
        j = wn;
        i = RunRoutines(o1,parse_name);
        wn = j;
        if (i == 65535) {
            rtrue;
        }
        if (i == 65534) {
            rfalse;
        }
    }
    p1 = o1.&name;
    generic_globvar = o1.&name;
    if (generic_globvar) {
        generic_globvar = get_prop_len(generic_globvar);
    }
    n1 = generic_globvar / 2;
    p2 = o2.&name;
    generic_globvar = o2.&name;
    if (generic_globvar) {
        generic_globvar = get_prop_len(generic_globvar);
    }
    n2 = generic_globvar / 2;
    i = 0;
  .labelXXX;
    if (i < n1) {
        flag = 0;
        j = 0;
      .labelXXX;
        if (j < n2) {
            if (p1-->i == p2-->j) {
                flag = 1;
            }
            ++j;
            jump labelXXX;
        }
        if (flag == 0) {
            rfalse;
        }
        ++i;
        jump labelXXX;
    }
    j = 0;
  .labelXXX;
    if (j < n2) {
        flag = 0;
        i = 0;
      .labelXXX;
        if (i < n1) {
            if (p1-->i == p2-->j) {
                flag = 1;
            }
            ++i;
            jump labelXXX;
        }
        if (flag == 0) {
            rfalse;
        }
        ++j;
        jump labelXXX;
    }
    rtrue;
];

[ PrintCommand from emptyf i j k f ;    
    if (from == 0) {
        i = verb_word;
        from = 1[?];
        f = 1[?];
        if (i == 35076['l//'?]) {
            print "look";
        } else if (i == 41709['z//'?]) {
            print "wait";
        } else if (i == 41619['x//'?]) {
            print "examine";
        } else if (i == 34626['i//'?] or 34797['inv'?]) {
            print "inventory";
        } else if (Stub3(i) == 0) {
            print (address) i;
        }
    }
    j = pcount - emptyf;
    k = from;
  .labelXXX;
    if (k <= j) {
        if (f == 1[?]) {
            print ' ';
        }
        i = pattern-->k;
        if (i == 0) {
            print "those things";
        } else if (i == 1[?]) {
            print "that";
        } else if (i >= 10000) {
            i = AdjectiveAddress(i - 10000);
            print (address) i;
        } else {
            Defart(i);
        }
        f = 1[?];
        ++k;
        jump labelXXX;
    }
    rtrue;
];

[ CantSee i w e ;       
    saved_oops = oops_from;
    if (scope_token ~= 0) {
        scope_error = scope_token;
        return ASKSCOPE_PE;
    }
    --wn;
    w = NextWord();
    e = CANTSEE_PE;
    if (w == vague_word) {
        e = ITGONE_PE;
    }
    i = parent(actor);
    if (i has visited && Refers(i,w) == 1) {
        e = SCENERY_PE;
    }
    if (etype > e) {
        return etype;
    }
    return e;
];

[ MultiAdd o i j ;      
    i = multiple_object-->0;
    if (i == 63) {
        toomany_flag = 1;
        rtrue;
    }
    j = 1[?];
  .labelXXX;
    if (j <= i) {
        if (o == multiple_object-->j) {
            rtrue;
        }
        ++j;
        jump labelXXX;
    }
    ++i;
    multiple_object-->i = o;
    multiple_object-->0 = i;
    rtrue;
];

[ MultiSub o i j k et ; 
    i = multiple_object-->0;
    et = 0;
    j = 1;
  .labelXXX;
    if (j <= i) {
        if (o == multiple_object-->j) {
            k = j;
          .labelXXX;
            if (k <= i) {
                multiple_object-->k = multiple_object-->(k + 1);
                ++k;
                jump labelXXX;
            }
            --i;
            multiple_object-->0 = i;
            return et;
        }
        ++j;
        jump labelXXX;
    }
    et = VAGUE_PE;
    return et;
];

[ MultiFilter attr i j o ;      
  .labelXXX;
    i = multiple_object-->0;
    j = 1[?];
  .labelXXX;
    if (j <= i) {
        o = multiple_object-->j;
        if (o hasnt attr) {
            MultiSub(o);
            jump labelXXX;
        }
        ++j;
        jump labelXXX;
    }
    rtrue;
];

[ UserFilter obj ;      
    if (token_was >= 128) {
        if (obj has token_was - 128) {
            rtrue;
        }
        rfalse;
    }
    noun = obj;
    return (preactions_table-->(token_was - 16))();
];

[ MoveWord at1 b2 at2 x y ;     
    x = at1 * 2 - 1;
    y = at2 * 2 - 1;
    parse-->x++ = b2-->y++;
    parse-->x = b2-->y;
    rtrue;
];

[ SearchScope domain1 domain2 context i ;       
    i = 0;
    if (scope_token ~= 0) {
        scope_stage = 2;
        if (scope_token() ~= 0) {
            rtrue;
        }
    }
    if (actor == domain1 or domain2 && Stub5(actor) ~= 0) {
        rtrue;
    }
    if (context == 5[w_obj?] && advance_warning ~= 65535) {
        if (IsSeeThrough(advance_warning) == true) {
            ScopeWithin(advance_warning,0,context);
        }
    } else {
        ScopeWithin(domain1,domain2,context);
        ScopeWithin(domain2,0,context);
    }
    rtrue;
];

[ IsSeeThrough o ;      
    if (o has supporter || o has transparent || (o has container && o has open)) {
        rtrue;
    }
    rfalse;
];

[ PlaceInScope thing ;  
    if (scope_reason ~= PARSING_REASON or TALKING_REASON) {
        DoScopeAction(thing);
        rtrue;
    }
    wn = match_from;
    TryGivenObject(thing);
    placed_in_flag = 1;
    rtrue;
];

[ DoScopeAction thing s p1 ;    
    s = scope_reason;
    p1 = parser_one;
    if (parser_trace >= 5) {
        print "[DSA on ";
        Defart(thing);
        print " with reason = ", scope_reason, " p1 = ", parser_one, " p2 = ", parser_two, "]^";
    }
    generic_globvar = scope_reason;
    if (generic_globvar == 3[s_obj?]) {
        if (thing.ne_to == nothing or NULL) {
            rtrue;
        }
        if (parser_trace >= 2) {
            print "[Considering react_before for ";
            Defart(thing);
            print "]^";
        }
        if (parser_one == 0) {
            parser_one = RunRoutines(thing,ne_to);
        }
    } else if (generic_globvar == 4[e_obj?]) {
        if (thing.nw_to == nothing or NULL) {
            rtrue;
        }
        if (parser_trace >= 2) {
            print "[Considering react_after for ";
            Defart(thing);
            print "]^";
        }
        if (parser_one == 0) {
            parser_one = RunRoutines(thing,nw_to);
        }
    } else if (generic_globvar == 2[?]) {
        if (thing.&each_turn == 0) {
            rtrue;
        }
        if (parser_trace >= 2) {
            print "[Considering each_turn for ";
            Defart(thing);
            print "]^";
        }
        PrintOrRun(thing,each_turn);
    } else if (generic_globvar == 6[ne_obj?]) {
        if (thing == parser_one) {
            parser_two = 1[?];
        }
    } else if (generic_globvar == 5[w_obj?]) {
        generic_globvar = parser_one(thing);
        parser_one = p1;
    }
    scope_reason = s;
    rtrue;
];

[ ScopeWithin domain nosearch context ; 
    if (domain == 0) {
        rtrue;
    }
    if (context == 4[e_obj?] && domain == advance_warning) {
        rtrue;
    }
    if (indef_mode == 0 && domain == actor_location && scope_reason == PARSING_REASON && context ~= 6[ne_obj?]) {
        ScopeWithin(1[?]);
    }
    domain = child(domain);
  .labelXXX;
    if (domain ~= 0) {
        ScopeWithin_O(domain,nosearch,context);
        domain = sibling(domain);
        jump labelXXX;
    }
    rtrue;
];

[ ScopeWithin_O domain nosearch context i ad n ;        
    if (scope_reason ~= PARSING_REASON or TALKING_REASON) {
        DoScopeAction(domain);
    } else if (match_from > num_words) {
        i = parser_trace;
        parser_trace = 0;
        if (i >= 5) {
            print "     Out of text: matching ";
            Defart(domain);
            new_line;
        }
        MakeMatch(domain,1[?]);
        parser_trace = i;
    } else {
        wn = match_from;
        i = NounWord();
        if (i == 1[?] && itobj == domain) {
            MakeMatch(itobj,1[?]);
        }
        if (i == 2[?] && himobj == domain) {
            MakeMatch(himobj,1[?]);
        }
        if (i == 3[s_obj?] && herobj == domain) {
            MakeMatch(herobj,1[?]);
        }
        if (i == 4[e_obj?] && player == domain) {
            MakeMatch(player,1[?]);
        }
        --wn;
        TryGivenObject(domain);
    }
    if (child(domain) ~= nothing && domain ~= nosearch && IsSeeThrough(domain) == true) {
        ScopeWithin(domain,0,context);
    }
    ad = domain.&se_to;
    if (ad ~= 0) {
        if (UnsignedCompare(ad-->0,top_object) > 0) {
            ats_flag = 2 + context;
            RunRoutines(domain,se_to);
            ats_flag = 0;
        } else {
            generic_globvar = domain.&se_to;
            if (generic_globvar) {
                generic_globvar = get_prop_len(generic_globvar);
            }
            n = generic_globvar;
            i = 0;
          .labelXXX;
            if (2 * i < n) {
                ScopeWithin_O(ad-->i,0,context);
                ++i;
                jump labelXXX;
            }
        }
    }
    rtrue;
];

[ AddToScope obj ;      
    if (ats_flag >= 2) {
        ScopeWithin_O(obj,0,ats_flag - 2);
    }
    if (ats_flag == 1 && HasLightSource(obj) == true) {
        ats_hls = 1;
    }
    rtrue;
];

[ MakeMatch obj quality i ;     
    if (parser_trace >= 5) {
        print "    Match with quality ", quality, "^";
    }
    if (token_was ~= 0 && UserFilter(obj) == 0) {
        if (parser_trace >= 5) {
            print "    Match filtered out^";
        }
        rtrue;
    }
    if (quality < match_length) {
        rtrue;
    }
    if (quality > match_length) {
        match_length = quality;
        number_matched = 0;
    } else {
        if (2 * number_matched >= 128) {
            rtrue;
        }
        i = 0;
      .labelXXX;
        if (i < number_matched) {
            if (match_list-->i == obj) {
                rtrue;
            }
            ++i;
            jump labelXXX;
        }
    }
    match_list-->number_matched++ = obj;
    if (parser_trace >= 5) {
        print "    Match added to list^";
    }
    rtrue;
];

[ TryGivenObject obj threshold k w j ;  
    if (parser_trace >= 5) {
        print "    Trying ";
        Defart(obj);
        print " (", obj, ") at word ", wn, "^";
    }
    if (indef_mode ~= 0 && wn > parse->1) {
        MakeMatch(obj,0);
        rfalse;
    }
    if (obj.parse_name ~= nothing) {
        parser_action = ##-1;
        j = wn;
        k = RunRoutines(obj,parse_name);
        if (k > 0) {
            wn = j + k;
          .labelXXX;
            if (parser_action == ##PluralFound) {
                if (allow_plurals == 0) {
                    jump labelXXX;
                }
                if (indef_mode == 0) {
                    indef_mode = 1;
                    indef_type = 0;
                    indef_wanted = 0;
                }
                indef_type = indef_type | 8;
                if (indef_wanted == 0) {
                    indef_wanted = 100;
                }
            }
            MakeMatch(obj,k);
            rfalse;
        }
        if (k == 0) {
            jump labelXXX;
        }
    }
    w = NounWord();
    if (w == 1[?] && obj == itobj || (w == 2[?] && obj == himobj) || (w == 3[s_obj?] && obj == herobj) || (w == 4[e_obj?] && obj == player)) {
        MakeMatch(obj,1[?]);
        rfalse;
    }
    --wn;
    j = wn;
    threshold = NegativeOne(obj);
    if (threshold >= 0 && parser_trace >= 5) {
        print "    ParseNoun returned ", threshold, "^";
    }
    if (threshold < 0) {
        ++wn;
    }
    if (threshold > 0) {
        k = threshold;
        jump labelXXX;
    }
    if (threshold == 0 || Refers(obj,w) == 0) {
      .labelXXX;
        if (indef_mode ~= 0) {
            MakeMatch(obj,0);
        }
        rfalse;
    }
    if (threshold < 0) {
        threshold = 1[?];
      .labelXXX;
        if (0 ~= Refers(obj,NextWord())) {
            ++threshold;
            jump labelXXX;
        }
    }
    MakeMatch(obj,threshold);
    if (parser_trace >= 5) {
        print "    Matched^";
    }
    rtrue;
];

[ Refers obj wd k l m ; 
    if (obj == nothing) {
        rfalse;
    }
    k = obj.&name;
    generic_globvar = obj.&name;
    if (generic_globvar) {
        generic_globvar = get_prop_len(generic_globvar);
    }
    l = generic_globvar / 2 - 1;
    m = 0;
  .labelXXX;
    if (m <= l) {
        if (wd == k-->m) {
            rtrue;
        }
        ++m;
        jump labelXXX;
    }
    rfalse;
];

[ NounWord i ;  
    i = NextWord();
    if (i == 'it' or 'them') {
        return 1;
    }
    if (i == 'him') {
        return 2;
    }
    if (i == 'her') {
        return 3;
    }
    if (i == 'me' or 'myself' or 'self') {
        return 4;
    }
    if (i == 0) {
        rfalse;
    }
    if (i->6 & 128 == 0) {
        rfalse;
    }
    return i;
];

[ AdjectiveWord i j ;   
    j = NextWord();
    if (j == 0) {
        rfalse;
    }
    i = j->6;
    if (i & 8 == 0) {
        rfalse;
    }
    return j->8;
];

[ AdjectiveAddress number m ;   
    m = SummerHouseAfter;
  .labelXXX;
    if (1[?] == 1[?]) {
        if (number == m-->1) {
            return m-->0;
        }
        m = m + 4;
        jump labelXXX;
    }
    m = SummerHouseAfter;
    print "<Adjective not found>";
    return m;
];

[ NextWord i j k ;      
    if (wn > parse->1) {
        ++wn;
        rfalse;
    }
    i = wn * 2 - 1;
    ++wn;
    j = parse-->i;
    if (j == 0) {
        k = wn * 4 - 3;
        i = buffer->(parse->k);
        if (i == ',') {
            j = 'xcomma';
        }
        if (i == '.') {
            j = 'then';
        }
    }
    return j;
];

[ NextWordStopped ;     
    if (wn > parse->1) {
        ++wn;
        return 65535;
    }
    return NextWord();
];

[ WordAddress wordnum ; 
    return 24021 + parse->(wordnum * 4 + 1);
];

[ WordLength wordnum ;  
    return parse->(wordnum * 4);
];

[ TryNumber wordnum i j c num len mul tot d digit ;     
    i = wn;
    wn = wordnum;
    j = NextWord();
    wn = i;
    j = NumberWord(j);
    if (j >= 1) {
        return j;
    }
    i = wordnum * 4 + 1;
    j = parse->i;
    num = j + 24021;
    len = parse->(i - 1);
    tot = Stub1(num,len);
    if (tot ~= 0) {
        return tot;
    }
    if (len >= 4) {
        mul = 1000;
    }
    if (len == 3) {
        mul = 100;
    }
    if (len == 2) {
        mul = 10;
    }
    if (len == 1) {
        mul = 1;
    }
    tot = 0;
    c = 0;
    len = len - 1;
    c = 0;
  .labelXXX;
    if (c <= len) {
        digit = num->c;
        if (digit == 48) {
            d = 0;
        } else if (digit == 49) {
            d = 1;
        } else if (digit == 50) {
            d = 2;
        } else if (digit == 51) {
            d = 3;
        } else if (digit == 52) {
            d = 4;
        } else if (digit == 53) {
            d = 5;
        } else if (digit == 54) {
            d = 6;
        } else if (digit == 55) {
            d = 7;
        } else if (digit == 56) {
            d = 8;
        } else if (digit == 57) {
            d = 9;
        } else {
            return 64536;
        }
        tot = tot + mul * d;
        mul = mul / 10;
        ++c;
        jump labelXXX;
    }
    if (len > 3) {
        tot = 10000;
    }
    return tot;
];

[ ResetVagueWords i ;   
    if (i has animate && i ~= player) {
        if (GetGender(i) == 1) {
            himobj = i;
        } else {
            herobj = i;
        }
    } else {
        itobj = i;
    }
    rtrue;
];

[ GetGender person ;    
    if (person hasnt absent) {
        rtrue;
    }
    rfalse;
];

[ Copy bto bfrom i size ;       
    size = bto->0;
    i = 1;
  .labelXXX;
    if (i <= size) {
        bto->i = bfrom->i;
        ++i;
        jump labelXXX;
    }
    rtrue;
];

[ UnsignedCompare x y u v ;     
    if (x == y) {
        return 0;
    }
    if (x < 0 && y >= 0) {
        return 1;
    }
    if (x >= 0 && y < 0) {
        return 65535;
    }
    u = x & 32767;
    v = y & 32767;
    if (u > v) {
        return 1;
    }
    return 65535;
];

[ ZRegion addr ;        
    if (addr == 0) {
        return 0;
    }
    if (addr >= 1 && addr <= top_object) {
        return 1;
    }
    if (UnsignedCompare(addr,46697["CURSES"?]) >= 0) {
        return 3;
    }
    if (UnsignedCompare(addr,10439[Main?]) >= 0) {
        return 2;
    }
    return 0;
];

[ PrintOrRun o prop flag a ;    
    generic_globvar = o.&prop;
    if (generic_globvar) {
        generic_globvar = get_prop_len(generic_globvar);
    }
    if (generic_globvar > 2) {
        return RunRoutines(o,prop);
    }
    if (o.prop == 65535[?]) {
        rfalse;
    }
    a = ZRegion(o.prop);
    if (a == 0 or 1) {
        "** Expected string/routine as prop value! **";
    }
    if (a == 3) {
        print (string) o.prop;
        if (flag == 0) {
            new_line;
        }
        rtrue;
    }
    return RunRoutines(o,prop);
];

[ ValueOrRun obj prop a ;       
    a = ZRegion(obj.prop);
    if (a == 2) {
        return RunRoutines(obj,prop);
    }
    return obj.prop;
];

[ RunRoutines obj prop i j k l m ssv ;  
    if (obj == thedark && prop ~= initial) {
        obj = real_location;
    }
    if (obj.prop == 65535[?] or 0) {
        rfalse;
    }
    j = obj.&prop;
    generic_globvar = obj.&prop;
    if (generic_globvar) {
        generic_globvar = get_prop_len(generic_globvar);
    }
    k = generic_globvar;
    m = self;
    self = obj;
    ssv = action;
    if (prop == life) {
        action = orders;
    } else {
        action = verb;
    }
    i = 0;
  .labelXXX;
    if (i < k / 2) {
        if (j-->i == 65535[?]) {
            self = m;
            action = ssv;
            rfalse;
        }
        l = ZRegion(j-->i);
        if (l == 2[?]) {
            l = (j-->i)();
            if (l ~= 0) {
                self = m;
                action = ssv;
                return l;
            }
        } else if (l == 3[s_obj?]) {
            print (string) j-->i;
            new_line;
        } else {
            print "** Entry in property list not routine or string **^";
        }
        ++i;
        jump labelXXX;
    }
    self = m;
    action = ssv;
    rfalse;
];

[ DisplayStatus ;       
    if (the_time == 65535) {
        sline1 = score;
        sline2 = turns;
    } else {
        sline1 = the_time / 60;
        sline2 = the_time % 60;
    }
    rtrue;
];

[ SetTime t s ; 
    the_time = t;
    time_rate = s;
    time_step = 0;
    if (s < 0) {
        time_step = 0 - s;
    }
    rtrue;
];

[ NotifyTheScore i ;    
    print "^[Your score has just gone ";
    if (last_score > score) {
        i = last_score - score;
        print "down";
    } else {
        i = score - last_score;
        print "up";
    }
    print " by ";
    EnglishNumber(i);
    print " point";
    if (i > 1) {
        print "s";
    }
    print ".]^";
    rtrue;
];

[ PlayTheGame i j k l ; 
    standard_interpreter = 50-->0;
    player = selfobj;
    top_object = 757 - 255;
    selfobj.capacity = 5;
    j = Initialise;();
    last_score = score;
    move player to location;
  .labelXXX;
    if (parent(location) ~= nothing) {
        location = parent(location);
        jump labelXXX;
    }
    i = child(player);
  .labelXXX;
    if (i ~= 0) {
        give i moved;
        give i ~concealed;
        i = sibling(i);
        jump labelXXX;
    }
    if (j ~= 2) {
        Banner();
    }
    lightflag = OffersLight(parent(player));
    if (lightflag == false) {
        real_location = location;
        location = thedark;
    }
    R_Process(##Look);
    i = 1;
  .labelXXX;
    if (i <= 100) {
        j = random(i);
        ++i;
        jump labelXXX;
    }
  .labelXXX;
    if (deadflag == 0) {
        if (score ~= last_score) {
            if (notify_mode == true) {
                NotifyTheScore();
            }
            last_score = score;
        }
      .labelXXX;
        inputobjs-->0 = 0;
        inputobjs-->1 = 0;
        inputobjs-->2 = 0;
        inputobjs-->3 = 0;
        meta = 0;
        Parser(inputobjs);
        noun = nothing;
        second = nothing;
        verb = ##Score;
        multiflag = 0;
        onotheld_mode = notheld_mode;
        notheld_mode = 0;
        verb = inputobjs-->0;
        if (verb == ##GiveR or ##ShowR) {
            i = inputobjs-->2;
            inputobjs-->2 = inputobjs-->3;
            inputobjs-->3 = i;
            if (verb == ##GiveR) {
                verb = ##Give;
            } else {
                verb = ##Show;
            }
        }
        if (verb == ##Tell && inputobjs-->2 == player && actor ~= player) {
            inputobjs-->2 = actor;
            actor = player;
            verb = ##Ask;
        }
        if (verb == ##AskFor && inputobjs-->2 ~= player && actor == player) {
            actor = inputobjs-->2;
            inputobjs-->2 = inputobjs-->3;
            inputobjs-->3 = player;
            verb = ##Give;
        }
        if (verb == ##Ask or ##Tell or ##Answer) {
            special_word = special_number1;
        }
      .labelXXX;
        inp1 = nothing;
        inp2 = nothing;
        i = inputobjs-->1;
        if (i >= 1) {
            inp1 = inputobjs-->2;
        }
        if (i >= 2) {
            inp2 = inputobjs-->3;
        }
        noun = inp1;
        second = inp2;
        if (inp1 == compass) {
            noun = special_number1;
        }
        if (inp2 == compass) {
            if (inp1 == compass) {
                second = special_number2;
            } else {
                second = special_number1;
            }
        }
        if (actor ~= player) {
            j = RunRoutines(player,orders);
            if (j == 0) {
                j = RunRoutines(actor,orders);
                if (j == 0) {
                    if (verb == ##Orders) {
                        inputobjs-->3 = actor;
                        actor = player;
                        verb = ##Answer;
                        jump labelXXX;
                    }
                    if (RunLife(actor,##Order) == 0) {
                        L__M(##Order,1,actor);
                    }
                }
            }
        } else if (i == 0 || inp1 ~= nothing) {
            Process();
        } else {
            multiflag = 1;
            j = multiple_object-->0;
            if (j == 0) {
                L__M(##Miscellany,2);
                jump labelXXX;
            }
            if (toomany_flag == 1) {
                toomany_flag = 0;
                L__M(##Miscellany,1);
            }
            i = location;
            k = 1[?];
          .labelXXX;
            if (k <= j) {
                if (deadflag ~= 0) {
                    ! no code
                } else if (location ~= i) {
                    print "(Since something dramatic has happened, your list of commands has been cut short.)^";
                } else {
                    l = multiple_object-->k;
                    ResetVagueWords(l);
                    PrintShortName(l);
                    print ": ";
                    inp1 = l;
                    noun = l;
                    Process();
                    inp1 = nothing;
                    noun = nothing;
                    ++k;
                    jump labelXXX;
                }
            }
        }
        if (notheld_mode == 1) {
            meta = 1;
        }
        if (deadflag == 0 && meta == 0) {
            EndTurnSequence();
        }
        jump labelXXX;
    }
    if (deadflag ~= WON) {
        GoodTryRevoked();
    }
    if (deadflag == 0) {
        jump labelXXX;
    }
    print "^^    ";
    style bold;
    print "***";
    if (deadflag == DIED) {
        L__M(##Miscellany,3);
    }
    if (deadflag == WON) {
        L__M(##Miscellany,4);
    }
    if (deadflag > 2) {
        print " ";
        DeathMessage();
        print " ";
    }
    print "***";
    style roman;
    print "^^^";
    ScoreSub();
    DisplayStatus();
  .labelXXX;
    L__M(##Miscellany,5);
  .labelXXX;
    print "> ";
    generic_globvar = 0;
    buffer->1 = 0;
    DrawStatusLine();
    @aread buffer parse -> generic_globvar;
    i = parse-->1;
    if (i == 37839 or 37767) {
        @quit;
    }
    if (i == 38037) {
        @restart;
    }
    if (i == 38046) {
        RestoreSub();
        jump labelXXX;
    }
    if (i == 33501 or 33492 && 0 == 0) {
        new_line;
        FullScoreSub();
        jump labelXXX;
    }
    if (deadflag == WON && i == 29838 && 0 == 0) {
        new_line;
        Amusing();
        jump labelXXX;
    }
    if (i == 40836) {
        if (undo_flag == 0) {
            L__M(##Miscellany,6);
            jump labelXXX;
        }
        if (undo_flag == 1) {
            ! no code
        } else {
            @restore_undo -> i;
            if (i ~= 0) jump labelXXX;
        }
        L__M(##Miscellany,7);
      .labelXXX;
        jump labelXXX;
    }
    L__M(##Miscellany,8);
    jump labelXXX;
];

[ Process ;     
    if (meta == 1 || AfterRoutines() == 0) {
        generic_globvar = (actions_table-->verb)();
    }
    rtrue;
];

[ TestScope obj act a al sr x y ;       
    x = parser_one;
    y = parser_two;
    parser_one = obj;
    parser_two = 0;
    a = actor;
    al = actor_location;
    sr = scope_reason;
    scope_reason = TESTSCOPE_REASON;
    if (act == 0) {
        actor = player;
    } else {
        actor = act;
    }
    actor_location = actor;
  .labelXXX;
    if (parent(actor_location) ~= nothing) {
        actor_location = parent(actor_location);
        jump labelXXX;
    }
    SearchScope(location,player,0);
    scope_reason = sr;
    actor = a;
    actor_location = al;
    parser_one = x;
    x = parser_two;
    parser_two = y;
    return x;
];

[ LoopOverScope routine act x y a al ;  
    x = parser_one;
    y = scope_reason;
    a = actor;
    al = actor_location;
    parser_one = routine;
    if (act == 0) {
        actor = player;
    } else {
        actor = act;
    }
    actor_location = actor;
  .labelXXX;
    if (parent(actor_location) ~= nothing) {
        actor_location = parent(actor_location);
        jump labelXXX;
    }
    scope_reason = LOOPOVERSCOPE_REASON;
    SearchScope(actor_location,actor,0);
    parser_one = x;
    scope_reason = y;
    actor = a;
    actor_location = al;
    rtrue;
];

[ AfterRoutines ;       
    if (GamePreRoutine() ~= 0) {
        rtrue;
    }
    if (RunRoutines(player,orders) ~= 0) {
        rtrue;
    }
    if (location ~= nothing && RunRoutines(location,before) ~= 0) {
        rtrue;
    }
    scope_reason = REACT_BEFORE_REASON;
    parser_one = 0;
    SearchScope(location,player,0);
    scope_reason = PARSING_REASON;
    if (parser_one ~= 0) {
        rtrue;
    }
    if (inp1 > 1 && RunRoutines(inp1,before) ~= 0) {
        rtrue;
    }
    rfalse;
];

[ BeforeRoutines ;      
    scope_reason = REACT_AFTER_REASON;
    parser_one = 0;
    SearchScope(location,player,0);
    scope_reason = PARSING_REASON;
    if (parser_one ~= 0) {
        rtrue;
    }
    if (location ~= nothing && RunRoutines(location,after) ~= 0) {
        rtrue;
    }
    if (inp1 > 1 && RunRoutines(inp1,after) ~= 0) {
        rtrue;
    }
    return Stub8();
];

[ R_Process acti i j sn ss sa sse ;     
    sn = inp1;
    ss = inp2;
    sa = verb;
    sse = self;
    inp1 = i;
    inp2 = j;
    noun = i;
    second = j;
    verb = acti;
    if (meta == 1 || AfterRoutines() == 0 && verb < 256) {
        generic_globvar = (actions_table-->verb)();
        self = sse;
        inp1 = sn;
        noun = sn;
        inp2 = ss;
        second = ss;
        verb = sa;
        rfalse;
    }
    self = sse;
    inp1 = sn;
    noun = sn;
    inp2 = ss;
    second = ss;
    verb = sa;
    rtrue;
];

[ RunLife a j ; 
    orders = j;
    return RunRoutines(a,life);
];

[ LowKey_Menu menu_choices EntryR ChoiceR lines main_title i j ;        
    ++menu_nesting;
  .labelXXX;
    menu_item = 0;
    lines = EntryR();
    main_title = submenu_header;
    print "--- ", (string) main_title, " ---^^";
    if (ZRegion(menu_choices) == 3) {
        print (string) menu_choices;
    } else {
        generic_globvar = menu_choices();
    }
  .labelXXX;
    print "^Type a number from 1 to ", lines, ", 0 to redisplay or press ENTER.^> ";
    generic_globvar = 0;
    buffer->1 = 0;
    DrawStatusLine();
    @aread buffer parse -> generic_globvar;
    i = parse-->1;
    if (i == 'quit' or 'q//' || parse->1 == 0) {
        --menu_nesting;
        if (menu_nesting > 0) {
            rfalse;
        }
        if (deadflag == 0) {
            R_Process(##Look);
            rtrue;
        }
        rfalse;
    }
    i = TryNumber(1[?]);
    if (i < 1 || i > lines) {
        jump labelXXX;
    }
    menu_item = i;
    j = ChoiceR();
    if (j == 2) {
        jump labelXXX;
    }
    if (j == 3) {
        rfalse;
    }
    jump labelXXX;
];

[ DoMenu menu_choices EntryR Choice lines main_title main_wid cl i j oldcl pke ;        
    if (pretty_mode == false) {
        LowKey_Menu(menu_choices,EntryR,Choice);
        rfalse;
    }
    ++menu_nesting;
    menu_item = 0;
    lines = EntryR();
    main_title = submenu_header;
    main_wid = submenu_number;
    cl = 7[se_obj?];
  .labelXXX;
    oldcl = 0;
    @erase_window 65535;
    i = lines + 7;
    @split_window i;
    i = 0->33;
    if (i == 0) {
        i = 80[secret_door?];
    }
    @set_window 1;
    @set_cursor 1 1;
    style reverse;
    generic_globvar = i;
    if (generic_globvar >= 1) {
      .labelXXX;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump labelXXX;
    }
    j = i / 2 - main_wid;
    @set_cursor 1 j;
    print (string) main_title;
    @set_cursor 2 1;
    generic_globvar = i;
    if (generic_globvar >= 1) {
      .labelXXX;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump labelXXX;
    }
    @set_cursor 2 2;
    print "N = next subject";
    j = i - 12;
    @set_cursor 2 j;
    print "P = previous";
    @set_cursor 3 1;
    generic_globvar = i;
    if (generic_globvar >= 1) {
      .labelXXX;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump labelXXX;
    }
    @set_cursor 3 2;
    print "RETURN = read subject";
    j = i - 17;
    @set_cursor 3 j;
    if (menu_nesting == 1) {
        print "  Q = resume game";
    } else {
        print "Q = previous menu";
    }
    style roman;
    @set_cursor 5 2;
    0-->8 = 2 | 0-->8;
    if (ZRegion(menu_choices) == 3) {
        print (string) menu_choices;
    } else {
        generic_globvar = menu_choices();
    }
  .labelXXX;
    if (cl ~= oldcl) {
        if (oldcl > 0) {
            @set_cursor oldcl 4;
            print " ";
        }
        @set_cursor cl 4;
        print ">";
    }
    oldcl = cl;
    @read_char 1 0 0 -> pke;
    if (pke == 78[Dead_End?] or 110[pile_of_sheets?] or 130[little_window1?]) {
        ++cl;
        if (cl == 7 + lines) {
            cl = 7[se_obj?];
        }
        jump labelXXX;
    }
    if (pke == 80[secret_door?] or 112[Potting_Room?] or 129[dark_shaft_obj2?]) {
        --cl;
        if (cl == 6[ne_obj?]) {
            cl = 6 + lines;
        }
        jump labelXXX;
    }
    if (pke == 81[fire_escape?] or 113[old_gardeners__gloves?] or 27[rod_of_returning2?]) {
        ! no code
    } else {
        if (pke == 10[u_obj?] or 13[in_obj?]) {
            @set_window 0;
            0-->8 = 65533 & 0-->8;
            new_line;
            new_line;
            new_line;
            menu_item = cl - 6;
            generic_globvar = EntryR();
            @erase_window 65535;
            @split_window 1;
            i = 0->33;
            if (i == 0) {
                i = 80[secret_door?];
            }
            @set_window 1;
            @set_cursor 1 1;
            style reverse;
            generic_globvar = i;
            if (generic_globvar >= 1) {
              .labelXXX;
                print ' ';
                generic_globvar = generic_globvar - 1;
                if (generic_globvar ~= 0) jump labelXXX;
            }
            j = i / 2 - submenu_number;
            @set_cursor 1 j;
            print (string) submenu_header;
            style roman;
            @set_window 0;
            new_line;
            i = Choice();
            if (i == 2[?]) {
                jump labelXXX;
            }
            if (i == 3[s_obj?]) {
                jump labelXXX;
            }
            print "^[Please press SPACE.]^";
            @read_char 1 0 0 -> pke;
            jump labelXXX;
        }
        jump labelXXX;
    }
  .labelXXX;
    --menu_nesting;
    if (menu_nesting > 0) {
        rfalse;
    }
    0-->8 = 65533 & 0-->8;
    @set_cursor 1 1;
    @erase_window 65535;
    @set_window 0;
    new_line;
    new_line;
    new_line;
    if (deadflag == 0) {
        R_Process(##Look);
        rtrue;
    }
    rtrue;
];

[ TimerE ;      
    "** Too many timers/daemons! Increase MAX_TIMERS **";
];

[ TimerE2 o ;   
    print "** Object ";
    PrintShortName(o);
    " has no time_left property! **";
];

[ TimerE3 o ;   
    print "** Object ";
    PrintShortName(o);
    " both timer and daemon! **";
];

[ StartTimer obj timer i ;      
    i = 0;
  .labelXXX;
    if (i < active_timers) {
        if (the_timers-->i == obj) {
            if (array_23957->i == 2[?]) {
                TimerE3(obj);
            }
            rfalse;
        }
        ++i;
        jump labelXXX;
    }
    i = 0;
  .labelXXX;
    if (i < active_timers) {
        if (the_timers-->i == 0) {
            jump labelXXX;
        }
        ++i;
        jump labelXXX;
    }
    i = active_timers++;
    if (i * 2 >= 64) {
        TimerE();
    }
  .labelXXX;
    if (obj.&number == 0) {
        TimerE2(obj);
    }
    the_timers-->i = obj;
    array_23957->i = 1[?];
    obj.number = timer;
    rtrue;
];

[ StopTimer obj i ;     
    i = 0;
  .labelXXX;
    if (i < active_timers) {
        if (the_timers-->i == obj) {
            jump labelXXX;
        }
        ++i;
        jump labelXXX;
    }
    rfalse;
  .labelXXX;
    if (obj.&number == 0) {
        TimerE2(obj);
    }
    the_timers-->i = 0;
    obj.number = 0;
    rtrue;
];

[ StartDaemon obj i ;   
    i = 0;
  .labelXXX;
    if (i < active_timers) {
        if (the_timers-->i == obj) {
            if (array_23957->i == 1[?]) {
                TimerE3(obj);
            }
            rfalse;
        }
        ++i;
        jump labelXXX;
    }
    i = 0;
  .labelXXX;
    if (i < active_timers) {
        if (the_timers-->i == 0) {
            jump labelXXX;
        }
        ++i;
        jump labelXXX;
    }
    i = active_timers++;
    if (i * 2 >= 64) {
        TimerE();
    }
  .labelXXX;
    the_timers-->i = obj;
    array_23957->i = 2[?];
    rtrue;
];

[ StopDaemon obj i ;    
    i = 0;
  .labelXXX;
    if (i < active_timers) {
        if (the_timers-->i == obj) {
            jump labelXXX;
        }
        ++i;
        jump labelXXX;
    }
    rfalse;
  .labelXXX;
    the_timers-->i = 0;
    rtrue;
];

[ EndTurnSequence i j ; 
    ++turns;
    if (the_time ~= 65535) {
        if (time_rate >= 0) {
            the_time = the_time + time_rate;
        } else {
            --time_step;
            if (time_step == 0) {
                ++the_time;
                time_step = 0 - time_rate;
            }
        }
        the_time = the_time % 1440;
    }
    i = 0;
  .labelXXX;
    if (deadflag == 0 && i < active_timers) {
        j = the_timers-->i;
        if (j ~= 0) {
            if (array_23957->i == 2[?]) {
                RunRoutines(j,daemon);
            } else if (j.number == 0) {
                StopTimer(j);
                RunRoutines(j,daemon);
            } else {
                j.number = j.number - 1;
            }
        }
        ++i;
        jump labelXXX;
    }
    if (deadflag == 0) {
        scope_reason = EACH_TURN_REASON;
        verb_word = 0;
        DoScopeAction(location);
        SearchScope(location,player,0);
        scope_reason = PARSING_REASON;
    }
    if (deadflag == 0) {
        Stub10();
    }
    if (deadflag == 0) {
        AdjustLight();
        i = child(player);
      .labelXXX;
        if (i ~= 0) {
            if (i hasnt moved) {
                give i moved;
                if (i has scored) {
                    score = score + 4;
                    things_score = things_score + 4;
                }
            }
            i = sibling(i);
            jump labelXXX;
        }
    }
    rtrue;
];

[ AdjustLight flag i ;  
    i = lightflag;
    lightflag = OffersLight(parent(player));
    if (i == 0 && lightflag == true) {
        location = real_location;
        if (flag == 0) {
            R_Process(##Look);
        }
    }
    if (i == 1[?] && lightflag == false) {
        real_location = location;
        location = thedark;
        if (flag == 0) {
            NoteArrival();
            return L__M(##Miscellany,9);
        }
    }
    if (i == 0 && lightflag == false) {
        location = thedark;
    }
    rtrue;
];

[ OffersLight i j ;     
    if (i == nothing) {
        rfalse;
    }
    if (i has light) {
        rtrue;
    }
    j = child(i);
  .labelXXX;
    if (j ~= nothing) {
        if (HasLightSource(j) == true) {
            rtrue;
        }
        j = sibling(j);
        jump labelXXX;
    }
    if (i has enterable || IsSeeThrough(i) == true) {
        return OffersLight(parent(i));
    }
    rfalse;
];

[ HasLightSource i j ad ;       
    if (i == 0) {
        rfalse;
    }
    if (i has light) {
        rtrue;
    }
    if (i has enterable || IsSeeThrough(i) == true) {
        i = child(i);
      .labelXXX;
        if (i ~= 0) {
            if (HasLightSource(i) == true) {
                rtrue;
            }
            i = sibling(i);
            jump labelXXX;
        }
    }
    ad = i.&se_to;
    if (parent(i) ~= nothing && ad ~= 0) {
        if (ad-->0 > top_object) {
            ats_hls = 0;
            ats_flag = 1;
            RunRoutines(i,se_to);
            ats_flag = 0;
            if (ats_hls == 1) {
                rtrue;
            }
        } else {
            j = 0;
          .labelXXX;
            generic_globvar = i.&se_to;
            if (generic_globvar) {
                generic_globvar = get_prop_len(generic_globvar);
            }
            if (2 * j < generic_globvar) {
                if (HasLightSource(ad-->j) == true) {
                    rtrue;
                }
                ++j;
                jump labelXXX;
            }
        }
    }
    rfalse;
];

[ PronounsSub p ;       
    if (p == nothing) {
        print "is unset";
    } else {
        print "means ";
        Defart(p);
    }
    rtrue;
];

[ NounsSub ;    
    print "At the moment, ~it~ ";
    PronounsSub(itobj);
    print ", ~him~ ";
    PronounsSub(himobj);
    if (player == selfobj) {
        print " and";
    } else {
        print ",";
    }
    print " ~her~ ";
    PronounsSub(herobj);
    if (player == selfobj) {
        ".";
    }
    " and ~me~ means ", (name) player, ".";
];

[ ChangePlayer obj flag i ;     
    if (obj.&time_left == 0) {
        "** Player objects must have ~number~ prop **";
    }
    if (actor == player) {
        actor = obj;
    }
    give player ~transparent;
    give player ~concealed;
    i = obj;
  .labelXXX;
    if (parent(i) ~= nothing) {
        if (i has animate) {
            give i transparent;
        }
        i = parent(i);
        jump labelXXX;
    }
    if (player == selfobj) {
        player.short = "your former self";
    }
    player.time_left = real_location;
    player = obj;
    if (player == selfobj) {
        player.short = NULL;
    }
    give player transparent;
    give player concealed;
    give player animate;
    give player proper;
    i = player;
  .labelXXX;
    if (parent(i) ~= nothing) {
        i = parent(i);
        jump labelXXX;
    }
    location = i;
    real_location = player.time_left;
    if (real_location == nothing) {
        real_location = location;
    }
    lightflag = OffersLight(parent(player));
    if (lightflag == false) {
        location = thedark;
    }
    print_player_flag = flag;
    rtrue;
];

[ ChangeDefault prop val ;      
    0-->5-->(prop - 1) = val;
    rtrue;
];

[ RandomEntry tab ;     
    if (tab-->0 == 0) {
        "** Table size 0 **";
    }
    return tab-->random(tab-->0);
];

[ Indefart o ;  
    if (o hasnt proper) {
        PrintOrRun(o,article,1);
        print " ";
    }
    PrintShortName(o);
    rtrue;
];

[ Defart o ;    
    if (o hasnt proper) {
        print "the ";
    }
    PrintShortName(o);
    rtrue;
];

[ CDefart o ;   
    if (o hasnt proper) {
        print "The ";
    }
    PrintShortName(o);
    rtrue;
];

[ PrintShortName o ;    
    if (o == nothing) {
        print "nothing";
        rtrue;
    }
    if (o > top_object || o < 0) {
        print "<no such object>";
        rtrue;
    }
    if (o == player) {
        print "yourself";
        rtrue;
    }
    if (o.&short ~= 0 && PrintOrRun(o,short,1) ~= 0) {
        rtrue;
    }
    print (name) o;
    rtrue;
];

[ DirectionName d ;     
    generic_globvar = d;
    if (generic_globvar == 5[w_obj?]) {
        print "north";
    } else if (generic_globvar == 6[ne_obj?]) {
        print "south";
    } else if (generic_globvar == 7[se_obj?]) {
        print "east";
    } else if (generic_globvar == 8[nw_obj?]) {
        print "west";
    } else if (generic_globvar == 9[sw_obj?]) {
        print "northeast";
    } else if (generic_globvar == 11[d_obj?]) {
        print "northwest";
    } else if (generic_globvar == 10[u_obj?]) {
        print "southeast";
    } else if (generic_globvar == 12[out_obj?]) {
        print "southwest";
    } else if (generic_globvar == 13[in_obj?]) {
        print "up";
    } else if (generic_globvar == 14[thedark?]) {
        print "down";
    } else if (generic_globvar == 15[selfobj?]) {
        print "in";
    } else if (generic_globvar == 16[LibraryMessages?]) {
        print "out";
    } else {
        "** No such direction **";
    }
    rtrue;
];

[ Banner i ;    
    style bold;
    print "CURSES";
    style roman;
    print "^An Interactive Diversion^Copyright (c) 1993, 1994, 1995 by Graham Nelson.^", "Release ", 0-->1 & 1023, " / Serial number ";
    i = 18;
  .labelXXX;
    if (i < 24) {
        print (char) 0->i;
        ++i;
        jump labelXXX;
    }
    print " / Inform v", "1600", " Library ", "5/12";
    new_line;
    if (standard_interpreter > 0) {
        print "Standard interpreter ", standard_interpreter / 256, ".", standard_interpreter % 256, "^";
    }
    rtrue;
];

[ VersionSub ;  
    Banner();
    print "Interpreter ", 0->30, " Version ", (char) 0->31, " / ", "Library serial number ", "951024", "^";
    rtrue;
];


[ LMBefore ;    
    if (action == ##Score) {
        if (deadflag == 0) {
            WhereInGame();
            print "  ";
        }
        rfalse;
    }
    if (action == ##Inv) {
        trigger_quotation(0);
        print "You are ";
        if (location == Inside_the_Orb) {
            print "bathed in a curious white light, and ";
        }
        if (lm_n == compass) {
            "carrying nothing.";
        }
        print "carrying";
        rtrue;
    }
    if (action == ##Drop) {
        if (lm_n == e_obj && noun has rod_attr) {
            trigger_quotation(16);
        }
        rfalse;
    }
    if (action == ##Go) {
        if (lm_n == n_obj && game_section == T_DREAMING or T_EGYPT_DREAMING) {
            "You drift in that direction, but without gaining any ground.";
        }
        rfalse;
    }
    if (action == ##Jump) {
        if (Austin notin location) {
            rfalse;
        }
        if (game_section == T_ALEXANDRIA) {
            "Austin is quite unruffled.";
        }
        print "For some reason, Austin is startled and springs for his life ";
        trigger_quotation(7);
        if (location == Souvenirs_Room && charcoal_sketch in slide_projector && south_wall hasnt concealed) {
            move Austin to Causeway;
            Achieved(SCORE_AUSTIN);
            StartDaemon(Outside_the_Royal_Museum);
            "right up through the south wall and into Alexandria!";
        }
        AustinMovements(true);
        rfalse;
    }
    if (action == ##Listen && antiquated_wireless has general && (antiquated_wireless in location || (antiquated_wireless in Conservatory && location == Potting_Room))) {
        "You feel your brain turning to rice pudding.";
    }
    rfalse;
];


[ RodBefore ;   
    if (action == ##Read) {
        if (self has unidentifed_rod) {
            "A featureless mahogany rod, whose purpose is oblique. Or almost featureless: a little silver plaque is left blank at one end.";
        }
        if (self has high_rod) {
            rfalse;
        }
        print "The silver plaque on this mahogany rod proclaims it as ";
        Defart(self);
        print ".";
        if (noun has charged) {
            "  It is fully charged up.";
        }
        new_line;
        rtrue;
    }
    rfalse;
];


[ RodParse i w ;        
    if (parser_action == ##TheSame) {
        if (parser_one has unidentifed_rod && parser_two has unidentifed_rod) {
            return 65535;
        }
        return 65534;
    }
  .labelXXX;
    if (1[?] == 1[?]) {
        w = NextWord();
        if (Refers(self,w) == 1) {
            ++i;
        } else if (w == 'rods') {
            parser_action = ##PluralFound;
            ++i;
        } else {
            return i;
        }
        jump labelXXX;
    }
    rfalse;
];


[ rod_short ;   
    if (self has unidentifed_rod) {
        print "featureless mahogany rod";
        rtrue;
    }
    if (listing_together hasnt rod_attr) {
        if (self has high_rod) {
            print "High ";
        }
        print "Rod of ";
    }
    rfalse;
];


[ rod_display_before ;  
    if (rod_identity == 2 && self has charged) {
        print " (charged)";
    }
    rfalse;
];


[ LifeDesc ;    
    print "An adamantine rod, bearing a sculpted ";
    if (self == rod_of_life) {
        print "hand";
    }
    if (self == rod_of_love) {
        print "heart";
    }
    if (self == rod_of_death) {
        print "skull";
    }
    " on one end, and inscribed with its title.";
];


[ LifeAction ;  
    "You are knocked off your feet with the power of one of the High Rods, but it is too puissant for a mortal such as you are.";
];


[ ListingRods enhanced ;        
    if (rod_identity == 1) {
        if (enhanced == true) {
            print "the High Rods of ";
        } else {
            print "the Rods of ";
        }
        c_style = c_style | (8 + 4096);
        if (c_style & 1 ~= 0) {
            c_style = c_style - 1;
        }
        if (c_style & 2 ~= 0) {
            c_style = c_style - 2;
        }
    }
    rfalse;
];


[ rod_func1 ;   
    return ListingRods(true);
];

[ discover_rod r ;      
    give r ~unidentifed_rod;
    r.&name-->2 = r.rod_word;
    r.&name-->3 = r.rod_word;
    r.article = "the";
    r.d_to = nothing;
    r.sw_to = ListingRods;
    rtrue;
];


[ RodOfFireAction ;     
    if (second == player) {
        deadflag = DIED;
        "Oh dear. Like Mad Isaac before you, you have spontaneously combusted!";
    }
    if (second == Austin) {
        trigger_quotation(6);
        "You don't really want to vapourise Austin.";
    }
    if (second == adamantine_statue) {
        if (adamantine_skull hasnt general || adamantine_heart hasnt general || adamantine_hand hasnt general) {
            "The bones jerk and rattle, but seem unable to come together into life.";
        }
        remove adamantine_statue;
        move adamantine_knight to West_Side_Chapel;
        Achieved(SCORE_KNIGHT);
        himobj = adamantine_knight;
        "The adamantine knight leaps up, invigorated by the fire in his skeletal eyes, a new spark in his belly!  He bows gravely, in the elaborate style of a mime artist.";
    }
    if (second == adamantine_knight) {
        "Adamantine is fireproof.";
    }
    if (second == loose_board) {
        "The wood seems to have been treated somehow, and is fireproof.";
    }
    if (second has animate) {
        "For heaven's sake, you're only looking for an out-of-date map. Murder does seem a little extreme.";
    }
    if (second == wall_of_thorns_object) {
        if (wall_of_thorns_object has open) {
            "The wall wriggles in discomfort to avoid further devastation.";
        }
        give wall_of_thorns_object open;
        "Fire leaps out from the rod into the heart of the thorn wall, which screams out as it burns, revealing a great hole through the wild flames. You catch a tantalising glimpse of a great Temple, before the wall heals back. But it is unable to recover entirely, and a charred gap is left to the south. You could probably squeeze through it.";
    }
    if (second == medicine_bottle) {
        print "The melting point of this glass is very high, and amazingly it withstands the bolt of fire.^";
        GoodTry();
        rfalse;
    }
    if (second == complicated_looking_bomb or timer_detonator) {
        deadflag = DIED;
        "(Perhaps predictably) the bomb explodes!";
    }
    if (second has scenery || second has static) {
        deadflag = DIED;
        "You start a great conflagration, and then perish in it!";
    }
    remove second;
    print "A bolt of fire leaps from the rod and consumes ";
    Defart(second);
    " utterly!";
];


[ RodOfIceAction ;      
    if (second == player) {
        "You feel a sudden chill.";
    }
    if (second has animate) {
        print "For a fleeting moment, ";
        Defart(second);
        " freezes up.";
    }
    if (second has high_rod) {
        if (second has general) {
            "It's already cold.";
        }
        give second general;
        "There is an enormous hissing of steam, creating wildly swirling mists, after whose parting an apparently cool rod is left behind.";
    }
    "Nothing obvious happens.";
];


[ RodOfReturningAction i loc ;  
    if (second ~= player) {
        "Nothing obvious happens.";
    }
    if (location == Inside_the_Orb) {
        move golden_orb to player;
        print "Although nothing seems to happen to you, the whole golden sphere gracefully contracts, pulling itself tight until it sits comfortably in the palm of your hand. You blink.^";
        location = LocationSave;
        move player to ContainerSave;
        R_Process(##Look);
        rtrue;
    }
    FlashFallsOut();
    print "You are engulfed in a cloud of spinning white lights, like insects. When the swarm clears, you find yourself transported...^";
    if (game_section == T_ANCIENT_BRITAIN) {
        loc = Infinity_Symbol;
        remove rod_of_returning2;
    } else {
        i = random(4);
        if (debug_deterministic_transportation == 1) {
            i = 1;
        }
        loc = Attic;
        if (i == 2) {
            loc = Old_Furniture;
        }
        if (i == 3) {
            loc = Old_Winery;
        }
        if (i == 4) {
            loc = Over_the_East_Wing;
        }
    }
    PlayerTo(loc);
    rtrue;
];


[ RodOfHusbandryAction ;        
    if (second == player) {
        "You feel suddenly obedient, and briefly fancy a dog biscuit.";
    }
    if (second == Austin) {
        "Alas, Austin is far, far too undomesticated. It has no effect.";
    }
    if (second == irate_squirrel_friend) {
        "Guided by some animal sixth sense, the squirrel gracefully jumps out of the way.";
    }
    if (second ~= herd_of_goats) {
        "Nothing obvious happens.";
    }
    give herd_of_goats general;
    trigger_quotation(24);
    "The goats suddenly look up at you with awe, although they resume their former interest in eating the grass quite quickly.";
];


[ RodOfBronzeAction ;   
    if (second == player) {
        "You acquire a sudden sun tan, but it soon fades.";
    }
    if (second == Austin) {
        "Austin is already ginger, which is near enough.";
    }
    if (second == adamantine_knight) {
        "He shrugs it off. (Isn't adamantine impressive enough for you?)";
    }
    if (second == metal_wall) {
        give metal_wall open;
        "At once, the bronze polishes up to the shine of a mirror.";
    }
    if (second ~= bronze_mural) {
        "Nothing obvious happens.";
    }
    if (bronze_mural has open) {
        "Nothing further happens.";
    }
    give bronze_mural open;
    "With an awful heaving, wrenching noise, the mural slides a little sideways, opening up a murky downward passage which can't have been used for centuries.";
];


[ RodOfLuckAction ;     
    if (second == player) {
        if (big_electricians_switch has on) {
            "You feel no different. Perhaps there's no such thing as luck.";
        }
        give noun general;
        "You feel optimistic and lucky. Mind you, you feel that most times.";
    }
    if (second == Austin) {
        "Austin is already too lucky by half.";
    }
    if (second == adamantine_knight) {
        "Reassembled after all these years... how lucky can you get?";
    }
    if (second == gambling_sailor) {
        give gambling_sailor lucky;
        "The sailor shudders suddenly.";
    }
    if (second == inscribed_die) {
        give inscribed_die lucky;
        "The die rattles a little, then settles.";
    }
    "Nothing obvious happens.";
];


[ RodOfSacrificeAction ;        
    if (second == herd_of_goats) {
        if (herd_of_goats hasnt general) {
            "The goats mill around too much to aim at one accurately.";
        }
        "Still obedient to your intent, the goats part so that one stands alone. Using this Rod, you vapourise it instantaneously, and the rest contentedly return.^^Do you think there might be a moral to draw here about the use, and abuse, of power?";
    }
    if (second == Austin) {
        trigger_quotation(6);
        "You don't really want to sacrifice Austin.";
    }
    if (second == adamantine_knight) {
        "Would be a shame, after all that surgery.";
    }
    if (second has moved) {
        remove second;
        print "You decide you can manage without ";
        Defart(second);
        ", which you annihilate with the Rod.";
    }
    if (location == Inside_the_Orb && second == array_of_oblong_crystals) {
        if (Inside_the_Orb hasnt general) {
            deadflag = CHECKMATED;
            "The Black pieces make a rash break out of their defences, sacrificing a piece in vain and going down to a rapid defeat as a result.^^The White Queen rises from the board, an avenging angel's smile on her face, and swings a broadsword of burning light across your body...";
        }
        move golden_orb to player;
        give golden_orb general;
        Achieved(SCORE_ORB);
        golden_orb.description = "A treasure in every sense, the orb pulsates with golden radiance.";
        print "The White pieces advance: first a bishop, then a knight is sacrificed, clearing away the wall of pawns which surround the Black king so that a dazzling checkmate can be executed!^^You fade out of the orb as oddly as you came, struck by the way it now almost pulsates in your palm.^";
        move player to ContainerSave;
        location = LocationSave;
        R_Process(##Look);
        rtrue;
    }
    if (second == player) {
        deadflag = DIED;
        "You feel a noble surge of pride as your body is incinerated by the Rod. At least you died for some terribly important cause, although exactly what it was seems to have slipped your mind.";
    }
    "Nothing obvious happens.";
];


[ RodOfLanguageAction ; 
    if (second == player) {
        KnowLanguages = true;
        "Nothing obvious happens. You curse eloquently in Celtic.";
    }
    if (second == surly_shopkeeper) {
        "Nice idea. Now the kiosk-keeper also knows a smattering of Celtic. Unfortunately his national pride is too strong. You'll have to try something else - you have carte blanche to solve this problem.";
    }
    "Nothing obvious happens.";
];


[ RodOfStalkingAction ; 
    if (second == adamantine_knight) {
        "The knight jumps on the spot (landing loudly).";
    }
    if (second == potted_shrub) {
        potted_shrub.initial = "A blooming shrub, gay with red flowers, is being nursed in a wide round tub under the wall here.";
        "The shrub bursts into bloom, flowering all over in dozens of delicate red moons.";
    }
    if (second == marble_rose) {
        "The marble jerks, as if straining to grow, but falls back dead.";
    }
    if (second == small_thorny_tree) {
        if (parent(fig) ~= nothing) {
            "The tree tried hard, but in the end it couldn't give a fig.";
        }
        move fig to player;
        "The tree strains especially hard, and manages to produce another fig, which ripens and falls... you jump forward and catch the fruit just before it would splatter to earth.";
    }
    if (second == player) {
        "Your hair stands momentarily on end, as if it wants to stalk up out of your head, but happily it decides against.";
    }
    if (second == plane_tree && location == Family_Tree) {
        "The tree shakes and shivers, but thankfully remains intact.";
    }
    if (second == wall_of_thorns_object) {
        "Whoosh!^^The thorn wall grows another twenty feet high, then collapses in on itself, settling back like a beast. It is thicker and nastier than ever.";
    }
    if (second ~= runner_bean_plant) {
        "Nothing obvious happens.";
    }
    if (runner_bean_plant has open) {
        "Nothing further happens.";
    }
    give runner_bean_plant open;
    print "^Warning: something extremely cliched is about to happen. When you think you have composed yourself and can stand it, press ENTER. ", '>';
    buffer->1 = 0;
    DrawStatusLine();
    @aread buffer parse -> generic_globvar;
    new_line;
    "Suddenly an enormous beanstalk sprouts out of the ground, exactly as per fairy tale, reaching up high into the sky!  You yawn convulsively.";
];


[ RodOfInfinityAction t ;       
    if (second == adamantine_knight) {
        "Oh, the knight has been nearer the infinite than you could ever take him.";
    }
    if (second == player) {
        "You acquire no especial sense of the infinite.";
    }
    if (location ~= Infinity_Symbol || second ~= lemniscus) {
        "Nothing obvious happens.";
    }
    t = circular_arc.number;
    trigger_quotation(30);
    if (t < 9) {
        "You feel the air charge with excitement, and the symbol glows fiercely gold for a moment, but then the power drains away into one of the empty sockets in the arc.";
    }
    if (noun has general) {
        "Nothing happens this time.";
    }
    print "The air charges with excitement, and the symbol glows fiercely gold, then begins to spin, faster and faster into a pearly golden light with bathes you with the flow of pure magic. ";
    if (spherical_opening hasnt general) {
        "But it is still too weak!  You half-hear, half-imagine a whisper of druids...";
    }
    print "Everything becomes a daze and then you find yourself...^";
    give noun general;
    StartMasterGame();
    rtrue;
];

[ StartMasterGame o sib ;       
    game_section = T_ANCIENT_BRITAIN;
    o = child(player);
    give daisy_chain ~worn;
  .labelXXX;
    if (o ~= nothing) {
        sib = sibling(o);
        give o ~worn;
        move o to Infinity_Symbol;
        o = sib;
        jump labelXXX;
    }
    move historical_pamphlet to player;
    PlayerTo(Murky_Cave);
    rtrue;
];


[ LagachLife i r flag ; 
    if (action == ##Order) {
        flag = true;
        if (painting_of_Mad_Isaac_Meldrewe notin White_Hallway || painting_of_Mad_Isaac_Meldrewe has moved) {
            flag = false;
        }
        if (self == painting_of_Mad_Isaac_Meldrewe && flag == false) {
            "A breeze ripples the canvas of the unanchored painting, but that's all.";
        }
        if (verb ~= ##Lagach) {
            jump labelXXX;
        }
        i = 0;
        if (location == Greek_Frieze1) {
            i = 1;
        }
        if (location == Mosaic) {
            i = 2;
        }
        if (location == Crypt) {
            i = 3;
        }
        if (location == Bohemia) {
            i = 4;
        }
        if (location == Hall_of_Exhibits) {
            i = 5;
        }
        if (location == XIIth_Dynasty_Pyramid) {
            i = 6;
        }
        if (location == White_Hallway) {
            i = 7;
        }
        if (i == 0) {
            jump labelXXX;
        }
        if (tourist_map_of_Paris has moved) {
            "Nothing happens!  Already the druids' magic fades from the earth, and you cannot help feeling saddened.";
        }
        r = carbolic_soap;
      .labelXXX;
        if (r hasnt visited || (r == White_Hallway && flag == false)) {
            if (i++ == 8) {
                i = 1;
            }
            if (i == 1) {
                r = Greek_Frieze1;
            }
            if (i == 2) {
                r = Mosaic;
            }
            if (i == 3) {
                r = Crypt;
            }
            if (i == 4) {
                r = Bohemia;
            }
            if (i == 5) {
                r = Hall_of_Exhibits;
            }
            if (i == 6) {
                r = XIIth_Dynasty_Pyramid;
            }
            if (i == 7) {
                r = White_Hallway;
            }
            jump labelXXX;
        }
        if (r == location) {
            "A swirl of wind almost bowls you over, but nothing else happens.";
        }
        print "A swirl of wind snakes out from ";
        Defart(self);
        print " and whisks you away to...^";
        PlayerTo(r);
        rtrue;
    }
    if (action == ##Ask or ##Answer) {
      .labelXXX;
        "There is, unsurprisingly, no reply.";
    }
    rfalse;
];


[ TarotBefore ; 
    if (action == ##Read) {
        if (self.n_to ~= nothing) {
            print "A beautifully realistic picture. ";
        }
        rfalse;
    }
    rfalse;
];


[ TarotParseName i w ;  
    if (parser_action == ##TheSame) {
        return 65534[?];
    }
  .labelXXX;
    if (1[?] == 1[?]) {
        w = NextWord();
        if (Refers(self,w) == 1) {
            ++i;
        } else if (w == 'cards') {
            parser_action = ##PluralFound;
            ++i;
        } else {
            return i;
        }
        jump labelXXX;
    }
    rfalse;
];


[ TarotShort ;  
    if (listing_together has card && c_style & 4096 == 0) {
        c_style = c_style | (4096 + 8);
        if (c_style & 2 ~= 0) {
            c_style = c_style - 2;
        }
        if (c_style & 1 ~= 0) {
            c_style = c_style - 1;
        }
    }
    rfalse;
];


[ ConsultableParsename ;        
    if (NextWord() == 'books' or 'volumes' or 'tomes') {
        parser_action = ##PluralFound;
        return 1;
    }
    --wn;
    return 65535;
];


[ TorchBefore ; 
    if (action == ##Receive) {
        if (child(self) ~= nothing) {
            "There's a battery in already.";
        }
        if (noun hasnt battery_flag) {
            "Not surprisingly, it won't fit in the battery compartment.";
        }
        rfalse;
    }
    if (action == ##SwitchOn or ##SwitchOff) {
        "There's no switch, just a battery compartment.";
    }
    rfalse;
];


[ TorchAfter bat i ;    
    if (action == ##Open) {
        if (self has light) {
            give self ~light;
            "The torch goes out as you open the battery compartment.";
        }
        "You open the battery compartment of the torch.";
    }
    if (action == ##Close) {
        print "You close the battery compartment of the torch";
        bat = child(self);
        if (bat == obj105_nasty_looking_red_battery) {
            if (game_section == T_MODERN) {
                deadflag = FAILED;
                ", and it explodes with light, becomes hot enough to melt, falls to the floor, catches fire and burns down most of the attic...^^It may be some consolation that since you spend your holiday in the local hospital burns unit, you are never inconvenienced much by not finding the map.";
            } else {
                remove electric_torch;
                ", and it explodes with light, becomes hot enough to melt, falls from your grasp and perishes away to nothing.";
            }
        }
        if (bat == new_battery) {
            Achieved(SCORE_TORCH);
        }
        if (bat == old_smudged_battery or new_battery) {
            i = bat.number;
            if (i == 0) {
                ", but the battery must be dead because nothing happens.";
            }
            give self light;
            if (i > 5) {
                ", and it lights up brightly.";
            }
            ", and it lights up feebly.";
        }
        ".";
    }
    rfalse;
];


[ TorchTimer o n ;      
    if (self hasnt on) {
        rfalse;
    }
    o = child(self);
    if (o == nothing) {
        rfalse;
    }
    n = o.number - 1;
    if (n < 200) {
        o.number = n;
    }
    if (n == 2) {
        print "^The torch flickers ominously.^";
    }
    if (n == 0) {
        print "^The torch finally dies out.^";
        give electric_torch ~light;
        trigger_quotation(8);
    }
    rfalse;
];


[ BiscuitAfter ;        
    if (action == ##Eat) {
        Achieved(SCORE_BISCUIT);
        rfalse;
    }
    rfalse;
];


[ TrapdoorBefore ;      
    if (action == ##LookUnder) {
        if (antique_jewellery_box hasnt concealed) {
            rfalse;
        }
        give antique_jewellery_box ~concealed;
        move antique_jewellery_box to Attic;
        "You discover a lady's jewellery box under the trapdoor!";
    }
    rfalse;
];


[ TrapdoorAfter ;       
    if (action == ##Open) {
        give self light;
        rfalse;
    }
    if (action == ##Close) {
        give self ~light;
        if (antique_jewellery_box has concealed) {
            give antique_jewellery_box ~concealed;
            move antique_jewellery_box to Attic;
            "You close the trapdoor, surprised to see that something shiny was obscured by it.";
        }
        "You close the trapdoor once more. No more jewellery boxes though.";
    }
    rfalse;
];


[ TeachestsBefore ;     
    if (action == ##Search) {
        print "That was the first place you tried, hours and hours ago now";
        if (Meldrewes_History has concealed) {
            print ", and there's nothing there but that boring old book. You pick it up anyway, bored as you are";
            trigger_quotation(33);
            give Meldrewes_History ~concealed;
            move Meldrewes_History to player;
        }
        ".";
    }
    rfalse;
];


[ HistoryBefore w ;     
    if (action == ##Consult) {
        wn = consult_from;
        w = NextWord();
        if (w == 'mad' or 'sir' or 'honourable') {
            w = NextWord();
        }
        generic_globvar = w;
        if (generic_globvar == 35760['me'?] or 36156['myself'?] or 38811['self'?]) {
            trigger_quotation(48);
            "Perhaps you may one day earn a place in vol. III.";
        }
        if (generic_globvar == 37083['peter'?]) {
            "Modestly, the author (died 1940 or so?) missed himself out.";
        }
        if (generic_globvar == 34887['jemima'?]) {
            "She's far too recent to be included.";
        }
        if (generic_globvar == 34842['isaac'?]) {
            "Mad Isaac (1705-1792) went in for mystic experiments of all kinds, and was a noted antiquarian. He believed that the Meldrew family had an ancestral curse, dooming each member to undertake a futile quest. The only way to break the curse, he thought, was for one of them to actually succeed... unfortunately he died in peculiar circumstances before finding out how.^^Then again, he also believed that King Arthur's wizard Merlin was buried not in a Tintagel cave, as is usually claimed, but somewhere in the back garden (near where the motorway is now), and that the moon is a giant pair of black and white discs towed through the night sky by a team of angels.";
        }
        if (generic_globvar == 32646['ebenezer'?]) {
            "It seems Ebenezer (1846-1908), the younger of a pair of twins, threw up a promising career in the East India Company one day, took a packet steamer to Cape Colony and simply marched off into the bush on a quest to find a legendary river. His maps were used for several years after, and a province was named after him for a while, but the locals call it something else now.";
        }
        if (generic_globvar == 38217['roger'?]) {
            "Roger (1846-1913), the elder of a pair of twins, was very Victorian indeed, especially in his disapproval of his beautiful young wife's literary career. He thought her romances so immoral that he refused to allow the family name to appear on them. A prominent local vestryman, his own writing was confined to a great many monographs on the problems of municipal drainage, but he died before his grand National Sewerage Plan was complete.";
        }
        if (generic_globvar == 31044['capability'?] or 41331['willard'?]) {
            "~Capability~ Meldrew (1761-1817) became a mildly celebrated landscape gardener, starting a brief fashion for crypts and memorials as garden ornaments (he claimed it was closer to nature). Very little of his work now survives. His real name, incidentally, was Willard.";
        }
        if (generic_globvar == 34275['henri'?]) {
            "Very little is known about Henri, who lived at some time in the fifteenth century. As a young man he fought at Agincourt, and seems to have been some kind of combat engineer. The story goes that he acquired his nickname, The Black Post, from a joke made by the King when he was standing up to his waist in a ditch. He must have been proud of it because his coat of arms bears his name written down the left hand side, and Black Post down the right.^^In his later years he became morbidly possessed, and (according to legend) spent his declining years working on his own tomb, which he insisted would be of celestial importance.";
        }
        if (generic_globvar == 34230['helene'?]) {
            "Helene Meldrew (1902-) is a noted painter and sculptress. Her relations with the family were broken off in the 20s when she married Anton and ran off to Paris to study art, but she has recently returned to the House, in search (as she puts it) of ~the perfect blue, the blue of the sky, the blue of water~. We wish her well.";
        }
        if (generic_globvar == 29964['anton'?] or 39351['smyslov'?]) {
            "Anton Smyslov shouldn't really be in the book, even if he did marry Helene, but there is a brief passage, since he was so famous - he was a chess grandmaster, and won the Paris Open five years running in the 1930s. His speciality was bold sacrificial attacks, but he was also notorious for eating blueberry yoghurt at the board.";
        }
        if (generic_globvar == 29784['alison'?]) {
            "Under the pseudonym Marie Swelldon, your ancestress Alison (1871-1930) wrote several mildly successful romances. She obsessively collected lucky charms, and advertised in newspapers for double-headed coins and the like (although she never traced a rumoured find of a five-leafed clover, somewhere in County Donegal).^^In order to write in tranquillity and to avoid her husband, it was she who installed the fake wall at the far south end of the attic east wing, and each afternoon she would sneak upstairs to push it aside.";
        }
        if (generic_globvar == 34923['joshua'?]) {
            "Oh dear, the deeply regrettable Sir Joshua Meldrewe (1710-1776). Member of the Dilletanti Society and the Hell-Fire Club, and a politician (chancellor of the exchequer 1762-3; ~probably the least competent minister ever to hold that office~ - Oxford History of England, vol. xii).^^", "His father disinherited him for wildly excessive living (he almost invariably wore jewelled buttons worth at least a thousand pounds) and for marrying a lady of easy virtue while on the run from a prison in France, where he was sentenced to be beheaded. In order to stop his sister getting the fortune, he went back to Italy and advertised for a pregnant bride to provide a male heir. This nefarious plot was foiled when he choked to death on a chicken-bone.^^It is said that he stole the money anyway near the end, and certainly some gold went missing. (He also managed to get the family stripped of its baronetcy by cheating at piquet with the Prince of Wales.)";
        }
        if (generic_globvar == 34131['hartley'?]) {
            "Your distant great-uncle Hartley was a tiresomely enthusiastic amateur Egyptologist who, every Christmas, used to sit you on his knee and drone on about trenches and writings and the fellaheen. It was all a bit of a fraud, you now discover, since he only actually went to Egypt once - there was such a scandal about his refusal to donate his best find to the British Museum that he was never allowed to excavate again, though he spent years writing in vain to the Egyptian government.";
        }
        if (generic_globvar == 33681['gerard'?]) {
            "Roger's eldest son Gerard (1898-1916) was killed in the Battle of the Somme. His mother, ~Marie Swelldon~, gave up writing afterwards.";
        }
        if (generic_globvar == 30234['austin'?]) {
            "Austin's quite venerable for a cat, but not that old.";
        }
        if (generic_globvar == 40512['tobias'?]) {
            "Tobias Meldrew (1801-1870) was Professor of Theology at Christminster, 1850-66. He set himself the task of proving the existence of God from first principles, a task which he announced in 1860 that he had accomplished with the aid of ten thousand intermediate lemmas. The derision which greeted his attempts to publish the mammoth work eventually drove him insane, and he spent the last four years of his life in the madhouse.";
        }
        "Annoyingly there's no index (there was going to be a consolidated one in vol. I) and you can't find what you want.";
        rfalse;
    }
    rfalse;
];


[ HouseAfter ;  
    if (tourist_map_of_Paris in player || (tourist_map_of_Paris in canvas_rucksack && canvas_rucksack in player)) {
        deadflag = WON;
        "You have succeeded in shaking off the Curse of the Meldrews: for the first time in sixty generations, a Meldrew has found the useless object he was doomed to seek!  Unfortunately on the way to the airport you realise that you left the map on the kitchen table in all the rush, but never mind, you're on holiday now.";
    }
    deadflag = FAILED;
    "Yes, probably just as well to give up looking, and heaven knows there's enough packing to do, what with the rest of the family in uproar. Oh well.";
];


[ ServantsRoomBefore ;  
    if (action == ##Sleep) {
        if (carbolic_soap hasnt concealed) {
            "Racked with guilt over your bad language, you are unable to nod off.";
        }
        if (player notin servants_bed) {
            rfalse;
        }
        if (Austin in location) {
            "Austin leaps up onto the bed, jumps around for a bit, and then falls back onto the floor. You are unable to get any sleep.";
        }
        if (servants_bed has general) {
            "You doze awhile, but that's all.";
        }
        give servants_bed general;
        print "You sleep unexpectedly deeply, but just as you think you are starting to wake up, you experience a sudden...^";
        PremonitionStart();
        rtrue;
    }
    rfalse;
];


[ DictionaryBefore w ;  
    if (action == ##Consult) {
        wn = consult_from;
        w = NextWord();
        if (Homer has general && Homer.number < 3 && Homer in location) {
            HomerSleeps();
            print "~Well, if you're going to cheat, forget it,~ says Homer loudly as he falls asleep.^^";
        }
        if (w == 'galita') {
            "Minor deity of tombs, reincarnated from a fly who flew into setting amber.";
        }
        if (w == 'menelaus') {
            "General in Trojan War, and brother of Agamemnon.";
        }
        if (w == 'agamemnon') {
            "General in Trojan War, and brother of Menelaus.";
        }
        if (w == 'ares') {
            "Greek god of war.";
        }
        if (w == 'chlamys') {
            "An emperor's (rectangular) cloak.";
        }
        if (w == 'husbandry') {
            "Not this dictionary!";
        }
        if (w == 'hades') {
            "Underworld of spirits.";
        }
        if (w == 'adamantine') {
            "Hardest stone known to the ancients.";
        }
        if (w == 'iliad' or 'odyssey') {
            "Epic by Homer.";
        }
        if (w == 'helicon') {
            "Mythical mountain of poets and muses.";
        }
        if (w == 'hephaestus') {
            "Greek god of blacksmiths and master of metals.";
        }
        if (w == 'pan') {
            "Greek god of pastures and shepherds; player of the syrinx, or pipes.";
        }
        if (w == 'demeter') {
            "Greek goddess of plenty.";
        }
        if (w == 'poseidon') {
            "Greek god of the sea, and of horses.";
        }
        if (w == 'apollo' or 'loxias') {
            "Greek god of words, music and poetry.";
        }
        if (w == 'zeus') {
            "Greek ruler of the gods.";
        }
        if (w == 'leda') {
            "Mortal woman seduced by Zeus, who appeared to her in the form of a swan.";
        }
        if (w == 'hera') {
            "Jealous wife of Zeus.";
        }
        if (w == 'aphrodite') {
            "Greek goddess of beauty.";
        }
        if (w == 'athene') {
            "Greek goddess of wisdom.";
        }
        if (w == 'diana') {
            "Goddess of hunting, the underworld (with Pluto) and the moon.";
        }
        if (w == 'selenae') {
            "Mythical island mountain home of Diana.";
        }
        if (w == 'sosostris') {
            "Mythical pharoah of Egypt, after whom a curious cult rose: sometimes confused with Alexander the Great.";
        }
        if (w == 'pluto') {
            "Canine Walt Disney character, after whom the planet is named.";
        }
        if (w == 'dionysus') {
            "Greek god of wine, and revelry.";
        }
        if (w == 'furies' or 'curses' or 'eumenides') {
            "Eternally pursuing Greek goddesses, they enforced divine rules by punishing the families of miscreants through all time.";
        }
        if (w == 'omphalos') {
            "Fabled to be the stone at the centre (literally ~navel~) of the world.";
        }
        if (w == 'oracle' or 'pythian') {
            "Priestess of Apollo: her predictions were legendary for their accuracy, and also their difficulty to interpret.";
        }
        if (w == 'pharos') {
            "Lighthouse-tower. The great one at Alexandria was one of the Seven Wonders of the World.";
        }
        if (w == 'aeschylus') {
            "The first great tragic playwright (525 - c.456 BC).";
        }
        if (w == 'kraken') {
            "Legendary sea-monster of Poseidon (though the word derives from the Norwegian - not a lot of people know that).";
        }
        if (w == 'andromeda') {
            "Maiden sacrificed to a sea-monster, according to myth eventually saved by Perseus.";
        }
        if (w == 'perseus') {
            "Greek hero and slayer of monsters.";
        }
        if (w == 'syrinx') {
            "Pan-pipes: reed-cut.";
        }
        if (w == 'homer') {
            "Earliest poet of the Greek tradition, legendarily blind: nothing is known about him, except that he (supposedly) wrote the ~Iliad~ and the ~Odyssey~.";
        }
        if (w == 'ekmek' or 'eraina') {
            "The Ekmek Special is a delicacy still served to this day by the Eraina Taverna, Free School Lane, Cambridge, England. Much prized by itinerant mathematicians.";
        }
        if (w == 'callimachus') {
            "Cataloguer of the Alexandrian library: most famous of all the wittily brief epigrammatic poets.";
        }
        if (w == 'apollonius') {
            "Librarian, mathematician, epic poet, politician.";
        }
        if (w == 'arthur') {
            "Half-mythical High King of the Britons.";
        }
        if (w == 'merlin' or 'merlyn') {
            "Half-mythical wizard to the court of King Arthur.";
        }
        if (w == 'alexandria') {
            "City on the Nile Delta founded by Alexander the Great.";
        }
        if (w == 'alexander') {
            "Macedonian who conquered the known world in his twenties.";
        }
        if (w == 'ptolemy') {
            "General of Alexander the Great, governed and later inherited Egypt.";
        }
        if (w == 'odysseus' or 'ulysses') {
            "Wasn't he a sailor?";
        }
        "Sorry, there's nothing on that.";
    }
    rfalse;
];


[ WhistleBefore ;       
    if (action == ##Blow) {
        if (gas_mask has worn) {
            "With the gas mask on?";
        }
        print "Fweep!  Fweep!^";
        if (Austin in location) {
            print "^Austin is startled, but too lazy to look up.^";
        }
        if (location == Hedgery) {
            "^The sparrows swoop down and around you, but rapidly lose interest.";
        }
        if (location == Summer_House) {
            if (flock_of_sparrows has general) {
                "^But the sparrows cannot hear.";
            }
            if (gold_watch_on_a_chain has moved) {
                "^But the sparrows are wise to that one.";
            }
            give gold_watch_on_a_chain moved;
            give flock_of_sparrows general;
            remove irate_squirrel_friend;
            Achieved(SCORE_WATCH);
            "^The sparrows swoop down onto the roof, battering against the glass. In the process the gold watch comes loose, and falls to the ground with a disconcerting thud.^^It just misses the squirrel, who bolts away, startled.^^The sudden motion once more disturbs the flighty sparrows, who take to the skies. You feel rather deserted all of a sudden.";
        }
        if (location == Cliffs or Cave_Mouth) {
            "^The sacred falcon of Apollo wheels high in the sky over the cave mouth, but then flies away.";
        }
        if (location == Necropolis && unexciting_tombstone in nothing) {
            move cloak_of_many_colours to Necropolis;
            move unexciting_tombstone to Necropolis;
            Necropolis.d_to = unexciting_tombstone;
            "^The birds of prey swoop, startled, down to an unexciting tombstone which you hadn't noticed before; but after a moment they relax and slip away into the darkness.";
        }
        if (location == Hollow && corn_crake in Hollow) {
            "Although seemingly distractable, the corn crake must be stone deaf. (You vaguely recall reading somewhere that corn crakes are the noisiest birds in Ireland, famous for keeping farm-hands awake at night.)";
        }
        rtrue;
    }
    rfalse;
];


[ ParcelBefore ;        
    if (action == ##Open) {
        remove gift_wrapped_parcel;
        move postcard_of_the_Champs_Elysees to player;
        move box_of_chocolates to player;
        move wrapping_paper to location;
        "You tear open the parcel to find a box of chocolates and a card.";
    }
    rfalse;
];


[ PostcardAfter ;       
    if (action == ##Read && location == Dark_Room && Dark_Room has light) {
        Achieved(SCORE_HAMBURG);
        trigger_quotation(31);
        "^No... wait. The eerie lamp-light is bringing out a message in invisible ink:^^   Hamburg 1420^^   Ticket 7.-^^The seven is crossed through in continental fashion.";
    }
    rfalse;
];


[ MedicineShort ;       
    if (self hasnt locked) {
        print "cracked medicine bottle";
    } else {
        print "guaranteed-unbreakable medicine bottle with a child-proof lock";
    }
    rtrue;
];


[ MedicineBefore ;      
    if (action == ##Attack) {
        "You become extremely violent in your attempt, but the glass resists all attacks. Whatever would it take to break the dratted thing?";
    }
    if (action == ##Open) {
        if (self hasnt locked) {
            rfalse;
        }
        "You try absolutely everything. Pushing the top down, turning it, pulling it, putting it on the floor and jumping up and down on it, everything. It is resolutely adult-proof. Whatever would it take to break the dratted thing?";
    }
    if (action == ##Receive) {
        if (self has open && noun ~= red_tablet) {
            "The neck is too narrow to fit anything but the pill.";
        }
        rfalse;
    }
    rfalse;
];


[ TabletAfter ; 
    if (action == ##Eat) {
        give player ~general;
        tablet_eaten = true;
        "It tastes alarmingly of chocolate.";
    }
    rfalse;
];


[ OverEastWingInitial ; 
    if (Austin in self) {
        StartDaemon(Austin);
    }
    rfalse;
];


[ AustinBefore ;        
    if (action == ##Rub or ##Touch or ##Squeeze) {
        "Austin curls about your foot implacably.";
    }
    if (action == ##Take) {
        "Austin sidles out of reach resentfully, then belches.";
    }
    if (action == ##Pull) {
        "Austin hisses and will not be pulled by the tail.";
    }
    if (action == ##Push) {
        "Perhaps you should say which way to push Austin.";
    }
    if (action == ##PushDir) {
        if (location == Attic && inp2 == n_obj or e_obj or s_obj) {
            ! no code
        } else if (location == Old_Winery && inp2 == w_obj or s_obj) {
            ! no code
        } else if (location == Conservatory && inp2 == w_obj or e_obj) {
            ! no code
        } else if (location == Old_Furniture && inp2 == n_obj or se_obj) {
            ! no code
        } else if (location == Servants_Room && inp2 == w_obj) {
            ! no code
        } else if (location == Over_the_East_Wing && inp2 == nw_obj or s_obj or w_obj) {
            ! no code
        } else if (location == Over_the_East_Wing or Dark_Room && inp2 == e_obj) {
            ! no code
        } else if (location == East_Annexe && inp2 == w_obj) {
            ! no code
        } else if (location == Disused_Observatory && inp2 == n_obj or s_obj) {
            ! no code
        } else if (location == Souvenirs_Room && inp2 == n_obj) {
            ! no code
        } else {
            "Austin refuses to go that way.";
        }
        AllowPushDir();
        give self moved;
        rtrue;
    }
    rfalse;
];


[ AustinAfter ; 
    if (action == ##PushDir) {
        "Austin reluctantly accompanies you.";
    }
    rfalse;
];


[ AustinLife ;  
    if (action == ##Attack) {
        "It is so pathetically easy to kick Austin that you never quite have the heart. Thus he outwits you again.";
    }
    if (action == ##Order or ##Answer) {
        "I can see you've never had a cat.";
    }
    if (action == ##Ask) {
        "Austin belches splendidly by way of reply.";
    }
    if (action == ##Kiss) {
        "Austin (just) tolerates this show of affection.";
    }
    if (action == ##Give or ##Show) {
        if (noun == chicken_wishbone) {
            GoodTry();
            "Some cats do like the smell of chicken bones, but Austin doesn't.";
        }
        if (noun == robot_mouse) {
            move robot_mouse to location;
            "Austin claws it to the ground, captiously.";
        }
        if (noun has edible) {
            "For once, Austin is not really hungry.";
        }
        print "Austin is unimpressed with ";
        Defart(noun);
        ".";
    }
    rfalse;
];


[ AustinDemon i ;       
    if (self has moved) {
        give self ~moved;
        rfalse;
    }
    if (game_section ~= T_MODERN or T_ALEXANDRIA) {
        rfalse;
    }
    if (game_section == T_ALEXANDRIA) {
        if (Austin notin location) {
            rfalse;
        }
        print "^Austin ";
        i = random(6);
        if (i == 1) {
            print "preens himself";
        }
        if (i == 2) {
            print "wriggles";
        }
        if (i == 3) {
            print "springs about";
        }
        if (i == 4) {
            print "frisks";
        }
        if (i == 5) {
            print "purrs";
        }
        if (i == 6) {
            print "hisses";
        }
        i = random(3);
        if (i == 1) {
            " contentedly.";
        }
        if (i == 2) {
            " happily.";
        }
        " cheerfully.";
    }
    AustinMovements(false);
    rfalse;
];

[ AustinMovements to_current env i newroom ;    
    env = parent(Austin);
    newroom = invalidObj65535;
    if (to_current == true) {
        env = location;
    } else {
        if (env == Potting_Room) {
            move Austin to Conservatory;
            if (location == Potting_Room) {
                "^Jemima catches sight of Austin, and without warning jumps on the spot, startling him. He springs away, hissing.";
            }
            if (location == Conservatory) {
                "^Austin springs in from the potting room like a scalded cat, but hastily rearranges himself to his usual ~cool slob~ demeanour.";
            }
            rfalse;
        }
        i = random(10);
        if (i > 8) {
            ! no code
        } else {
            if (env ~= location) {
                rfalse;
            }
            if (robot_mouse in location) {
                "^Austin plays with the robot mouse, kicking it wildly across the floorboards. It beeps piteously, hoping to be rescued.";
            }
            if (location == East_Annexe && random(2) == 1) {
                "^Austin scuffles with the insulation rolls, as if trying to bury something.";
            }
            if (location == Dark_Room && random(2) == 1) {
                "^Austin jumps up at the cord, but falls back down again, growling.";
            }
            if (i == 1) {
                "^Austin yawns.";
            }
            if (i == 2) {
                "^Austin rolls over on his back and stretches.";
            }
            if (i == 3) {
                "^Austin looks ineffable again.";
            }
            if (i == 4) {
                "^Austin purrs and licks one of his paws.";
            }
            rfalse;
        }
        if (env == House && hinged_trapdoor hasnt open) {
            if (location == Attic) {
                "^There is a faint scratching noise at the trapdoor.";
            }
            rfalse;
        }
        if (env == House) {
            move Austin to Attic;
            if (location == Attic) {
                "^Austin, your ginger cat, jumps up through the trap door.";
            }
        }
        if (env == Attic && hinged_trapdoor has open && i == 10) {
            move Austin to House;
            if (location == Attic) {
                "^Austin, bored again, disappears through the trap door.";
            }
        }
    }
    if (env == Attic) {
        i = random(3);
        if (i == 1) {
            newroom = Old_Furniture;
        }
        if (i == 2) {
            newroom = Old_Winery;
        }
        if (i == 3) {
            newroom = Servants_Room;
        }
    }
    if (env == Servants_Room) {
        newroom = Attic;
    }
    if (env == Old_Furniture) {
        if (i == 9) {
            newroom = Attic;
        } else {
            newroom = Over_the_East_Wing;
        }
    }
    if (env == Over_the_East_Wing) {
        i = random(4);
        if (i == 1) {
            newroom = Old_Furniture;
        }
        if (i == 2) {
            newroom = East_Annexe;
        }
        if (i == 3) {
            newroom = Dark_Room;
        }
        if (i == 4) {
            newroom = Disused_Observatory;
        }
    }
    if (env == East_Annexe) {
        newroom = Over_the_East_Wing;
    }
    if (env == Dark_Room) {
        newroom = Over_the_East_Wing;
    }
    if (env == Disused_Observatory) {
        if (slide_projector has on && projector_reversed ~= false && to_current == false) {
            if (location == Disused_Observatory) {
                "^Austin seems fascinated by the beam of light.";
            }
            rfalse;
        }
        i = random(3);
        if (i == 1) {
            newroom = Over_the_East_Wing;
        }
        if (i == 2) {
            newroom = Library_Storage;
        }
        if (i == 3) {
            newroom = Souvenirs_Room;
        }
    }
    if (env == Library_Storage) {
        newroom = Disused_Observatory;
    }
    if (env == Souvenirs_Room) {
        if (slide_projector has on && to_current == false) {
            if (location == Souvenirs_Room) {
                "^Austin stares curiously at the slideshow.";
            }
            rfalse;
        }
        newroom = Disused_Observatory;
    }
    if (env == Old_Winery) {
        i = random(2);
        if (i == 1) {
            newroom = Attic;
        }
        if (i == 2) {
            newroom = Conservatory;
        }
    }
    if (env == Conservatory) {
        i = random(2);
        if (i == 1) {
            newroom = Potting_Room;
        }
        if (i == 2) {
            newroom = Old_Winery;
        }
    }
    if (newroom == invalidObj65535) {
        rfalse;
    }
    move Austin to newroom;
    if (location == env or newroom) {
        if (to_current == false) {
            print "^Austin ";
            i = random(10);
            if (i == 1) {
                print "sidles";
            }
            if (i == 2) {
                print "ambles";
            }
            if (i == 3) {
                print "strolls";
            }
            if (i == 4) {
                print "runs";
            }
            if (i == 5) {
                print "oozes";
            }
            if (i == 6) {
                print "scurries";
            }
            if (i == 7) {
                print "tiptoes";
            }
            if (i == 8) {
                print "leaps";
            }
            if (i == 9) {
                print "crawls";
            }
            if (i == 10) {
                print "rolls";
            }
            if (location == env) {
                print " away to ";
                i = newroom;
            } else {
                print " in from ";
                i = env;
            }
        } else {
            print "to ";
            i = newroom;
        }
        print "the ";
        if (i == 35) {
            "attic.";
        }
        if (i == 47) {
            "furniture store.";
        }
        if (i == 103) {
            "winery.";
        }
        if (i == 42) {
            "servant's bedroom.";
        }
        if (i == 107) {
            "conservatory.";
        }
        if (i == 112) {
            "potting room.";
        }
        if (i == 57) {
            "east landing.";
        }
        if (i == 74) {
            "annexe.";
        }
        if (i == 59) {
            "dark room.";
        }
        if (i == 64) {
            "observatory.";
        }
        if (i == 71) {
            "souvenirs room.";
        }
        if (i == 67) {
            "book store.";
        }
        "cold.";
    }
    rtrue;
];


[ DarkRoomAfter ;       
    if (action == ##Look) {
        if (self has light) {
            print "^The room is filled with an eerie, reddish light. You feel gloomy and can't help thinking about aviation accident statistics.^";
        }
        rfalse;
    }
    rfalse;
];


[ HangingCordBefore ;   
    if (action == ##Pull) {
        print "Click!  ";
        if (Dark_Room has light) {
            give Dark_Room ~light;
            remove red_lamp;
            "The lamp goes out.";
        }
        give Dark_Room light;
        move red_lamp to Dark_Room;
        "A developing lamp comes on, emitting an eerie red light.";
    }
    rfalse;
];


[ FlashAFter ;  
    if (action == ##Receive) {
        generic_globvar = 0;
        if (child(self) ~= nothing) {
          .labelXXX;
            ++generic_globvar;
            @get_sibling SP -> SP ?labelXXX;
        }
        @add SP generic_globvar -> SP;
        @je SP 2[?] ?~labelXXX;
        "The flash is full already.";
      .labelXXX;
        if (noun == timer_detonator) {
            rfalse;
        }
        if (noun hasnt battery_flag) {
            "Only batteries and timers will fit in.";
        }
        if (child(self) has battery_flag) {
            "There is already a battery inside, and there's only room now for a timer.";
        }
        rfalse;
    }
    rfalse;
];


[ ObservatoryAfter ;    
    if (action == ##Look) {
        if (slide_projector hasnt on || projector_reversed == false) {
            rfalse;
        }
        print "^A beam of white light runs into the room from the slide projector to the south, and hits the ";
        if (solid_glass_ball hasnt general) {
            "opaque glass ball.";
        }
        print "glass ball, which ";
        ObservatoryDiffraction();
        rtrue;
    }
    rfalse;
];

[ ObservatoryDiffraction card ; 
    card = child(slide_projector);
    if (card == nothing) {
        "diffracts it into a beautiful spectrum across the ceiling.";
    }
    if (card == Eight_of_Wands_card) {
        "throws it into a straight rod of white light across one wall.";
    }
    if (card == Castle) {
        "spins it about wildly, as if it were a strobe light at a discotheque.";
    }
    if (card == Star) {
        "amplifies it into a powerful yellow searchlight which slowly turns about the room.";
    }
    if (card == Crescent_Moon) {
        "throws it in a crescent against one wall.";
    }
    print "somehow bends it so that it strikes the mural at the sign of ";
    if (card == miniature) {
        "Scorpio.";
    }
    if (card == Maiden_card) {
        "Virgo.";
    }
    if (card == Ace_of_Cups_card) {
        "Aquarius.";
    }
    if (card == Death_card) {
        "Cancer.";
    }
    if (card == Drowned_Sailor_card) {
        "Pisces.";
    }
    if (card == Fool_card) {
        print "Capricorn.^";
        TriggerAlert();
        Achieved(SCORE_SMOKE);
        rtrue;
    }
    if (card == charcoal_sketch) {
        "Leo.";
    }
    rtrue;
];

[ TriggerAlert ;        
    if (fire_escape in Dead_End) {
        rfalse;
    }
    Dead_End.e_to = fire_escape;
    Dead_End.d_to = fire_escape;
    move fire_escape to Dead_End;
    Beside_the_Drive.u_to = Dead_End;
    Beside_the_Drive.w_to = Dead_End;
    give Dead_End light;
    "^Your footfall causes the crystal ball to wobble fractionally, just enough for the beam of light to cross the smoke detector. Click! and then some electronic bleeping. Little servo motors fire lethargically into life, then collapse in exhaustion. The alarm soon runs down to a tiny drone, then silence.^^But there's quite a loud report from off to the east somewhere.";
];


[ GlassBallBefore i ;   
    if (action == ##Rub) {
        give self general;
        if (projector_reversed == true && slide_projector has on) {
            print "You polish the ball to a nice shine, and get out of the way of the beam. Now the glass ball ";
            ObservatoryDiffraction();
            rtrue;
        }
        "You polish the ball to a nice shine.";
    }
    if (action == ##Read or ##Search) {
        if (self hasnt general) {
            "The ball is scratched and misted up.";
        }
        trigger_quotation(32);
        i = random(12);
        print "In the ball mists swirl, then part to show ";
        if (i == 1) {
            "a reflection of your face.";
        }
        if (i == 2) {
            "a dizzying aerial view of Meldrew Hall gardens.";
        }
        if (i == 3) {
            "confused pictures of a tree being planted.";
        }
        if (i == 4) {
            "an image of a typist, home from work and wandering about her bedsit room.";
        }
        if (i == 5) {
            "a dark picture of a museum display case.";
        }
        if (i == 6) {
            "an Old Master painting, perhaps a Watteau, of a scene from classical mythology.";
        }
        if (i == 7) {
            "an oddly-angled view of a Roman villa half in ruins.";
        }
        if (i == 8) {
            "a flickery view of faces round a camp fire.";
        }
        if (i == 9) {
            "a dark, spooky view of a crypt.";
        }
        if (i == 10) {
            "a dreamy, enclosed view of somewhere half-familiar.";
        }
        if (i == 11) {
            "a sketch of a great marble palace.";
        }
        if (i == 12) {
            "a vision of English countryside.";
        }
        rfalse;
    }
    rfalse;
];


[ WaterPipeBefore ;     
    if (action == ##TurnWith) {
        if (second ~= steel_wrench) {
            CDefart(second);
            " proves inadequate as a plumbing tool.";
        }
        R_Process(##Turn,self);
        rtrue;
    }
    if (action == ##Repair or ##Turn) {
        if (steel_wrench has general) {
            "The joint is fairly safe already.";
        }
        if (steel_wrench notin player) {
            if (old_gardeners__gloves in player && old_gardeners__gloves has worn) {
                "Even with gloves on you are unable to tighten the joint without some sort of tool.";
            }
            "With your bare hands, you are unable to tighten the joint.";
        }
        give steel_wrench general;
        Achieved(SCORE_PLUMBING);
        give book_of_Twenties_poetry ~concealed;
        give book_of_Twenties_poetry moved;
        give romantic_novel ~concealed;
        give romantic_novel moved;
        "You tighten the joint with the wrench, just enough for the books to fall away without a gushing explosion of water.";
    }
    rfalse;
];


[ RomanticNovelBefore ; 
    if (action == ##Take) {
        if (steel_wrench hasnt general) {
            PlumbingDisaster();
            rtrue;
        }
        rfalse;
    }
    if (action == ##Read) {
        if (steel_wrench hasnt general) {
            "You can't read it while it's holding the pipe up.";
        }
        trigger_quotation(35);
        rfalse;
    }
    rfalse;
];


[ PoetryBefore ;        
    if (action == ##Take) {
        if (steel_wrench hasnt general) {
            PlumbingDisaster();
            rtrue;
        }
        rfalse;
    }
    if (action == ##Read) {
        if (steel_wrench hasnt general) {
            "You can't read it while it's holding the pipe up.";
        }
        if (location == thedark) {
            "1920s poetry may be literarily enlightening, but not literally. It is, in fact, too dark to make out the print.";
        }
        if (location == Lighthouse) {
            "The glare of the sun off the ocean is too bright to make out the words without giving you a headache.";
        }
        print "Publishers talk a lot of nonsense about readers being transported away by books, but somehow you have arrived in the...^";
        move book_of_Twenties_poetry to location;
        PlayerTo(Unreal_City);
        rtrue;
    }
    rfalse;
];

[ PlumbingDisaster ;    
    deadflag = FAILED;
    "As you pull the book away, the pipe bursts and sprays water everywhere, drenching you, rendering the book unreadable, leaking through the ceiling into the bedrooms below and causing an enormous furore. You are obliged to spend the rest of the afternoon getting a plumber at short notice.";
];

[ WallDisplay o ;       
    print "the picture on ";
    Defart(o);
    if (o.n_to == nothing) {
        ".";
    }
    ", beautifully magnified and amazingly life-like. Why, you'd hardly know there was a wall there at all.";
];


[ SouvenirsRoomBefore o ;       
    if (action == ##Read) {
        if (noun == s_obj && slide_projector has on) {
            o = child(slide_projector);
            if (o == nothing) {
                "The south wall is lit up by the projector.";
            }
            print "The south wall shows ";
            WallDisplay(o);
            rtrue;
        }
        rfalse;
    }
    rfalse;
];


[ SouvenirsRoomAfter o ;        
    if (action == ##Look) {
        if (slide_projector hasnt on) {
            rfalse;
        }
        o = child(slide_projector);
        if (o == nothing) {
            print "^The south wall is lit up by the projector.^";
        } else {
            print "^The south wall displays ";
            DisplayCardDesc(o);
        }
        if (projector_reversed == true) {
            "^A beam of white light points directly backward from the projector, through the north doorway into the Observatory.";
        }
        rtrue;
    }
    rfalse;
];


[ SouvenirsRoomSouth ;  
    R_Process(##Enter,south_wall);
    rtrue;
];


[ ProjectorBefore ;     
    if (action == ##Receive) {
        if (child(self) ~= nothing) {
            "There's a slide in already.";
        }
        if (noun == postcard_of_the_Champs_Elysees) {
            print "The postcard is just too large to fit.^";
            GoodTry();
            rtrue;
        }
        if (noun == framed_charcoal_sketch) {
            print "The frame is too bulky.^";
            GoodTry();
            rtrue;
        }
        if (noun == charcoal_sketch or miniature) {
            rfalse;
        }
        if (noun hasnt card) {
            "It won't fit. There's only room for something flat and the size of, say, a playing card.";
        }
        rfalse;
    }
    if (action == ##Turn) {
        if (projector_reversed == true) {
            projector_reversed = false;
            if (self has on) {
                give Disused_Observatory ~light;
                "The sharp beam of light cuts out again.";
            }
            "Click.";
        }
        projector_reversed = true;
        if (self has on) {
            give Disused_Observatory light;
            "A sharp beam of white light appears backward out of the projector. As you step out of the beam, it extends dead straight through the north doorway.";
        }
        "Click.";
    }
    rfalse;
];


[ ProjectorAfter o ;    
    if (action == ##Receive) {
        if (self has on) {
            ToggleSouthWall(noun);
            rtrue;
        }
        rfalse;
    }
    if (action == ##LetGo) {
        if (self has on) {
            ToggleSouthWall(nothing);
            rtrue;
        }
        rfalse;
    }
    if (action == ##SwitchOn) {
        give Souvenirs_Room light;
        if (projector_reversed == true) {
            give Disused_Observatory light;
        }
        o = child(slide_projector);
        if (o == nothing) {
            print "The south wall is lit up. ";
            if (projector_reversed == true) {
                print "Also, a narrow white beam of light extends backwards from the projector, pointing out up through the Observatory doorway to the north.";
            }
            new_line;
            rtrue;
        }
        ToggleSouthWall(o);
        rtrue;
    }
    if (action == ##SwitchOff) {
        give Souvenirs_Room ~light;
        give Disused_Observatory ~light;
        give south_wall concealed;
        rfalse;
    }
    rfalse;
];


[ SouthWallBefore o ;   
    if (action == ##Enter) {
        o = child(slide_projector);
        if (o == nothing) {
            "You can't go that way.";
        }
        if (o == Eight_of_Wands_card) {
            "You are unable to enter the picture. It isn't very realistic, more a stylised figure-eight.";
        }
        print "You walk confidently into the south wall...^";
        if (o has general) {
            "But are unable to enter the scene for a second time.";
        }
        if (o == Death_card) {
            print "^And find yourself in a golden cornfield on a sunny afternoon. You have just time to admire the ears of wheat before the scythe of the Grim Reaper cuts your soul from your body.^";
            FakeDie(o);
            rtrue;
        }
        if (o == Drowned_Sailor_card) {
            print "^You are underwater, in the wreck of a ship, surrounded by the skeletons of its former crew, whom you abruptly join as your air runs out.^";
            FakeDie(o);
            rtrue;
        }
        if (o == Fool_card) {
            print "^And find yourself stepping off a cliff. All is well for a moment, and then like a cartoon character you notice there is no ground beneath you and you plummet to a stony death far below.^";
            FakeDie(o);
            rtrue;
        }
        give o general;
        PlayerTo(o.n_to);
        rtrue;
    }
    rfalse;
];

[ DisplayCardDesc o ;   
    print "the picture on ";
    Defart(o);
    if (o.n_to == nothing) {
        ".";
    }
    ", beautifully magnified and amazingly life-like. Why, you'd hardly know there was a wall there at all.";
];

[ ToggleSouthWall o ;   
    if (o ~= nothing) {
        if (o.n_to ~= nothing) {
            south_wall.n_to = o.n_to;
            give south_wall ~concealed;
        }
        print "The south wall lights up with ";
        DisplayCardDesc(o);
        rtrue;
    }
    give south_wall concealed;
    "The south wall becomes blank again.";
];

[ FakeDie card ;        
    print "^^    ";
    style bold;
    print "*** You have died ***";
    style roman;
    print "^^Or have you?  No... this isn't quite the end. You see an intense blue-white light at the end of what seems a tunnel, and drift toward it until you realise that you are staring, dazed, into the light of the slide projector, and have hardly moved at all.^";
    give card general;
    rtrue;
];


[ EastAnnexeDesc ;      
    print "This tight annexe at the eastern end of the house is piled up with old loft insulation rolls, left over from the last time the job was done (whenever that was). A gap between the tiles of the roof (which you really must mend before winter) lets a little natural light in";
    if (Dead_End.d_to == nothing) {
        ", but the attics to the west and south are dark.";
    }
    " and the dead end south is bright with sunlight through a square open hatchway in the roof.";
];


[ EastAnnexeBefore ;    
    if (action == ##Go or ##Enter) {
        if (old_smudged_battery in electric_torch && noun == n_obj or cupboard_door) {
            "You know you only have an old, nearly dead battery in the torch, and are reluctant to tread on the weaker floorboards inside the cupboard without safer illumination.";
        }
        if (child(electric_torch) == nothing && noun == n_obj or cupboard_door) {
            "But it's dark in there and you have no battery in your torch.";
        }
        rfalse;
    }
    rfalse;
];


[ InsulationBefore ;    
    if (action == ##Read or ##Search or ##LookUnder) {
        if (old_gardeners__gloves hasnt worn) {
            "A rash act. The itchy fibres of the insulation soon deter you.";
        }
        if (new_battery notin self) {
            "Nothing else there, unfortunately.";
        }
        move new_battery to East_Annexe;
        Achieved(SCORE_BATTERY);
        "You uncover a shiny new battery. It must have been dropped by accident when the loft insulation was being done.";
    }
    rfalse;
];


[ CupboardBefore ;      
    if (action == ##Knock) {
        "There is no reply, and frankly it's hard to imagine anyone's in there.";
    }
    rfalse;
];


[ DeadEndBefore ;       
    if (verb == ##Knock && noun == s_obj) {
        "The south wall rings curiously hollow.";
    }
    if (noun == s_obj && secret_door hasnt concealed) {
        R_Process(verb,secret_door,second);
        rtrue;
    }
    if (action == ##Push) {
        if (noun == s_obj && secret_door has concealed) {
            give secret_door ~concealed;
            move secret_door to Dead_End;
            Achieved(SCORE_SECRETDOOR);
            "A secret door springs open!";
        }
        rfalse;
    }
    if (action == ##Go) {
        if (noun == e_obj or d_obj && self.d_to ~= nothing) {
            print "You clamber out onto a rickety ladder which runs right down the east wall of the Hall, and nervously descend...^";
        }
        rfalse;
    }
    rfalse;
];


[ IsaacPaintingAfter ;  
    if (action == ##Take) {
        if (self in White_Hallway && picture_hook has scenery) {
            give self ~scenery;
            give self static;
            give self ~talkable;
            "You take Mad Isaac down.";
        }
        if (big_iron_fireplace has concealed) {
            give big_iron_fireplace ~concealed;
            "Taken. (There's a fireplace behind it, by the way.)";
        }
        rfalse;
    }
    rfalse;
];


[ FireplaceAfter ;      
    if (action == ##Receive) {
        move noun to Priests_Hole;
        if (sooty_old_stick hasnt moved) {
            move sooty_old_stick to Priests_Hole;
            give sooty_old_stick moved;
        }
        if (noun == medicine_bottle && medicine_bottle has locked) {
            give medicine_bottle ~moved;
            medicine_bottle.initial = "The medicine bottle, alas, was undamaged by the fall down the chimney.";
        }
        CDefart(noun);
        " rattles out of sight down the chimney.";
    }
    rfalse;
];


[ SkylightBefore ;      
    if (action == ##Open or ##Close) {
        "How, exactly?";
    }
    if (action == ##Turn) {
        print "With a horrid creaking noise, the crank ";
        if (Inside_Cupboard has light) {
            give Inside_Cupboard ~light;
            give cranked_skylight ~open;
            "shuts down the skylight, shutting out the sunshine.";
        }
        give Inside_Cupboard light;
        give cranked_skylight open;
        "winds open the skylight, flooding the room with sunshine.";
    }
    rfalse;
];


[ GasMaskAfter ;        
    if (action == ##Wear) {
        "After a brief ecstasy of fumbling, you pull it on. It smells unpleasantly of World War II leftover cork.";
    }
    rfalse;
];


[ GothicKeyBefore ;     
    if (action == ##Take) {
        if (self has general) {
            rfalse;
        }
        give Sir_Joshua_Meldrewe ~concealed;
        move self to Sir_Joshua_Meldrewe;
        Sir_Joshua_Meldrewe.number = 5;
        StartDaemon(Sir_Joshua_Meldrewe);
        "As you reach for the key, a swirling mist condenses about it, into a ghostly head which opens its mouth and eats up the key!  The rest of the ghostly body solidifies about the head and rises to swagger before you.";
    }
    rfalse;
];


[ IronKeyInitial ;      
    if (location == Priests_Hole) {
        "This chimney must have been the one the gothic-looking iron key fell down, for here it is.";
    }
    "An iron, gothic-looking key catches your eye.";
];


[ JoshuaMeldreweDaemon n ;      
    if (location ~= Battlements) {
        rfalse;
    }
    n = self.number - 1;
    self.number = n;
    if (n == 4) {
        "^The ghost laughs in a gurgling kind of way, as it were always coughing and spluttering.";
    }
    if (n == 3) {
        "^The ghost begins to speak:^^                       My hour is almost come^   When I to sulph'rous and tormenting flames^   Must render up myself...^^Can this possibly be the infamous Sir Joshua Meldrewe?";
    }
    if (n == 2) {
        "^~But not yet it hasn't, mark my word. And there's the burden of my inheritance, little wart! Get thee from my sight ere I slice thee as befits a hog!~";
    }
    if (n == 1) {
        "^~I prithee but once more, begone!~";
    }
    deadflag = SPOOKED;
    "^The ghost swoops around and through you, making you scream with panic. Somehow you manage to run back to safety, where your family (who never believe a word of it) give you plenty of tea and occupy you with holiday arrangements. As for you, you are so traumatised that you never venture into the attic again.^";
];


[ GhostLife ;   
    if (action == ##Give or ##ThrowAt) {
        remove noun;
        StopDaemon(self);
        if (noun == chicken_wishbone) {
            move iron_key to Priests_Hole;
            give iron_key general;
            remove Sir_Joshua_Meldrewe;
            Achieved(SCORE_JOSHUA);
            "The ghost swallows the wishbone, grinning nastily. Then a look of consternation spreads across his face. He begins to choke and as he fades away, his arms flailing wildly, he lets go of the key, which sails through the air onto the roof and (against all odds) falls neatly down a chimney.";
        }
        print "The ghost swallows ";
        Defart(noun);
        " whole and grins!";
    }
    if (action == ##Attack or ##Kiss) {
        "Ectoplasm is as nice to touch as its reputation suggests.";
    }
    if (action == ##Order or ##Ask or ##Answer) {
        "~I'll tell you nothing, varlet!~";
    }
    rfalse;
];


[ ChimneyBefore o ;     
    if (verb ~= ##Inv or ##Look or ##Go or ##Exit) {
        "There's not enough room in this confined space to do anything much!";
    }
    if (action == ##Go) {
        if (noun == d_obj) {
            o = child(player);
          .labelXXX;
            if (o ~= nothing) {
                if (o hasnt worn || o == canvas_rucksack) {
                    "It's too narrow a squeeze for you at present.";
                }
                o = sibling(o);
                jump labelXXX;
            }
            print "You squeeze awkwardly down the chimney. Lucky your best clothes are all packed, because you're getting filthy.^";
        }
        rfalse;
    }
    rfalse;
];


[ PriestHoleBefore o ;  
    if (action == ##Enter) {
        if (noun == hatch) {
            DownTheHatch();
            rfalse;
        }
        rfalse;
    }
    if (action == ##Go) {
        if (noun == u_obj) {
            o = child(player);
          .labelXXX;
            if (o ~= nothing) {
                if (o hasnt worn || o == canvas_rucksack) {
                    "It's too narrow a squeeze for you at present.";
                }
                o = sibling(o);
                jump labelXXX;
            }
            print "You squeeze awkwardly back up the chimney.";
        }
        if (noun == d_obj) {
            DownTheHatch();
            rfalse;
        }
        rfalse;
    }
    rfalse;
];

[ DownTheHatch ;        
    if (hatch has open) {
        print "You zoom rapidly down the chute, but decelerate just in time and land in a dark corner of...^";
    }
    rtrue;
];


[ PrayerBookBefore year ;       
    if (action == ##Consult) {
        year = TryNumber(consult_from);
        if (year < 1725 || year > 1792) {
            "He didn't seem to be experimenting in those days.";
        }
        if (year == 1792) {
            "In 1792, the last year of his life, ol' red-eyes becomes very excited about his new discovery. This time he claims that Merlyn bounde uppe the mystic estate (by this he means the back garden - Isaac never did have any sense of proportion) wyth great Roddes of Power. These are dangerous, yet also useful in themselves, but are really part of a great key... the usual nonsense. Of course you never actually see these rods, because they disguise themselves until waved by someone wearing Merlyn's hat.^^", "The funny thing is that Isaac died (legend has it, by spontaneous combustion) only a week after this breakthrough, preventing him from sending yet another paper to the Royal Society. But since Merlyn supposedly lived in about the sixth century A.D., there can't be a lot left of his hat, so the matter may be academic.";
        }
        print "In the year ";
        EnglishNumber(year);
        print ", Isaac was mainly concerned with ";
        year = year % 6;
        if (year == 0) {
            "alchemy.";
        }
        if (year == 1) {
            "caustical opticks.";
        }
        if (year == 2) {
            "concave mirrors.";
        }
        if (year == 3) {
            "the edibility of reptiles.";
        }
        if (year == 4) {
            "the spleens of flightless birds.";
        }
        "melting points of metals.";
    }
    rfalse;
];


[ WritingRoomDesc ;     
    print "A pleasantly furnished, if now mildewed, box room. There are engravings of Alison's heroines: Christina Rossetti, Elizabeth Browning, Emily Dickinson and Queen Victoria, an unlikely quartet. The wallpaper is done out in a dice motif, and a square outline of sixes surrounds a rather small door leading back north into the attics.^^";
    if (flag_of_the_British_Merchant_Navy in comfortable_bed) {
        "The flag is spread out as a blanket on the comfortable bed.";
    }
    "The room is provided with a comfortable bed, which looks very inviting.";
];


[ WritingRoomBefore ;   
    if (action == ##Sleep) {
        if (player in comfortable_bed) {
            if (flag_of_the_British_Merchant_Navy notin comfortable_bed) {
                "Awareness that something important is happening tugs at your subconscious.^^But you feel too exposed to sleep with only a sheet on the bed, and can't get comfortable.";
            }
            Achieved(SCORE_SLEEP);
            if (comfortable_bed has general) {
                "You doze awhile, but that's all.";
            }
            give comfortable_bed general;
            print "You sleep uneasily, fancying you can see Miss Alison writing at her table, trying to see the words, and always on the edge of a...^";
            EnterDream();
            rtrue;
        }
        rfalse;
    }
    rfalse;
];


[ WritingRoomAfter ;    
    if (action == ##Exit) {
        if (Melancholy_Dream has visited) {
            trigger_quotation(44);
        }
        rfalse;
    }
    rfalse;
];


[ ComfyBedBefore ;      
    if (action == ##Receive) {
        if (noun ~= flag_of_the_British_Merchant_Navy) {
            "That seems unlikely to make a good blanket.";
        }
        move flag_of_the_British_Merchant_Navy to comfortable_bed;
        "You spread the flag over the bed as a blanket.";
    }
    rfalse;
];


[ WindowBefore ;        
    if (action == ##Attack or ##Push or ##Pull) {
        give windows open;
        give windows openable;
        self.before = 65535[?];
        "The windows suddenly give way in a shower of flakes of paint, letting fresh summer air into the room!";
    }
    if (action == ##Enter) {
        if (self hasnt open) {
            "The windows are shut.";
        }
        rfalse;
    }
    if (action == ##Open) {
        "The windows are old and gummed up somehow.";
    }
    rfalse;
];

[ CheckMirror o ;       
    if (long_vanity_mirror has general) {
        rfalse;
    }
    if (o in player or canvas_rucksack && (o has rod_attr || o has hidden_rod || o has unidentifed_rod)) {
        rtrue;
    }
    rfalse;
];

[ MonkeyAlive ; 
    if (Crescent_Moon in Old_Evans) {
        give model_of_ugly_animal ~general;
        "^The monkey revels briefly in its new life, but then catches your eyes, sadly realising you offer it no home. Quite quickly it settles back into an ugly idol.";
    }
    remove model_of_ugly_animal;
    give model_of_ugly_animal ~general;
    move pet_monkey to Stone_Cross;
    Old_Evans.description = "Evans is content once again.";
    "^Now that you have finally been able to look it in the eyes, the monkey leaps from your arms, revelling in its new life, and scampers away through the windows onto the balcony, then up and over the side of the house. You can just make it out as it races down the footpath.";
];


[ MirrorBefore o i ;    
    if (action == ##Attack) {
        "What, and earn seven years bad luck?";
    }
    if (action == ##Rub) {
        give self general;
        trigger_quotation(21);
        "You polish up the mirror just a little more.";
    }
    if (action == ##Read or ##Search) {
        print "In the mirror is one of the most strikingly attractive people you have ever seen in all your born days";
        i = 0;
        o = child(player);
      .labelXXX;
        if (o ~= nothing) {
            if (CheckMirror(o) == false) {
                ++i;
                give o workflag;
            } else {
                give o ~workflag;
            }
            o = sibling(o);
            jump labelXXX;
        }
        if (i == 0) {
            ".";
        }
        print ", carrying ";
        if (model_of_ugly_animal has workflag) {
            give model_of_ugly_animal general;
        }
        WriteListFrom(child(player),512 + 8 + 64);
        print ".^";
        if (model_of_ugly_animal has general) {
            MonkeyAlive();
        }
        rtrue;
    }
    rfalse;
];


[ WindowSillBefore ;    
    if (action == ##Search or ##LookUnder) {
        if (delicate_gold_key has concealed) {
            give delicate_gold_key ~concealed;
            "You dislodge something shiny!";
        }
        rfalse;
    }
    rfalse;
];


[ OldWineryAfter ;      
    if (action == ##Look) {
        if (self has general) {
            rfalse;
        }
        give self general;
        print "^As you disturb the still air, the attic key, which was balanced on top of the demijohn, slips onto the floor and disappears into a crack in the floorboards. Your spirits sink as it does, rattling down some distance. How on earth are you going to get it back?^";
        rfalse;
    }
    rfalse;
];


[ OldWineryDaemon ;     
    print "^Sorry. Thinking about it again, the score only gets in a muddle this way, so the bonus points had better go after all.^";
    good_try_bonus = 0;
    rewdraw_statusline = true;
    score = score - 5;
    rfalse;
];


[ OldWineryBefore ;     
    if (action == ##PutOn) {
        if (second == demijohn) {
            "We know already what happens to things balanced on the demijohn.";
        }
        rfalse;
    }
    rfalse;
];


[ DemijohnBefore ;      
    if (action == ##Open) {
        if (old_gardeners__gloves hasnt worn) {
            "Your hands slip on the screw-top of the demijohn and can't get a grip.";
        }
        Achieved(SCORE_DEMIJOHN);
        rfalse;
    }
    if (action == ##Attack) {
        "The demijohn is made of something like industrial-grade chemistry glass. You kick it and hurt your foot.";
    }
    rfalse;
];


[ TouristMapBefore n ;  
    if (action == ##Consult) {
        if (self in demijohn) {
            "You can't get a close enough look.";
        }
        n = TryNumber(consult_from);
        if (n == 1420) {
            if (Museum_Foyer has visited) {
                "You remember, the museum.";
            }
            print "^At that exact grid reference is Meldreustrasse, a minor back street which houses a museum of arcana.^^Suddenly you remember!  You visited the place once, and the curator Doktor Stein showed you round... and he hypnotised you into a swirl of unconsciousness...^^";
            move tourist_map to location;
            PlayerTo(Museum_Foyer);
            rtrue;
        }
        "Just some anonymous streets. The detail of this map is so tiny that unless you have the exact four-digit grid reference for what you want, you'll never find it.";
    }
    rfalse;
];


[ ConservatoryAfter ;   
    if (action == ##Look) {
        if (antiquated_wireless has general && antiquated_wireless in Airing_Cupboard) {
            print "^Execrable music drifts in from the airing cupboard.^";
        }
        rfalse;
    }
    rfalse;
];


[ CalendarBefore i w ;  
    if (action == ##Read) {
        print "The calendar is turned to ";
        i = self.time_left;
        if (i == 0) {
            print "January";
        }
        if (i == 1) {
            print "February";
        }
        if (i == 2) {
            print "March";
        }
        if (i == 3) {
            print "April";
        }
        if (i == 4) {
            print "May";
        }
        if (i == 5) {
            print "June";
        }
        if (i == 6) {
            print "July";
        }
        if (i == 7) {
            print "August";
        }
        if (i == 8) {
            print "September";
        }
        if (i == 9) {
            print "October";
        }
        if (i == 10) {
            print "November";
        }
        if (i == 11) {
            print "December";
        }
        print " and a watercolour painting of some ";
        DaisyType(i);
        " daisies.";
    }
    if (action == ##Turn or ##SwitchOn) {
        self.time_left = (self.time_left + 1) % 12;
        R_Process(##Read,self);
        rtrue;
    }
    if (action == ##Consult) {
        if (consult_words == 1[?]) {
            wn = consult_from;
            w = NextWord();
            i = 65535;
            if (w == 'january') {
                i = 0;
            }
            if (w == 'february') {
                i = 1;
            }
            if (w == 'march') {
                i = 2;
            }
            if (w == 'april') {
                i = 3;
            }
            if (w == 'may') {
                i = 4;
            }
            if (w == 'june') {
                i = 5;
            }
            if (w == 'july') {
                i = 6;
            }
            if (w == 'august') {
                i = 7;
            }
            if (w == 'september') {
                i = 8;
            }
            if (w == 'october') {
                i = 9;
            }
            if (w == 'november') {
                i = 10;
            }
            if (w == 'december') {
                i = 11;
            }
            if (i >= 0) {
                self.time_left = i;
                R_Process(##Read,self);
                rtrue;
            }
        }
        "It only has the usual twelve months.";
    }
    rfalse;
];


[ SheetsBefore ;        
    if (action == ##Take) {
        print "The thought of Jemima's wrath if you actually took one of her tie-dyed sheets (~Dyeing is an art like everything else... I do it very well~) is just too dreadful. ";
        if (antiquated_wireless has concealed) {
            "But there seems to be something lurking beneath.";
        }
        new_line;
        rtrue;
    }
    if (action == ##Search or ##LookUnder or ##Read) {
        if (antiquated_wireless has concealed) {
            give antiquated_wireless ~concealed;
            Achieved(SCORE_WIRELESS);
            "Not as many sheets as you thought - they were on top of a large black wireless, now exposed to the light for the first time in months.";
        }
        print "No, you're only getting your ";
        if (old_gardeners__gloves has worn) {
            print "gloves";
        } else {
            print "hands";
        }
        " stained looking.";
    }
    rfalse;
];


[ SheetsDaemon ;        
    if (antiquated_wireless hasnt on) {
        StopDaemon(self);
        give antiquated_wireless ~general;
        rtrue;
    }
    if (antiquated_wireless in Conservatory && location == Potting_Room) {
        print "^Jemima hums along to ";
    } else if (antiquated_wireless in location) {
        print "^The radio plays ";
    } else {
        rtrue;
    }
    if (random(81) == 1) {
        "a splendid concert of the Sibelius Violin Concerto by the Minot Symphony Orchestra of North Dakota.";
    }
    print (string) RandomEntry(type_of_tune), (string) RandomEntry(tune_version), (string) RandomEntry(horrible_tunes);
    new_line;
    rtrue;
];


[ WirelessBefore ;      
    if (self has concealed) {
        "You've played this game before.";
    }
    if (action == ##Take) {
        "It's too heavy to lift off the casters.";
    }
    if (action == ##Push or ##Pull or ##Turn) {
        "It moves easily on the casters.";
    }
    if (action == ##PushDir) {
        if (location == Conservatory && second == e_obj) {
            "Not upstairs you can't.";
        }
        if (location == Conservatory && second == w_obj) {
            deadflag = FAILED;
            "Aunt Jemima spends the next four hours explaining to you exactly why she put the radio into storage. The reason is awfully convoluted and due to her firm conviction that magnetic fields influence the growth of plants. By that time you have to leave for the airport...";
        }
        AllowPushDir();
        rtrue;
    }
    rfalse;
];


[ WirelessAfter ;       
    if (action == ##SwitchOn) {
        StartTimer(self,6);
        "You push the switch on the wireless, but nothing happens.";
    }
    if (action == ##SwitchOff) {
        if (self has general) {
            give antiquated_wireless ~general;
            "Thank heaven for that.";
        }
        rfalse;
    }
    if (action == ##PushDir) {
        print "It moves easily on the casters.^";
        rfalse;
    }
    rfalse;
];


[ WirelessDaemon ;      
    if (self has on) {
        StartDaemon(pile_of_sheets);
        give self general;
        if (antiquated_wireless in location) {
            print "^The radio valves glow, and execrable so-called easy listening music fills the air with a sort of bland aural candy-floss.^";
        }
        if (location == Potting_Room && antiquated_wireless in Conservatory) {
            print "^Execrable music begins to sound from the conservatory, and Aunt Jemima hums vacantly.^";
        }
    }
    rfalse;
];


[ WirelessDescribe ;    
    if (self has general) {
        "^The wireless fills the air with Jemima's favourite station, ~Mild-n-Breezy FM~, about which the least said the better.";
    }
    print "^To one side is a heavy cabinet on casters containing an antiquated wireless, the kind with ";
    if (self has on) {
        print "glowing ";
    }
    "valves inside. On the top is a bakelite on-off switch.";
];


[ PottingRoomAfter ;    
    if (action == ##Go) {
        if (parent(daisy_chain) == nothing && daisy_given == true) {
            give Jemima general;
            print "^~Oh, silly old you,~ says Jemima condescendingly, ~You've lost your daisy chain!  What colour do you want then?~^";
        }
        rfalse;
    }
    if (action == ##Look) {
        if (antiquated_wireless has general && antiquated_wireless in Conservatory) {
            print "^Execrable music drifts in from the conservatory.^";
        }
        if (antiquated_wireless has general && antiquated_wireless in Airing_Cupboard) {
            print "^Happily, the radio is almost inaudible from here.^";
        }
        rfalse;
    }
    rfalse;
];


[ GlovesBefore ;        
    if (action == ##Take) {
        if (antiquated_wireless in Conservatory && antiquated_wireless has general) {
            rfalse;
        }
        if (old_gardeners__gloves hasnt moved) {
            deadflag = FAILED;
            "Aunt Jemima suddenly hears you, spins round to see you filching her gloves and screeches with irritation, eventually summoning the entire family. You volunteer to shift some suitcases about just to get away from her.";
        }
        rfalse;
    }
    rfalse;
];


[ JemimaDaemon ;        
    if (location ~= Potting_Room) {
        StartTimer(self,1);
        rtrue;
    }
    print "^~There we are!  All done now.~  Jemima hangs a daisy chain around your neck, then frowns and adjusts your hair in an exceedingly annoying way.^";
    Achieved(SCORE_DAISY);
    give daisy_chain moved;
    give daisy_chain worn;
    daisy_given = true;
    move daisy_chain to player;
    rtrue;
];


[ JemimaLife i ;        
    if (action == ##Order) {
        if (verb == ##Give && noun == old_gardeners__gloves) {
            "~I can't give you those, I'm using them!~^^(This is plainly not true, but you know how it is with aunts.)";
        }
        "Aunt Jemima has never done what you suggested at the best of times. This is not the best of times.";
    }
    if (action == ##Give) {
        if (noun == box_of_chocolates) {
            remove box_of_chocolates;
            Achieved(SCORE_CHOCOLATE);
            give Jemima general;
            Jemima.description = "Definitely mollified.";
            "Aunt Jemima pounces on the chocolates, wolfs down a strawberry cream and persuades you to have a vile toffee cracknell. ~Now,~ she says, ~Your turn for a daisy chain!~^^You try to look pleased.^^~Let's see, the others have had theirs... I have only a few colours left. What would you like?~";
        }
        if (noun == chocolate_biscuit) {
            print "Jemima grudgingly takes the biscuit and nibbles at it, but she is still sulking.^";
            GoodTry();
            remove chocolate_biscuit;
            rtrue;
        }
        if (noun == red_tablet) {
            "Jemima looks very suspiciously at the pill. ~Not just now, thanks.~";
        }
        if (noun == medicine_bottle && noun has locked) {
            remove red_tablet;
            give medicine_bottle ~locked;
            give medicine_bottle open;
            "Jemima takes the bottle absent-mindedly, opens it without the slightest difficulty and (before you can stop her) swallows the pill. You'd better hope it wouldn't have been useful anyway.^^~I'm always leaving my medicine lying around,~ she says vaguely as she hands the bottle back. ~I'll forget my head one day.~";
        }
        print "A peace offering is a nice idea, but somehow ";
        Defart(noun);
        if (noun == gift_wrapped_parcel) {
            print " lacks style... after all, it isn't Christmas.^";
            GoodTry();
            rtrue;
        }
        " seems inappropriate.";
    }
    if (action == ##Kiss) {
        print "She is slightly mollified, but only slightly.^";
        GoodTry();
        rtrue;
    }
    if (action == ##Attack) {
        trigger_quotation(28);
        "Well, she's annoying, but that's family for you.";
    }
    if (action == ##ThrowAt) {
        trigger_quotation(28);
        "Well, quite. Best to just grit your teeth and put up with her though.";
    }
    if (action == ##Answer) {
        if (self hasnt general) {
            trigger_quotation(17);
            "She pretends not to have heard, a favourite ploy of hers when sulking.";
        }
        give Jemima ~general;
        i = 0;
        if (noun == invalidObj41664 or invalidObj41673) {
            i = 1;
        }
        if (noun == invalidObj30666) {
            i = 2;
        }
        if (noun == invalidObj37947) {
            i = 4;
        }
        if (noun == invalidObj41304 or invalidObj37236) {
            i = 5;
        }
        if (noun == invalidObj33933) {
            i = 6;
        }
        if (noun == invalidObj36687) {
            i = 9;
        }
        if (i ~= 0) {
            print "~Right you are then, I'm sure I have some which are just right.~^^";
        }
        if (i == 0) {
            i = 5;
            print "~Nothing like that left. Just plain old daisies for you then dear!~^^";
        }
        StartTimer(Jemima,7);
        daisy_chain.number = i;
        "After a moment she notices you're still here. ~Come back later, it'll be done soon.~  You groan inwardly but force a sickly smile. Should have eaten the chocolates myself, you find yourself thinking.";
    }
    if (action == ##Ask) {
        trigger_quotation(17);
        if (second == invalidObj31971 or invalidObj31251) {
            "Jemima gives you a cool look. ~They're just for decoration.~";
        }
        if (second == invalidObj30234 or invalidObj31152) {
            "~Wretched cat!  More trouble than he's worth.~";
        }
        if (second == invalidObj38379 or invalidObj33780) {
            "~Those are my gloves.~";
        }
        if (second == invalidObj40593 or invalidObj35625 or invalidObj36975 or invalidObj34473) {
            "~I wouldn't know. I'm not the one going on holiday.~";
        }
        if (second == invalidObj30207 or invalidObj34977 or invalidObj41421) {
            "~You haven't lost the attic key again?  Hmph.~";
        }
        if (second == invalidObj32124 or invalidObj30765) {
            "~Load of old junk.~";
        }
        if (second == invalidObj32556 or invalidObj41070 or invalidObj32565) {
            "~You leave that rickety old thing alone!~";
        }
        if (second == invalidObj30972) {
            "~Not bad. Of course, my daisies are better, but not bad for beginners.~";
        }
        if (second == invalidObj31584 or invalidObj31593) {
            "~Everyone has his own favourite.~";
        }
        if (second == invalidObj37866 or invalidObj41448) {
            "~I've told you a hundred times, I don't want a transistor radio. That old valve set is fine for me.~";
        }
        if (second == invalidObj31917 or invalidObj31926 or invalidObj32988) {
            "~Nothing wrong with this family that a good long holiday wouldn't set right.~";
        }
        if (second == invalidObj35760) {
            "~Know thyself, that's what the good book says.~";
        }
        "Jemima has nothing to say on the subject.";
    }
    rfalse;
];


[ DaisyChainBefore ;    
    if (action == ##Read) {
        print "A delicate, pretty chain of ";
        DaisyType(self.number);
        " daisies.";
    }
    if (action == ##Drop) {
        remove self;
        give self ~worn;
        "The daisychain falls to pieces in your hands!  Cheer up, though, perhaps Jemima might give you another.";
    }
    rfalse;
];


[ DaisyUp o ;   
    if (self has worn && rod_identity == 2) {
        o = child(player);
      .labelXXX;
        if (o ~= nothing) {
            if (o has hidden_rod) {
                print " (which rustles as if with a magical wind)";
                rtrue;
            }
            o = sibling(o);
            jump labelXXX;
        }
        print " (around your neck)";
        rtrue;
    }
    rfalse;
];

[ DaisyType n ; 
    if (n == 0) {
        print "speckled Jemima's Pride";
    }
    if (n == 1) {
        print "yellowish Merlyn's Hat";
    }
    if (n == 2) {
        print "blue-tinted bell";
    }
    if (n == 3) {
        print "heavy-headed Dorset Pride";
    }
    if (n == 4) {
        print "reddish meadow-heart";
    }
    if (n == 5) {
        print "wild white common";
    }
    if (n == 6) {
        print "green-edged hedgerow";
    }
    if (n == 7) {
        print "plain Russian Steppe";
    }
    if (n == 8) {
        print "tall-stemmed Breton";
    }
    if (n == 9) {
        print "orange meadow";
    }
    if (n == 10) {
        print "short-leaved Meldrew";
    }
    if (n == 11) {
        print "tiny bonsai";
    }
    rtrue;
];


[ StorageRoomBefore ;   
    if (action == ##Enter) {
        if (noun == dark_shaft_obj) {
            if (dumbwaiter in dark_shaft_obj) {
                R_Process(##Enter,dumbwaiter);
                rtrue;
            }
            "But you suffer from vertigo. Even the thought of the plane journey tomorrow is nerve-wracking.";
        }
        rfalse;
    }
    rfalse;
];


[ WheelBefore r ;       
    if (action == ##TurnWith) {
        if (second == steel_wrench) {
            "The wrench doesn't fit a hand-wheel like this.";
        }
        rfalse;
    }
    if (action == ##Turn) {
        if (player in dumbwaiter) {
            "You can just reach the wheel from here, but have too little leverage to turn it.";
        }
        if (self has on) {
            "It won't turn. Perhaps it's broken, or perhaps only rusty.";
        }
        print "It spins round smoothly, and the dumbwaiter is hoisted ";
        if (dumbwaiter in location) {
            print "away out of sight.";
        } else {
            print "into view. ";
            if (medicine_bottle in dark_shaft_obj2 && medicine_bottle has locked) {
                give medicine_bottle ~locked;
                give medicine_bottle open;
                print "(Just before it reached the bottom there was a curious cracking noise. Was it really wise to leave something in the shaft?)";
            }
        }
        r = parent(dumbwaiter);
        if (r == Storage_Room) {
            move dumbwaiter to Cellars;
        }
        if (r == Dark_Shaft) {
            move dumbwaiter to location;
        }
        if (r == Cellars) {
            move dumbwaiter to Storage_Room;
        }
        new_line;
        rtrue;
    }
    rfalse;
];


[ ShaftAfter ;  
    if (action == ##Receive) {
        move noun to dumbwaiter;
        if (dumbwaiter in location) {
            "Put on the dumbwaiter.";
        }
        if (noun == medicine_bottle) {
            give medicine_bottle ~locked;
            give medicine_bottle open;
            "It disappears into the darkness, and there is a slight cracking noise.";
        }
        "It disappears into the darkness.";
    }
    rfalse;
];


[ WrenchAfter ; 
    if (action == ##Take) {
        "It's a wrench, but you take it.";
    }
    rfalse;
];


[ RopesBefore r ;       
    if (action == ##Pull) {
        if (player notin dumbwaiter) {
            "You can't reach them!";
        }
        Achieved(SCORE_WAITER);
        if (location == Storage_Room) {
            r = Cellars;
            print "You begin moving, and then plummet, but friction gradually slows you down and you land without too much of a thump...^";
        }
        if (location == Dark_Shaft) {
            r = Storage_Room;
            print "You heave yourself up to the attic again...^";
        }
        if (location == Cellars) {
            r = Dark_Shaft;
            print "You heave yourself half-way up, and then need to stop for a rest.^";
        }
        move dumbwaiter to r;
        location = r;
        R_Process(##Look);
        rtrue;
    }
    if (action == ##Climb) {
        "If only you didn't suffer from such dreadful vertigo...";
    }
    rfalse;
];


[ WishboneAfter ;       
    if (action == ##Pull) {
        "It already has been. The part you have, lost.";
    }
    rfalse;
];


[ ShaftBefore ; 
    if (action == ##Look) {
        if (dumbwaiter notin Dark_Shaft) {
            print "^Since the dumbwaiter isn't here, the best you can do is clamber down the shaft to the cellars.^";
        }
        rfalse;
    }
    rfalse;
];


[ Shaft2Before ;        
    if (action == ##Go) {
        if (noun == d_obj && dumbwaiter in Dark_Shaft) {
            "Since the dumbwaiter is here, why not travel in that instead.";
        }
        rfalse;
    }
    rfalse;
];


[ DarkPassageBefore ;   
    if (sandstone_recess has open) {
        Achieved(SCORE_SECRET_PASS);
    } else if (verb == ##Enter && noun == sandstone_recess) {
        "The recess is too shallow.";
    }
    if (gas_mask has worn) {
        rfalse;
    }
    if (verb == ##Go or ##Enter) {
        rfalse;
    }
    "The coal dust makes you cough and splutter, and your eyes stream. You are unable to concentrate on doing anything here.";
];


[ MetalDoorAfter ;      
    if (action == ##Unlock) {
        give coal_bunker ~locked;
        rfalse;
    }
    if (action == ##Lock) {
        give coal_bunker locked;
        rfalse;
    }
    if (action == ##Open) {
        give coal_bunker open;
        rfalse;
    }
    if (action == ##Close) {
        give coal_bunker ~open;
        rfalse;
    }
    rfalse;
];


[ CellarsBefore ;       
    if (action == ##Enter) {
        if (noun == dark_shaft_obj2) {
            if (dumbwaiter in Cellars) {
                R_Process(##Enter,dumbwaiter);
                rtrue;
            }
            "No, don't. There's nothing there and it's nasty and dirty. Bring the dumbwaiter down instead.";
        }
        rfalse;
    }
    rfalse;
];

[ MouseBoundary i j cell ;      
    if (i < 0 || i > 8 || j < 0 || j > 6) {
        rfalse;
    }
    cell = mouse_maze->(9 * j + i);
    if (cell == '0') {
        rfalse;
    }
    if (cell == '1') {
        rtrue;
    }
    rtrue;
];


[ MouseLife frm dst prev_loc x y ;      
    if (action == ##Order or ##Answer or ##Ask) {
        if (gas_mask has worn && MouseUnderstandsMask == false) {
            MouseUnderstandsMask = true;
            print "(amazingly, the mouse can make out your voice even when you have the gas mask on - that's real engineering, that is)^";
        }
        if (verb == ##Beep or ##Sing) {
            "The mouse bleeps with happy pride. That's one thing it really knows how to do.";
        }
        if (verb ~= ##Go) {
            "The mouse emits a querulous, unhappy bleep.";
        }
        if (noun == ne_obj) {
            noun = u_obj;
        }
        if (noun == nw_obj) {
            noun = u_obj;
        }
        if (noun == se_obj) {
            noun = u_obj;
        }
        if (noun == sw_obj) {
            noun = u_obj;
        }
        if (noun == d_obj) {
            noun = u_obj;
        }
        if (noun == u_obj) {
            "The mouse bleeps with annoyance.";
        }
        frm = parent(self);
        if (frm == Cellars_South) {
            if (noun == n_obj) {
                dst = Cellars;
                jump labelXXX;
            }
            if (noun == w_obj) {
                dst = hole_in_the_wall;
                Mouse_x = 8;
                Mouse_y = 3;
                jump labelXXX;
            }
        } else if (frm == Cellar_West) {
            if (noun == e_obj) {
                dst = Cellars;
                jump labelXXX;
            }
        } else if (frm == Wine_Cellars) {
            if (noun == w_obj) {
                dst = Cellars;
                jump labelXXX;
            }
        } else if (frm == Cellars) {
            if (noun == w_obj) {
                dst = Cellar_West;
                jump labelXXX;
            }
            if (noun == s_obj) {
                dst = Cellars_South;
                jump labelXXX;
            }
            if (noun == e_obj) {
                dst = Wine_Cellars;
                jump labelXXX;
            }
        } else {
            if (frm == hole_in_the_wall && Mouse_x == 8 && Mouse_y == 3 && noun == e_obj) {
                dst = Cellars_South;
            } else {
                if (frm == hole_in_the_wall) {
                    if (noun == n_obj) {
                        x = Mouse_x;
                        y = Mouse_y - 1;
                    }
                    if (noun == e_obj) {
                        x = Mouse_x + 1;
                        y = Mouse_y;
                    }
                    if (noun == s_obj) {
                        x = Mouse_x;
                        y = Mouse_y + 1;
                    }
                    if (noun == w_obj) {
                        x = Mouse_x - 1;
                        y = Mouse_y;
                    }
                    if (MouseBoundary(x,y) == true) {
                        "From somewhere inside the hole, you hear a disconsolate bleep.";
                    }
                    Mouse_x = x;
                    Mouse_y = y;
                    if (Mouse_x == 4 && Mouse_y == 1 && small_brass_key in hole_in_the_wall) {
                        move small_brass_key to robot_mouse;
                        trigger_quotation(2);
                        "From somewhere inside the hole, you hear the spinning of tiny wheels, followed by an excitable high-pitched beep and a dull clanging noise.";
                    }
                    "From somewhere inside the hole, you hear tiny wheels spin.";
                }
                "The mouse wheels spin, but can't get a good enough grip to move.";
            }
          .labelXXX;
            prev_loc = frm;
            move robot_mouse to dst;
            give robot_mouse moved;
            if (location == prev_loc) {
                if (dst == hole_in_the_wall) {
                    trigger_quotation(1);
                    "The mouse just squeezes through the hole, and disappears from view. Unfortunately you can't very easily talk to it now...";
                } else {
                    "The mouse runs off as ordered.";
                }
            }
            if (location == dst) {
                print "The mouse runs back out of the hole, looking dustier but none the worse for its adventure";
                if (small_brass_key notin robot_mouse) {
                    ".";
                }
                move small_brass_key to Cellars_South;
                trigger_quotation(3);
                ", and then almost looks proud as a magnet cuts out and something metal drops off the underside of the mouse onto the floor. The lost key is found!";
            }
        }
        "The mouse emits a low-pitched bleep.";
    }
    rfalse;
];


[ WineCellarsDescription ;      
    print "The wine cellars are now quite badly stocked, many of the hexagonal racks being home only to woodlice now. Much of what there is was laid in by your father and has corked";
    if (self hasnt light) {
        ".";
    }
    ". The barrel-shaft slants upwards to the north, and bright light floods in from the gardens above.";
];


[ WineCellarsBefore ;   
    if (action == ##Drink) {
        "But you are teetotal, which is why the cellars have got in this state.";
    }
    rfalse;
];


[ WineCellarsUp ;       
    if (self hasnt light) {
        rfalse;
    }
    "The barrel-shaft is too steep to climb. You were lucky enough not to break your neck on the way down.";
];


[ HoleBefore ;  
    if (action == ##Receive) {
        if (second == hole_in_the_wall) {
            "Nothing is to be gained by this.";
        }
        rfalse;
    }
    if (action == ##LetGo) {
        "There's nothing within reach inside.";
    }
    rfalse;
];


[ HoleLife ;    
    if (action == ##Order or ##Ask or ##Answer) {
        if (robot_mouse in self) {
            return RunRoutines(robot_mouse,life);
        }
        rfalse;
    }
    rfalse;
];


[ IronboundDoorBefore ; 
    if (action == ##Knock) {
        "You bark your knuckles painfully on the iron, and to no avail.";
    }
    rfalse;
];


[ LemniscusAfter i ;    
    if (action == ##Look) {
        print "^Around the edge of the disc is a circular arc, surrounding the lemniscus, which passes through nine equally spaced sockets or cylindrical wells.";
        i = circular_arc.number;
        if (i == 0) {
            new_line;
            rfalse;
        }
        if (i == 1) {
            "  One socket contains a rod, fixed in place.";
        }
        if (i == 2) {
            "  Two of the sockets contain rods, fixed in place.";
        }
        if (i == 3) {
            "  Three sockets contain rods, fixed in place.";
        }
        if (i == 4) {
            "  Four sockets contain rods, fixed in place.";
        }
        if (i == 5) {
            "  Five sockets contain rods, fixed in place.";
        }
        if (i == 6) {
            "  Six sockets contain rods, fixed in place.";
        }
        if (i == 7) {
            "  Seven sockets contain rods, fixed in place.";
        }
        if (i == 8) {
            "  Only one socket is left empty.";
        }
        if (i == 9) {
            "  All nine sockets are occupied by rods.";
        }
        rfalse;
    }
    rfalse;
];


[ ArcBefore i ; 
    if (action == ##Receive) {
        i = self.number;
        if (i == 9) {
            "The sockets are all full.";
        }
        if (noun hasnt rod_attr) {
            "That won't fit in a socket.";
        }
        if (noun == rod_of_infinity) {
            if (noun has unidentifed_rod) {
                "For some reason, that rod is just too large to fit.";
            }
            "The Rod of Infinity is just slightly too large to fit.";
        }
        move noun to self;
        give noun static;
        ++i;
        self.number = i;
        print "It fits perfectly in one of the arc sockets.^";
        if (parent(spherical_opening) == nothing) {
            move spherical_opening to Infinity_Symbol;
            print "^As the rod goes home, a spherical opening a few inches across appears in one wall.^";
        }
        if (i == 9) {
            Achieved(SCORE_ARC);
        }
        rtrue;
    }
    rfalse;
];


[ SphericalOpeningBefore ;      
    if (action == ##Receive) {
        if (noun == hard_wooden_ball) {
            "Though correctly shaped, it is not quite small enough to fit the cavity.";
        }
        if (noun ~= golden_orb) {
            "That doesn't seem to fit properly.";
        }
        if (golden_orb hasnt general) {
            "The orb fits perfectly, but nothing happens: it is as if the socket is dead, and the orb rolls out again into your hands. Curious.";
        }
        move spherical_opening to golden_orb;
        remove golden_orb;
        give spherical_opening general;
        Infinity_Symbol.description = "A cave carved from crystal icicles of rock and glowing with vivid, golden light, so bright it almost hurts your eyes. A narrow crevice opens out to an iron doorway and the relative darkness of the house.^^The rough stone floor levels out to a perfectly round, smooth white marble disc about five yards across, inscribed with a black lemniscus (or infinity) symbol.";
        "The orb fits perfectly, and the socket comes alive with golden light, which soaks out into the fabric of the cave until the whole place is shining bright.";
    }
    rfalse;
];


[ OctagonAfter ;        
    if (action == ##Take or ##Remove) {
        if (noun has rod_attr && noun hasnt unidentifed_rod) {
            Achieved(SCORE_ROD_IDENT);
        }
        rfalse;
    }
    rfalse;
];


[ CoffinAfter r ;       
    if (action == ##Receive) {
        if (noun has rod_attr) {
            "The mahogany rod fits in perfectly.";
        }
        rfalse;
    }
    if (action == ##Close) {
        give gilded_model_coffin ~general;
        r = child(gilded_model_coffin);
      .labelXXX;
        if (r ~= nothing) {
            if (r has unidentifed_rod) {
                discover_rod(r);
                give gilded_model_coffin general;
            }
            r = sibling(r);
            jump labelXXX;
        }
        if (gilded_model_coffin hasnt general) {
            gilded_model_coffin.initial = "A rather morbid gilded model coffin rests here.";
            rfalse;
        }
        gilded_model_coffin.initial = "The model coffin is closed and throbbing with electric power.";
        "The coffin sparks, spitting with electricity, and begins throbbing with a life of its own!";
    }
    if (action == ##Open) {
        self.initial = "A rather morbid gilded model coffin rests open here.";
        rfalse;
    }
    rfalse;
];


[ CoffinBefore ;        
    if (action == ##Open) {
        if (gilded_model_coffin has general && old_gardeners__gloves hasnt worn) {
            deadflag = FAILED;
            "There is a flash and then everything goes dark!^^You were given a nasty shock by that coffin. ~Must have been some old wiring,~ says a doctor, leaning over you in hospital.";
        }
        rfalse;
    }
    rfalse;
];


[ CoffinDesc ;  
    print "The lid bears an inscription in strange hieroglyphics:^";
    0-->8 = 2 | 0-->8;
    print "^   (()) #+*+ <>   ->#.^             |||^";
    0-->8 = 65533 & 0-->8;
    rtrue;
];


[ SketchBefore ;        
    if (action == ##Attack or ##Open) {
        remove framed_charcoal_sketch;
        move charcoal_sketch to location;
        move dog_eared_old_letter to location;
        "Breaking open the frame looses the sketch, which falls to the floor.";
    }
    rfalse;
];


[ LetterDesc ;  
    print "A faint typewritten letter, postmarked Cairo, October 1920, with a handwritten note signed simply ~Ellingsworth~:^^Hartley - Thought you might be able to date some of these queer pictograms and determinitives, early New Kingdom?  Pottery unclear, work continues^";
    0-->8 = 2 | 0-->8;
    print "^  ::   and        #     the               #.    this^  :;   but        +*+   god/spirit?       (())  all^  =    of         []    house/building    |||   indicates plural^  ->   through    >>>   moves             <>    item/thing?^  __   sits/lies/rests/is near            /     to/toward^";
    0-->8 = 65533 & 0-->8;
    rtrue;
];


[ HookBefore ;  
    if (action == ##Receive) {
        if (noun ~= painting_of_Mad_Isaac_Meldrewe) {
            "Doesn't seem right there, somehow.";
        }
        move painting_of_Mad_Isaac_Meldrewe to White_Hallway;
        give painting_of_Mad_Isaac_Meldrewe ~moved;
        give painting_of_Mad_Isaac_Meldrewe talkable;
        give self ~static;
        give self scenery;
        painting_of_Mad_Isaac_Meldrewe.initial = "Mad Isaac's painting glares at you from the picture hook.";
        "You hang up Mad Isaac, who seems ideally placed there.";
    }
    rfalse;
];


[ HalfwayUpStairsUp ;   
    Servants_Room.d_to = Halfway_up_the_Stairs;
    Servants_Room.n_to = Halfway_up_the_Stairs;
    move tight_door to Servants_Room;
    self.u_to = Servants_Room;
    print "The staircase leads up into...^";
    return Servants_Room;
];


[ UnrealEachTurn i ;    
    i = random(10);
    if (i == 1) {
        "^A clock keeps the hours, with a dead sound on the final stroke of nine.";
    }
    if (i == 2) {
        "^There is a brown fog about, like a winter dawn's.";
    }
    if (i == 3) {
        "^You can almost make out the pleasant whining of a mandoline from a faraway bar.";
    }
    if (i == 4) {
        "^Drifting through the streets from some distant bar comes the sound of one of Scott Joplin's newfangled piano pieces, accompanying song settings from ~Romeo and Juliet~.";
    }
    rfalse;
];


[ PosterBefore ;        
    if (action == ##Take or ##RipDown or ##Rip or ##Pull) {
        if (self has scenery) {
            give self ~scenery;
            "You hastily tear down the poster, but there's nothing interesting behind it, only painted graffiti: ~Shantih Shantih Shantih~.";
        }
        rfalse;
    }
    if (action == ##Wave) {
        if (location == Down_by_River && tourist_boat hasnt open) {
            print "You wave the poster at the boat, but the boat remains unmoved.^";
            GoodTry();
            rtrue;
        }
        rfalse;
    }
    rfalse;
];


[ BohemiaInitial i ;    
    i = random(10);
    if (i == 1) {
        Impressionist_painting.initial = "One whole wall is an Impressionist mural painting of a yellow chair.";
    }
    if (i == 2) {
        Impressionist_painting.initial = "One whole wall is an Impressionist mural painting of lilies on a pond.";
    }
    if (i == 3) {
        Impressionist_painting.initial = "One whole wall is an Impressionist mural painting of a chateau in Aix-en-Provence.";
    }
    if (i == 4) {
        Impressionist_painting.initial = "One whole wall is an Impressionist mural painting of nude bathers.";
    }
    if (i == 5) {
        Impressionist_painting.initial = "One whole wall is an Impressionist mural painting of a waitress at a bar.";
    }
    if (i == 6) {
        Impressionist_painting.initial = "One whole wall is an Cubist mural painting of a woman with a plate of fish on her head.";
    }
    if (i == 7) {
        Impressionist_painting.initial = "One whole wall is an abstract Cubist mural painting.";
    }
    if (i == 8) {
        Impressionist_painting.initial = "One whole wall is an Pre-Raphaelite mural painting of the Virgin Mary looking up at the light.";
    }
    if (i == 9) {
        Impressionist_painting.initial = "One whole wall is an Impressionist mural painting of a woman with a parasol.";
    }
    if (i == 10) {
        Impressionist_painting.initial = "One whole wall is an pointillist mural painting of a scene in a park by a lake.";
    }
    rfalse;
];

[ Deal_card_number rank ;       
    print "the ";
    if (rank == 1) {
        print "Ace";
    }
    if (rank == 2) {
        print "Two";
    }
    if (rank == 3) {
        print "Three";
    }
    if (rank == 4) {
        print "Four";
    }
    if (rank == 5) {
        print "Five";
    }
    if (rank == 6) {
        print "Six";
    }
    if (rank == 7) {
        print "Seven";
    }
    if (rank == 8) {
        print "King";
    }
    if (rank == 9) {
        print "Queen";
    }
    if (rank == 10) {
        print "Knave";
    }
    rtrue;
];

[ Deal_random_card i j card ;   
    if (card_ptr == 0) {
      .labelXXX;
        card = random(50);
        if (card == i) {
            jump labelXXX;
        }
        if (card == j) {
            jump labelXXX;
        }
        if (card == 1) {
            print "the Blank Card (~which I am forbidden to see~)";
        }
        if (card == 2) {
            print "the One-Eyed Merchant";
        }
        if (card == 3) {
            print "Marie, the Sledging Girl";
        }
        if (card == 4) {
            print "the Red Rock";
        }
        if (card == 5) {
            print "the Stony Wastes";
        }
        if (card == 6) {
            print "the Arch-Duke";
        }
        if (card == 7) {
            print "the Hyacinths";
        }
        if (card == 8) {
            print "the Wheel";
        }
        if (card == 9) {
            print "Belladonna, the Lady of the Rocks";
        }
        if (card == 10) {
            print "the Hypocrit Reader";
        }
        if (card == 11) {
            print "the Golden Cupidon";
        }
        if (card == 12) {
            print "the Candle-Flames";
        }
        if (card == 13) {
            print "the Carved Dolphin";
        }
        if (card == 14) {
            print "Philomel, the Barbarous King";
        }
        if (card == 15) {
            print "the Lonely Typist";
        }
        if (card == 16) {
            print "the Bradford Millionaire";
        }
        if (card == 17) {
            print "Magnus, the Martyr";
        }
        if (card == 18) {
            print "Phlebas, the Phoenician";
        }
        if (card == 19) {
            print "the Woman with Long Black Hair";
        }
        if (card == 20) {
            print "the Cicadas in the Pine Trees";
        }
        if (card < 21) {
            return card;
        }
        if (card < 31) {
            Deal_card_number(card - 20);
            print " of Staves";
            return card;
        }
        if (card == 31) {
            print "Tiresias, the shape changer";
            return card;
        }
        if (card < 41) {
            Deal_card_number(card - 30);
            print " of Cups";
            return card;
        }
        Deal_card_number(card - 40);
        print " of Stones";
        return card;
    }
    --card_ptr;
    card = card_deck-->card_ptr;
    move card to Consulting_Room;
    Defart(card);
    return card;
];

[ InsertCardIntoDeck o ;        
    card_deck-->card_ptr = o;
    ++card_ptr;
    rtrue;
];

[ SosostrisDeals card3 card2 card1 ;    
    print "Madame Sosostris picks up the cards and deals them onto the table. She frowns in concentration as ";
    card3 = Deal_random_card(0,0);
    print ", ";
    card2 = Deal_random_card(card3,0);
    print " and then ";
    card1 = Deal_random_card(card3,card2);
    print " show. ";
    if (card3 == Death_card) {
        print "She blanches with alarm, then recovers and jabbers something about not taking the cards too literally, the images being symbolic and so on. As rapidly as she possibly can, she warns you to fear death by water and then hustles you out onto the street.^";
    } else {
        if (card3 ~= Star || card2 ~= Maiden_card || card1 ~= Eight_of_Wands_card) {
            ! no code
        } else {
            print "~You have come!  At last, after all these centuries!  But there is little I can do to ease your way, save to return the staff you left with me for safe keeping.~  And she shows you out. You feel rather bewildered.^";
            move oak_quarterstaff to player;
            give Unreal_City general;
            jump labelXXX;
        }
        trigger_quotation(18);
        print "~Curse it, another nobody,~ she hisses in an unguarded moment, as she tidies the pack absentmindedly with her hands. Then she recovers her poise and advises about handsome strangers, fearing death by water, crossing palms with gold and so on. Eventually she ushers you out.^";
    }
  .labelXXX;
    PlayerTo(Unreal_City);
    rtrue;
];


[ ConsultingRoomBefore ;        
    if (action == ##Smell) {
        "You feel briefly incensed.";
    }
    rfalse;
];


[ TarotPackBefore ;     
    if (action == ##Take or ##Remove) {
        "That's funny. For a moment there your hand seemed to go straight through the pack of cards without touching it!";
    }
    if (action == ##Stack) {
        if (second == nothing) {
            "An intriguing idea, but you'll have to be more explicit about how to do it.";
        }
        R_Process(##Insert,second,self);
        rtrue;
    }
    if (action == ##Receive) {
        if (Madame_Sosostris in location) {
            "Madame Sosostris won't let you.";
        }
        if (noun hasnt card) {
            "That would look rather incongruous, surely?";
        }
        remove noun;
        InsertCardIntoDeck(noun);
        print "You carefully lay ";
        Defart(inp1);
        " face down on the tarot pack.";
    }
    if (action == ##Search or ##Read or ##LookUnder) {
        "The cards defy mortal examination.";
    }
    rfalse;
];


[ BellPushBefore ;      
    if (action == ##Push) {
        if (Madame_Sosostris in Consulting_Room) {
            "Madame Sosostris looks at you in some irritation.";
        }
        if (Madame_Sosostris hasnt general) {
            move Madame_Sosostris to Consulting_Room;
            give curtain general;
            "Madame Sosostris, the famous clairvoyante, breezes in through the hanging curtain and sits behind the table, making waving gestures with her hands.^^~First, this I must know, were you born in an even, or an odd, year?~";
        }
        if (Unreal_City has general) {
            "She has helped enough.";
        }
        print "Madame Sosostris breezes in once more. ~You again,~ she says warily. ~Let us see how your fortunes have changed.~^^";
        SosostrisDeals();
        rtrue;
    }
    rfalse;
];


[ SosostrisLife ;       
    if (action == ##Give) {
        if (noun == silk_handkerchief) {
            "Gratefully she blows her nose but then returns the handkerchief. You refold it ingeniously.";
        }
        print "She looks warily at ";
        Defart(noun);
        ".";
    }
    if (action == ##Kiss) {
        "She kisses you forcibly. Her mouth tastes of tobacco.";
    }
    if (action == ##Attack) {
        "She mesmerises you into immobility. She hasn't lived all these centuries in the Latin Quarter for nothing, you know.";
    }
    if (action == ##Answer) {
        if (curtain hasnt general) {
            "She is startled and stares.";
        }
        if (special_word == 'even' or 'odd') {
            SosostrisDeals();
            remove Madame_Sosostris;
            give curtain ~general;
            give Madame_Sosostris general;
            give Madame_Sosostris concealed;
            rtrue;
        }
        "~You must answer my question!~  She does seem anxious.";
    }
    rfalse;
];


[ DownByRiverBefore ;   
    if (action == ##Swim or ##Drink) {
        "That foul water?  Not a chance.";
    }
    rfalse;
];


[ DownByRiverWest ;     
    if (tourist_boat hasnt open) {
        R_Process(##Enter,tourist_boat);
        rtrue;
    }
    return 170[tourist_boat?];
];


[ HandkerchiefBefore ;  
    if (action == ##Wave && location == Down_by_River && tourist_boat hasnt open) {
        give tourist_boat open;
        "You wave the handkerchief, and the boat glides smoothly across the river toward you.";
    }
    rfalse;
];


[ TouristBoatBefore ;   
    if (action == ##Enter) {
        if (self hasnt open) {
            "Are you in Seine?  There is a river in between you and the boat.";
        }
        rfalse;
    }
    rfalse;
];


[ HollowManLife ;       
    if (action == ##Attack) {
        "You are unable to touch the man. It is as if he isn't there.";
    }
    if (action == ##Order or ##Answer) {
        if (special_word == 'time' || verb == ##Time) {
            print "You lose all sense of time and place as the boat drifts down river... It comes as a considerable relief to your befuddled nerves when the man helps you off the boat again, and you find yourself:^";
            if (tourist_map_of_Paris has moved) {
                PlayerTo(Infinity_Symbol);
                rtrue;
            }
            PlayerTo(Garden_Stream);
            if (hollow_man hasnt general) {
                give hollow_man general;
                move Ace_of_Cups_card to player;
                "^Was any of that real? you wonder, as you relax in the sunshine. But then you realise you are clutching a tarot card which certainly is.";
            }
            rtrue;
        }
        ++hollow_man_cnt;
        if (hollow_man_cnt == 1) {
            "~I don't believe in that place any more. Hurry up please it's time!~";
        }
        if (hollow_man_cnt == 2) {
            "~Hurry up please it's time!~";
        }
        if (hollow_man_cnt == 3) {
            "~HURRY UP PLEASE IT'S TIME!~";
        }
        if (hollow_man_cnt == 4) {
            "He can't be bothered to say anything this time.";
        }
        if (hollow_man_cnt == 5) {
            "It really is time you thought of something.";
        }
        if (hollow_man_cnt == 6) {
            "Time and time again you haven't guessed correctly.";
        }
        if (hollow_man_cnt == 7) {
            "The hollow man must be beginning to think you can't take a hint.";
        }
        "~It's time!~ repeats the hollow man.";
    }
    if (action == ##Ask) {
        "Your question merely echoes inside him.";
    }
    rfalse;
];


[ ChateletBefore ;      
    if (action == ##Buy) {
        "~Q'est-ce que vous voulez acheter?~";
    }
    rfalse;
];


[ ShopkeeperLife ;      
    if (action == ##Give) {
        if (noun ~= fifty_franc_note) {
            "~Ceci n'est pas argent,~ he explains wearily.";
        }
        remove noun;
        give noun general;
        "He takes the money. ~Q'est-ce que vous desirez?~";
    }
    if (action == ##Answer) {
        if (fifty_franc_note hasnt general) {
            "It's not that he doesn't understand you, he's just obstructive for the sake of it.";
        }
        if (special_word == 'carte') {
            move tourist_map_of_Paris to player;
            Achieved(SCORE_MAP);
            give tourist_map_of_Paris moved;
            "Extremely reluctantly he serves you, giving you a tourist map of Paris.";
        }
        if (special_word == 'map') {
            "He refuses to understand you, on principle.";
        }
        "~Non.~  And he folds his arms defiantly. Perhaps he has no such thing.";
    }
    rfalse;
];


[ FoyerSouth ;  
    print "You pass between the steel walls and a light passes over you. Now you know how paper feels in a photocopier";
    if (child(player) == nothing) {
        print ".^";
        return Hall_of_Exhibits;
    }
    " - in this case, one which jams. Steel barriers appear across the corridor, and you are obliged to withdraw back to the foyer.^^After a moment, the barriers recede again.";
];


[ RevolvingDoorBefore ; 
    if (action == ##Turn or ##Push or ##Pull) {
        print "You give the revolving door a heave, and it begins to move; but you pause, out of breath, after only a half turn. ";
        if (Museum_Foyer.ne_to == Revolving_Door1) {
            Museum_Foyer.ne_to = Revolving_Door2;
        } else {
            Museum_Foyer.ne_to = Revolving_Door1;
        }
        Museum_Foyer.ne_to;     ! not popped
        generic_globvar = 0;
        @get_child SP -> SP ?~labelXXX;
      .labelXXX;
        ++generic_globvar;
        @get_sibling SP -> SP ?labelXXX;
      .labelXXX;
        @add SP generic_globvar -> SP;
        @je SP 1[?] ?~labelXXX;
        new_line;
        rtrue;
      .labelXXX;
        "Interestingly, there's something inside this segment of it.";
    }
    if (action == ##Enter) {
        R_Process(##Go,ne_obj);
        rtrue;
    }
    rfalse;
];


[ RevolvingDoorNorth ;  
    R_Process(##Push,door1);
    rtrue;
];


[ MuseumDoorBefore ;    
    if (action == ##Push or ##Turn or ##Pull) {
        "You revolve clockwise with the door, and wind up back adjacent to the foyer.";
    }
    rfalse;
];


[ BeachBallBefore ;     
    if (action == ##Take or ##Remove) {
        "The beach ball, a welcome dash of colour in this drab monochrome night, is simply too big, cumbersome and round to get hold of.";
    }
    if (action == ##PushDir) {
        if (second == s_obj && location == Museum_Foyer) {
            print "You pass between the steel walls and a light passes over you. Suddenly barriers spring out across the corridor, thumping into the beach ball which rapidly begins to deflate.^^There is a sharp hiss as you nimbly jump over the ball, and then a horrid clang as the barriers come together behind you.^";
            remove beach_ball;
            Achieved(SCORE_SECURITY);
            PlayerTo(Hall_of_Exhibits);
            rtrue;
        }
        AllowPushDir();
        rtrue;
    }
    rfalse;
];


[ BeachBallAfter ;      
    if (action == ##PushDir) {
        "You bounce the beach ball along in front of you.";
    }
    rfalse;
];


[ TarotBoxBefore ;      
    if (action == ##Receive) {
        if (noun hasnt card) {
            "Only cards will fit.";
        }
        rfalse;
    }
    rfalse;
];


[ DarkStaircaseBefore ; 
    if (action == ##Listen) {
        "It sounds like a thinly, but enthusiastically, attended football match. There are ragged German chants but only the word ~Eumenides~ pokes out.";
    }
    if (action == ##Go) {
        if (noun == s_obj or d_obj) {
            "You step downward in some confusion, but your senses are assailed by some kind of vision, of a ghastly circle of druids watching your every move and plotting, plotting...^^In horror you turn back.";
        }
        rfalse;
    }
    rfalse;
];


[ DarkStaircaseAfter ;  
    trigger_quotation(14);
    rfalse;
];


[ CovenCellDaemon ;     
    if (player notin self) {
        rtrue;
    }
    if (Coven_Cell hasnt general) {
        if (tablet_eaten == false) {
            give player general;
        }
        give Coven_Cell general;
        StartTimer(self,3);
        rtrue;
    }
    print "^A key turns in the door and Doktor Stein bursts in. He stops to pat the goat affectionately. ~Cheer up, Dobbin. As soon as I've finished this brutal human sacrifice I'll take you for your walk.~  He feeds Dobbin some sugar-cake. ~They make such marvellous cheese,~ he explains confidentially.^";
    deadflag = DIED;
    if (player has general) {
        "^In a trance, you go willingly to your (somewhat messy) sacrifice...";
    }
    "^Kicking and screaming, you are are dragged off to a grisly sacrifice...";
];


[ CovenCellBefore ;     
    if (verb == ##Ram) {
        "No, this is a goat. A ~ram~ is a kind of sheep.";
    }
    if (verb == ##Wait || player hasnt general) {
        rfalse;
    }
    "You seem to lack the will any more. The drug must have taken hold.";
];


[ GoatLife ;    
    if (action == ##Give) {
        if (noun has edible) {
            remove noun;
            print "The goat happily munches down ";
            Defart(inp1);
            ".";
        }
        if (noun == medicine_bottle && medicine_bottle has locked) {
            give medicine_bottle ~locked;
            give medicine_bottle open;
            "The medicine bottle cracks open in the goat's jaws!";
        }
        if (noun == daisy_chain) {
            "For heaven's sake, the daisy chain is far too useful for that.";
        }
        rfalse;
    }
    if (action == ##Order or ##Answer or ##Ask) {
        if (special_word == 'curses') {
            print "In a harsh voice, the goat intones:^^";
            VersionSub();
            rtrue;
        }
        "Grunt!";
    }
    rfalse;
];


[ CelldoorBefore ;      
    if (action == ##Knock) {
        "They're coming as fast as they can!  Ritual doesn't just happen by itself, you know.";
    }
    rfalse;
];


[ CabinetRoomBefore ;   
    if (action == ##Read) {
        if (noun in glass_cabinet) {
            "It's too dark to see much inside the cabinet.";
        }
        rfalse;
    }
    rfalse;
];


[ CabinetBefore ;       
    if (action == ##Attack) {
        if (self has open) {
            "Just how broken do you want it to be?";
        }
        give self open;
        StartTimer(self,5);
        "You smash the glass... noisily. Still, the cabinet is open now.";
    }
    if (action == ##Open or ##Close) {
        "The hinges are too secure.";
    }
    rfalse;
];


[ CabinetDAemon ;       
    if (game_section == T_HAMBURG && location ~= Coven_Cell) {
        print "^Finally reacting to the alarm you set off, Doktor Stein appears and steps toward you, clapping his hands sharply. And dozens of robed figures leap out of the darkness - but these are no security guards. Their faces are painted hideously and they betray no emotion as they pinion you tight...^^~So, Meldrew. It is all as it was prophesied,~ says Stein in a perfectly conversational tone as he forces your mouth open and makes you swallow a violet pill.^^~One of your apothecary ancestors made this drug!  Appropriate, no?~^^", "You feel queasy, but this is perhaps the least of your problems as they drag you off...^^";
        StartTimer(Coven_Cell,0);
        tablet_eaten = false;
        PlayerTo(Coven_Cell);
        rtrue;
    }
    rfalse;
];


[ RoundStoneBefore ;    
    if (action == ##Take) {
        if (self has general) {
            "Reach down the grating as you may, it remains just beyond reach.";
        }
        rfalse;
    }
    rfalse;
];


[ CafeAfter ;   
    if (action == ##Look) {
        if (Cups_and_Glasses has visited && complicated_looking_bomb has concealed) {
            "^Over in one corner, you can see a little square window, behind which must be the store of cups and glasses. Remembering this, you are distracted and unable to enjoy the entertainment. Even the table is annoying. It must have one leg shorter than the rest, or something, because it rattles now and then.";
        }
        rfalse;
    }
    if (action == ##Strike) {
        "You look rather conspicuous striking the rod on the cafe table, but everyone else assumes you're part of the cabaret. Anyway, the rod charges up as usual.";
    }
    rfalse;
];


[ CafeInitial ; 
    if (complicated_looking_bomb has concealed) {
        StartTimer(complicated_looking_bomb,10);
    }
    rfalse;
];


[ CafeEachTurn ;        
    if (complicated_looking_bomb hasnt concealed) {
        new_line;
        BombTicks();
    } else {
        print "^The table rattles again.^";
    }
    rfalse;
];


[ CafeTableBefore ;     
    if (action == ##LookUnder or ##Search) {
        if (complicated_looking_bomb has concealed) {
            give complicated_looking_bomb ~concealed;
            move complicated_looking_bomb to Ruined_Castle_Cafe;
            "Now don't panic, but there's a ticking bomb loosely taped to the underside of the table you're sitting at!";
        }
        "You make no further alarming discoveries.";
    }
    if (action == ##Enter) {
        "Even in a cafe as lively as this, your natural English inhibitions make it impossible for you to climb up on the table.";
    }
    rfalse;
];


[ BombDaemon ;  
    if (location ~= Ruined_Castle_Cafe) {
        rfalse;
    }
    if (complicated_looking_bomb hasnt concealed) {
        if (blue_wire ~= bomb_wires->0 || green_wire ~= bomb_wires->1 || black_wire ~= bomb_wires->2 || red_wire ~= bomb_wires->3) {
            print "^Click!  Perhaps there's more to bomb disposal than you thought.^";
        } else {
            print "^Click!  The timer runs out, but the bomb was disarmed. You pocket the timer and hide the rest of the evidence under the table.^";
            move timer_detonator to player;
            give timer_detonator ~static;
            remove complicated_looking_bomb;
            rtrue;
        }
    }
    print "^In a sudden cataclysm, there is an enormous explosion from your table, blowing out all the arrowslit windows, making a thunderous noise, starting a minor fire, and of course having one other consequence:^";
    deadflag = DIED;
    rfalse;
];


[ BombAfter ;   
    if (action == ##Take) {
        deadflag = PRISON;
        "Suddenly, someone catches sight of you with the bomb and screams. One thing leads to another, and, well, you know how it is with foreign legal systems. At least the bomb gets defused, and twenty-five years isn't all that long.";
    }
    rfalse;
];


[ TimerDaemon i j k ;   
    i = timer_detonator;
    j = parent(i);
    self.time_left = 0;
  .labelXXX;
    if (parent(i) ~= nothing) {
        i = parent(i);
        jump labelXXX;
    }
    if (location == i) {
        print "^You hear a sharp click!^";
        if (j == photographers_flash) {
            new_line;
            k = child(j);
            if (k == timer_detonator) {
                k = sibling(k);
            }
            if (k == nothing) {
                "But the flash does nothing.";
            }
            if (k ~= obj105_nasty_looking_red_battery) {
                "And the flash gives a pathetically small flash of light.";
            }
            print "The flash suddenly gives an enormous magnesium-flare flash, almost blinding in its intensity. Your eyes take a little while to adjust. ";
            if (location == Ruined_Castle_Cafe) {
                print "Consequently you can only hear as the cabaret audience gives you a round of applause for what they think is a magic trick.";
            }
            k = photographers_flash;
            k = parent(k);
            if (k == mirrored_device && photographers_flash hasnt general) {
                give photographers_flash general;
                print "Consequently you can only hear as the smudge on the horizon rises from the waves, becomes an enormous Kraken sea monster and lunges for the stone tower. (Considering this is supposed to be a Greek myth it feels surprisingly like a Japanese 1960s creature film.)  The Kraken swipes at you, overreaches itself and falls over forward, impaling itself extremely messily on the pharos. Your eyes just about recover by the time the rest of your body is crushed by its weight.^^Up on Mount Olympus, Zeus is still cross. ~Take me to your Leda~, you wittily demand, but this does not seem to improve matters. Poseidon also looks rather fed up, but luckily a sizeable faction of goddesses takes your side and arranges to have you resurrected...^";
                Achieved(SCORE_ANDROMEDA);
                remove photographers_flash;
                give Lighthouse ~visited;
                give Lighthouse ~scored;
                i = child(player);
              .labelXXX;
                if (i ~= nothing) {
                    j = sibling(i);
                    if (i ~= daisy_chain) {
                        move i to Lighthouse;
                        give i ~worn;
                    }
                    i = j;
                    jump labelXXX;
                }
                PlayerTo(Family_Tree);
                rtrue;
            }
            new_line;
            if (Austin in location) {
                "^Austin jumps with fear, then slouches back again into his ~cool~ pose.";
            }
            if (irate_squirrel_friend in location) {
                "^The squirrel covers his eyes with his paws for a moment.";
            }
        }
    }
    rfalse;
];


[ TimerBefore i ;       
    if (action == ##Read) {
        print "The timer seems quite simple to set. ";
        i = self.number;
        if (self.time_left ~= 0) {
            print "The clock is running, and currently at ";
            EnglishNumber(i);
            " minutes.";
        }
        if (i ~= 0) {
            BombTicks();
            rtrue;
        }
        "At present the clock is reset to zero.";
    }
    if (action == ##Set) {
        if (self.time_left ~= 0) {
            "It is already running!";
        }
        StartTimer(self,10);
        self.time_left = 1;
        "You wind back the timer to ten minutes, and off it goes.";
    }
    rfalse;
];


[ WireBefore i ;        
    if (action == ##Pull) {
        if (self has general) {
            "That one's already pulled out.";
        }
        give self general;
        print "You pull out ";
        Defart(inp1);
        print ". ";
        i = complicated_looking_bomb.time_left;
        complicated_looking_bomb.time_left = i + 1;
        bomb_wires->i = self;
        if (i == 3) {
            give complicated_looking_bomb general;
            "All four wires are now disconnected.";
        }
        rtrue;
    }
    rfalse;
];

[ BombTicks w i ;       
    print "The clock is ticking downwards, and is ";
    if (complicated_looking_bomb.number == 0) {
        print "right on the red zone!  ";
    } else {
        EnglishNumber(complicated_looking_bomb.number);
        print " minute";
        if (complicated_looking_bomb.number ~= 1) {
            print "s";
        }
        print " short of the red zone. ";
        if (complicated_looking_bomb.number == 5) {
            trigger_quotation(10);
        }
    }
    w = complicated_looking_bomb.time_left;
    if (w == 0) {
        "All four wires are plugged into the timer.";
    }
    if (w == 1) {
        print "Only the ";
    }
    if (w == 2) {
        print "The ";
    }
    if (w == 3) {
        print "The ";
    }
    if (w == 4) {
        "None of the wires are plugged in.";
    }
    i = w;
    if (red_wire has general) {
        PrintShortName(red_wire);
        --i;
        AndList(i);
    }
    if (green_wire has general) {
        PrintShortName(green_wire);
        --i;
        AndList(i);
    }
    if (blue_wire has general) {
        PrintShortName(blue_wire);
        --i;
        AndList(i);
    }
    if (black_wire has general) {
        PrintShortName(black_wire);
        --i;
        AndList(i);
    }
    if (w == 1) {
        " is unplugged.";
    }
    " are unplugged.";
];

[ AndList i ;   
    if (i == 1) {
        print " and ";
        rfalse;
    }
    if (i == 0) {
        rfalse;
    }
    print ", ";
    rtrue;
];


[ CupsAndGlassesEachTurn i ;    
    self.number = self.number + 1;
    i = self.number;
    if (i == 2) {
        "^There is a scuffling noise as some people gather up on the pavement outside the skylight.";
    }
    if (i == 3) {
        "^The men begin to talk like conspirators, but half in chants. You catch occasional sounds, but can make little sense of them.";
    }
    if (i == 4) {
        "^Alarmingly, you catch the odd word ~incendiary~ and are almost sure you can make out someone say ~accursed Meldrew~ (in the old-fashioned way, you know, so that ~accursed~ rhymes with ~dead~). Paranoia, bound to be. There surely can't really be a conspiracy of druid-worshippers out to get you?";
    }
    if (i == 5) {
        "^~The prophecy must be fulfilled!~ one warns, in an unearthly voice which suddenly carries. The others hush him.";
    }
    if (i == 6) {
        "^The men walk away, perhaps a few feet, perhaps a mile.";
    }
    rfalse;
];


[ CupsAndGlassesBefore ;        
    if (action == ##Search or ##Read or ##LookUnder) {
        if (model_ship hasnt general) {
            "Nothing else.";
        }
        give model_ship ~general;
        give model_ship moved;
        move model_ship to player;
        "In fact there's nothing hidden among the crates but a model sailing ship. You pick it up from force of habit.";
    }
    rfalse;
];


[ BottleShipBefore ;    
    if (action == ##Read) {
        if (ship_in_a_bottle notin player) {
            "You can't get a good look from here.";
        }
        if (game_section ~= T_TAROT) {
            "You admire the fine detail on the model sailing ship, and feel strangely drawn to it. But back out of the world of the Tarot box, nothing else could happen.";
        }
        if (location == Lighthouse) {
            "Bright sunshine glints off the glass bottle, making it impossible to see detail within.";
        }
        move ship_in_a_bottle to Souvenirs_Room;
        PlayerTo(Aboard_Ship,1);
        "You look very closely at the fine detail on the model sailing ship. Perhaps it's the distorting glass of the bottle, perhaps your romantic imagination, but the deck seems more detailed, the rigging might almost be swaying, the little figure by one mast might almost be alive...^^In fact, the closer you look the more sea-sick you feel.^^Thank heavens for the deck rail, something to hang on to while this moment of queasiness passes.";
    }
    rfalse;
];


[ ModelShipBefore ;     
    if (verb == ##Pull) {
        if (noun == model_ship) {
            remove model_ship;
            move stick_with_an_anchor to player;
            itobj = stick_with_an_anchor;
            give itobj moved;
            "As you pull the anchor chain, the masts fold inwards and the decks concertina back, until you're holding no more than a tight bundle of sticks.";
        }
        remove stick_with_an_anchor;
        move model_ship to player;
        itobj = model_ship;
        "As you pull the anchor chain, the sticks spring back outwards into the fully-rigged model sailing ship you knew of old.";
    }
    if (verb == ##Insert && second == mounted_bottle) {
        if (noun == model_ship) {
            "The model ship is, of course, far too large to fit into the bottle.";
        }
        if (noun == stick_with_an_anchor) {
            remove mounted_bottle;
            remove stick_with_an_anchor;
            move ship_in_a_bottle to player;
            give ship_in_a_bottle moved;
            Achieved(SCORE_SHIP);
            "The bundle of sticks will just fit through the bottle's neck. With a sudden spring, just as the last of the stick passes the neck, its masts fold out... and you have put the ship into the bottle.";
        }
    }
    if (verb == ##Wave && noun == stick_with_an_anchor) {
        "Ever the optimist.";
    }
    rfalse;
];


[ SeashoreDesc ;        
    print "A rough rocky sea shore below barely-climbable cliffs, against which inviting deep blue sea laps. It seems to be early morning, soon after dawn, from the look of the sun on the water.^";
    if (Lighthouse has visited && Lighthouse hasnt general) {
        give Lighthouse general;
        "^You can just make out the Pharos atop the cliffs. But it seems to be earlier, nearer dawn, than your last visit.";
    }
    rtrue;
];


[ SeaShoreBefore ;      
    if (action == ##Drink) {
        "Salt water!  No thanks.";
    }
    if (action == ##Swim) {
        if (poseiden_warning == false) {
            poseiden_warning = true;
            "Mmm. Here is your first and only warning: the sea is the domain of Poseidon, and he's not what you'd call a gentleman.";
        }
        deadflag = MYTH;
        "As you dive into the sea, you catch sight of Andromeda looking suddenly cheerful. It soon becomes apparent why, as a Kraken wakes from the depths of the ocean and swipes you for a quick snack. You seem to have replaced her as sacrifice... a Pyrrhic victory which even the prospect of stellification does little to assuage.";
    }
    rfalse;
];


[ AndromedaDesc ;       
    print "Avert your eyes. She is naked";
    if (amber_hairband has static) {
        print " (unless you count a hairband)";
    }
    print ", as was fashionable for human sacrifices: the victim left overnight without food or shelter until the dawn. It has to be said that she doesn't look all that keen to be rescued";
    if (photographers_flash hasnt general) {
        ".";
    }
    ".^^Of course you've already rescued her, in a sense, but that's not due to happen for an hour or two yet by her time, so you can hardly expect thanks. Gives you a nice warm feeling inside, all the same.";
];


[ AndromedaLife ;       
    if (action == ##Kiss) {
        "She evades you deftly, having had years of practice with Greek men.";
    }
    if (action == ##Attack) {
        "No need, if the sea-monster is all it's cracked up to be.";
    }
    if (action == ##Give) {
        if (noun has edible) {
            if (noun == Ekmek_Special) {
                remove noun;
                give amber_hairband ~static;
                give amber_hairband moved;
                move amber_hairband to player;
                "She smiles as if to say there's not much point watching her waist-line any more, and hungrily wolfs down her favourite dessert. As a gesture of thanks, she takes off her amber hairband and hands it you. Quickly she readopts her noble pose, however, just in case anyone else is looking.";
            }
            "She looks with obvious hunger, but her sense of duty wins out and she refuses.";
        }
        "She looks down her nose at you.";
    }
    if (action == ##Order or ##Ask or ##Answer) {
        "Andromeda hisses something contemptuous at you in Greek. (Attic, not Demotic, ironically enough, but then it's all Greek to you.)";
    }
    rfalse;
];


[ ClifftopEast ;        
    if (herd_of_goats hasnt general) {
        "The goats hiss and butt against you, not letting you through.";
    }
    print "The goats obediently part to allow you to get by.^";
    return Outside_Taverna;
];


[ GoatsLife ;   
    if (action == ##Order or ##Ask or ##Answer) {
        "Grunt!";
    }
    rfalse;
];


[ ThornyTreeBefore ;    
    if (action == ##Climb or ##Enter) {
        "The thorns deter you.";
    }
    rfalse;
];


[ TavernBefore ;        
    if (action == ##Buy) {
        "Given the language difficulty, you'd better resort to barter.";
    }
    rfalse;
];


[ TavernEachTurn i ;    
    i = random(13);
    if (i == 1) {
        "^The diners grumble and play backgammon viciously.";
    }
    if (i == 2) {
        "^The bartender gives you a hard stare.";
    }
    if (i == 3) {
        "^A fight breaks out, over an obscure question to do with somebody's second cousin.";
    }
    if (i == 4) {
        "^The gentle sound of bazouki music strikes up in the background, gradually rising to an intolerable pitch. After a moment comes a dull thud and a strangled noise, then blessed quiet.";
    }
    rfalse;
];


[ DessertBefore ;       
    if (action == ##Take) {
        if (self hasnt moved && copper_coin hasnt general) {
            "You can't understand a word of what the bartender says, but the drift is clear enough. Not until you pay for it.";
        }
        rfalse;
    }
    rfalse;
];


[ BartenderLife ;       
    if (action == ##Give) {
        if (noun == copper_coin) {
            remove copper_coin;
            give copper_coin general;
            "The bartender takes the coin wearily, with a ~how can you eat at a time like this?~ look.";
        }
        print "The bartender looks at ";
        Defart(noun);
        " with a glazed expression.";
    }
    if (action == ##Ask or ##Answer or ##Order) {
        "Being an educated person, the bartender speaks a little Latin and some Aramaic. Being an uneducated one, you don't, and communication proves impossible.";
    }
    if (action == ##Attack or ##Kiss) {
        "Here, surrounded by all his cronies?";
    }
    rfalse;
];


[ SacredEarthSouth ;    
    print "Zeus, chief of all the gods, appears and hurls a thunderbolt down just before you begin to cross into the Temple. ";
    if (big_electricians_switch has on) {
        deadflag = DIED;
        "With the kind of calculation only a god could make, Zeus has worked out exactly what would happen and aimed the thunderbolt so that it hits you straight in the back despite your attempt to weave about. Pretty impressive prediction, is your last thought.";
    }
    if (rod_of_luck has general) {
        print "Astonishingly, you beat the luck of the gods and slip into the temple just clear of the thunderbolt. ~Damn, missed!~ says a sepulchral voice from without.^";
        return Temple_of_Zeus;
    }
    deadflag = DIED;
    "With the luck of the gods, Zeus' thunderbolt strikes you just about exactly in the back, despite your attempts to weave about.";
];


[ SacredEarthAfter ;    
    trigger_quotation(4);
    rfalse;
];


[ TempleNorth ; 
    print "~I'll get you this time, worm!~ bellows Zeus, and hurls another thunderbolt, but now he's angry his aim is right off. You survive once more.^";
    return Sacred_Earth;
];


[ InscribedStoneDesc ;  
    print "The stone bears two inscriptions, side by side:^";
    0-->8 = 2 | 0-->8;
    print "^   #. [] = # +*+  __             an-ta re-im ka u bir ka-i^             |||       ^        |        |     ^   / # -+- :; # -+-                 ka ne : to-ro-ma ka ur^        |        |     ^                       ^   >>> -> # (---)         .je-fe-im ka ur-a an-ge to-ro-ma^             |||^";
    0-->8 = 65533 & 0-->8;
    rtrue;
];


[ SymbolDesc ;  
    0-->8 = 2 | 0-->8;
    print "   (---)  (---)  (---)  (---)^";
    0-->8 = 65533 & 0-->8;
    rtrue;
];


[ InnerSanctumInitial ; 
    StopDaemon(Cross_Centre);
    rfalse;
];


[ HomerLife ;   
    if (action == ##Order or ##Ask) {
        if (Homer has general) {
            "Homer is far too busy composing Book XIV of the Iliad.";
        } else {
            "Homer is asleep.^";
        }
        rfalse;
    }
    if (action == ##WakeOther) {
        if (Homer has general) {
            "Homer is awake already.";
        }
        give Homer general;
        Homer.time_left = 0;
        Homer.initial = "Homer sits half-awake, clutching his syrinx.";
        "Homer wakes up, with a start. ~I suppose you want the syrinx,~ he grumbles, ~they always do. There are three questions you must answer wisely. The usual deal.~^^(He seems to be under an enchantment and able to speak modern English, or at least American.)^^~First: who is the brother of Menelaus?~";
    }
    if (action == ##Attack) {
        "What, strike the greatest poet who ever lived?";
    }
    if (action == ##Answer) {
        if (Homer hasnt general) {
            "Homer is asleep.";
        }
        if (Homer.time_left == 3) {
            "Homer glares back.";
        }
        if (Homer.time_left == 0) {
            if (special_word == 'agamemnon') {
                Homer.time_left = 1;
                "~Mph,~ he says (untranslatably). ~But can ya see the future?  Who's gonna rule Alexandria after the fall of the guy they're gonna call Alexander the Big?~";
            }
          .labelXXX;
            HomerSleeps();
            "~Hopeless,~ he says dismissively and falls asleep.";
        }
        if (Homer.time_left == 1) {
            if (special_word == 'ptolemy') {
                Homer.time_left = 2;
                "~What's your favorite color?~";
            }
            jump labelXXX;
        }
        if (special_word == 'yellow') {
            Homer.initial = "Homer glares at you through sightless eyes.";
            move Pan_pipes to player;
            Homer.time_left = 3;
            Achieved(SCORE_HOMER);
            "Homer reluctantly hands you the syrinx. ~Now leave me alone, I got six books of the Iliad left to compose.~";
        }
        jump labelXXX;
    }
    rfalse;
];

[ HomerSleeps ; 
    give Homer ~general;
    Homer.initial = "Homer is asleep again, his syrinx tight in his arms.";
    rtrue;
];


[ PanPipesBefore i ;    
    if (action == ##Blow) {
        if (gas_mask has worn) {
            "With the gas mask on?";
        }
        if (location == Clifftop_Walk) {
            "The goats are amused by your derisory playing.";
        }
        if (location ~= Cave_Mouth) {
            "You sound off some dissonant notes.";
        }
        print "Seized by divine inspiration, you launch into J. S. Bach's ";
        i = random(5);
        if (i == 1) {
            print "Prelude number 1";
        }
        if (i == 2) {
            print "Passacaglia";
        }
        if (i == 3) {
            print "Chromatic Fantasy and Fugue";
        }
        if (i == 4) {
            print "partita for unaccompanied flute";
        }
        if (i == 5) {
            print "duet number four";
        }
        if (Oracle in location) {
            ".";
        }
        move Oracle to location;
        give flaming_bronze_urn ~static;
        give flaming_bronze_urn scenery;
        print ". Suddenly the great god Apollo appears before you!  As he speaks the very rock reverberates.^^   ~All wisdom is mine, mortal!^   Though you shall seek out your curse^   A thousand years and more. Now ask!~^^Apollo, as he vanishes, laughs in that style more recently popularised by Third World dictators and mad scientists. His priestess, the Oracle, steps out of the shadows.^";
        Achieved(SCORE_ORACLE);
        rtrue;
    }
    rfalse;
];


[ CrossInitial ;        
    StartDaemon(self);
    rfalse;
];


[ CrossBefore ; 
    if (verb == ##Take or ##Remove && noun == inscribed_stone or old_timber_spar && noun has scenery) {
        give noun ~scenery;
        give noun moved;
    }
    rfalse;
];


[ CrossAfter ;  
    if (verb == ##Take or ##Remove && noun == inscribed_stone or old_timber_spar && noun has static) {
        inscriptions.initial = "The two-foot opening is clear again.";
    }
    rfalse;
];


[ CrossDaemon ; 
    if (parent(statue_of_Poseidon) == Northeast_Cross && parent(statue_of_Demeter) == Northwest_Cross && parent(statue_of_Ares) == Southeast_Cross && parent(statue_of_Dionysus) == Southwest_Cross) {
        if (inscriptions has open) {
            rtrue;
        }
        give inscriptions open;
        Achieved(SCORE_TEMPLE);
        "^You hear the noise of stone grating against stone.";
    }
    rfalse;
];


[ InscriptsBefore ;     
    if (action == ##Receive) {
        if (self hasnt open) {
            rfalse;
        }
        if (noun ~= inscribed_stone or old_timber_spar) {
            CDefart(noun);
            print " would simply fall through.";
            new_line;
            rtrue;
        }
        if (noun == inscribed_stone) {
            self.initial = "The opening is securely wedged with the stone.";
        } else {
            self.initial = "The opening is securely wedged with the prop.";
        }
        give noun scenery;
        give noun ~moved;
        give noun ~scored;
        move noun to location;
        print "You wedge ";
        Defart(noun);
        print " across the opening.";
        new_line;
        rtrue;
    }
    rfalse;
];


[ GemBefore ;   
    if (action == ##Take) {
        if (self has moved) {
            rfalse;
        }
        print "There is a horrible screeching sound as a trap is sprung. ";
        if (inscribed_stone has scenery || old_timber_spar has scenery) {
            print "The walls begin to crush together: but are securely wedged, and cannot move...^^";
            rfalse;
        }
        deadflag = DIED;
        "The opening crushes together, and so do the walls!  They reduce you to powdered dog biscuit in a matter of seconds.";
    }
    rfalse;
];


[ ClassicalStatueBefore ;       
    if (action == ##Push) {
        "Perhaps you should say which way to push.";
    }
    if (action == ##PushDir) {
        if (inscriptions has open) {
            "The only direction to push the statue in is to the centre of the cross, but there's a pit open in the floor there.";
        }
        if (second ~= u_obj or d_obj) {
            AllowPushDir();
            rtrue;
        }
        rfalse;
    }
    rfalse;
];


[ ClassicalStatueAfter ;        
    if (action == ##PushDir) {
        "You heave the statue along with you.";
    }
    rfalse;
];


[ OracleLife ;  
    if (action == ##Attack or ##Kiss or ##ThrowAt) {
        "As you ought to know, the Oracle is inviolable.";
    }
    if (action == ##Ask or ##Order or ##Answer) {
        PriestTalk();
        rtrue;
    }
    rfalse;
];

[ DescribePacesPoetically i ;   
    if (i < 0) {
        i = 0 - i;
    }
    if (i == 0) {
        print "nought";
    }
    if (i == 1) {
        print "a pace";
        rfalse;
    }
    if (i >= 2) {
        EnglishNumber(i);
    }
    print " paces";
    rtrue;
];

[ PriestTalk ;  
    if (priest_cnt == 3) {
        "The priestess has told you enough.";
    }
    if (Oracle hasnt general) {
        "The priestess remains silent. Only by an offering can the wisdom of Apollo be gained.";
    }
    give Oracle ~general;
    ++priest_cnt;
    print "The priestess, Pythian oracle of Loxias, seems hardly to hear or understand: but goes into a trance, swaying to a sensuous rhythm: and chants, in English,^^";
    if (priest_cnt == 1) {
        print " ~As Hephaestus, master of the metals^  uncovered the gilden sunrise of Helicon^  so, in ";
        DescribePacesPoetically(StrongboxX);
        print " and ";
        DescribePacesPoetically(StrongboxY);
        print "^  when six arches have stood sixty years^  shall even a shade's remains be cast.~";
    }
    if (priest_cnt == 2) {
        print " ~Like the eruptions of Sicilian mounts^  shall come devices to ruin a castle,^  which no bronze armour can withstand^  save, it may be, a veil of the neck.~";
    }
    if (priest_cnt == 3) {
        print " ~Your ancestor, pestle in hand^  made the salve you shall need^  to defy the Druids' earthly band:^  take care, mortal, take heed.~";
    }
    new_line;
    if (priest_cnt == 1) {
        "^Apollo is what you might call an annoying git, were he not also an alarmingly powerful deity.";
    }
    rtrue;
];


[ UrnBefore ;   
    if (action == ##Receive) {
        if (noun == player) {
            R_Process(##Enter,self);
            rtrue;
        }
        remove noun;
        if (Oracle notin location) {
            "Perhaps the gods no longer inhabit such places. Your offering burns to nothing, for nothing.";
        }
        if (noun == fig) {
            move fig to Outside_Taverna;
            fig.initial = "The god Apollo moves in mysterious ways, for another fig has appeared on the tree.";
            give fig ~moved;
        }
        if (noun has edible) {
            give Oracle general;
            "You have pleased the god Apollo - Loxias, god of words and counsel, as he was once called!  Very wise.";
        }
        "The god Apollo is unimpressed with your offering, which feeds the eternal flame.";
    }
    if (action == ##Enter) {
        "You have no desire to be burnt.";
    }
    rfalse;
];


[ LighthouseDesc ;      
    print "You stand atop a pinnacle of stone, on an early Pharos, or lighthouse. Considerately enough, the builders have provided a spiral staircase down. ";
    if (Sea_Shore has visited) {
        print "The cliffs below are familiar, but it's a little later in the day than your arrival on the sea shore. ";
    }
    if (photographers_flash has general) {
        print "Much traffic plies across the bay, and trade seems to be picking up again now that the Kraken has gone.";
    } else {
        print "There seems to be very little traffic at the moment, though a smudge on the horizon might possibly be a quinquireme.";
    }
    print "^^In the centre of the pinnacle is a marvellous device of polished bronze mirrors, its open end pointed out across the bay. ";
    if (photographers_flash has general) {
        "The Mediterranean sparkles in the hot afternoon sun.";
    } else {
        "The sun is rising and the sky is clear blue over the Mediterranean: it's going to be a beautiful day.";
    }
    rfalse;
];


[ LighthouseDown ;      
    FlashFallsOut();
    return Greek_Frieze1;
];

[ FlashFallsOut ;       
    if (photographers_flash in mirrored_device) {
        print "(Out of the corner of your eye, you notice the flash fall out of the device.)^";
        move photographers_flash to Lighthouse;
    }
    rtrue;
];

[ GoDownLighthouse ;    
    if (verb == ##Go && noun == d_obj) {
        FlashFallsOut();
    }
    rfalse;
];


[ LandlubberBefore ;    
    "Here aboard ship, such a landlubber's direction seems inappropriate.";
];


[ OnShipEachTurn ;      
    if (port_obj in compass) {
        rfalse;
    }
    move n_obj to flagpole;
    move s_obj to flagpole;
    move e_obj to flagpole;
    move w_obj to flagpole;
    move ne_obj to flagpole;
    move nw_obj to flagpole;
    move se_obj to flagpole;
    move sw_obj to flagpole;
    move port_obj to compass;
    move starboard_obj to compass;
    move aft_obj to compass;
    move fore_obj to compass;
    move some_landlubbers_direction to compass;
    StartDaemon(self);
    rfalse;
];


[ OnShipDaemon ;        
    if (location has ship_flag) {
        rfalse;
    }
    StopDaemon(self);
    remove port_obj;
    remove starboard_obj;
    remove aft_obj;
    remove fore_obj;
    remove some_landlubbers_direction;
    move n_obj to compass;
    move s_obj to compass;
    move e_obj to compass;
    move w_obj to compass;
    move ne_obj to compass;
    move nw_obj to compass;
    move se_obj to compass;
    move sw_obj to compass;
    rfalse;
];


[ RiggingBefore ;       
    if (action == ##Enter or ##Climb) {
        R_Process(##Go,u_obj);
        rtrue;
    }
    rfalse;
];


[ OnMastWest ;  
    print "You wander out onto the flagpole, which bows and bends alarmingly, until suddenly...^^Crack!  And you are falling";
    if (flag_of_the_British_Merchant_Navy hasnt general) {
        deadflag = DIED;
        ", plummeting, head over heels to the hard wooden deck and the inevitable iron fixtures...";
    }
    move flag_of_the_British_Merchant_Navy to Aboard_Ship;
    give flag_of_the_British_Merchant_Navy ~concealed;
    give flag_of_the_British_Merchant_Navy ~general;
    remove flagpole;
    move old_timber_spar to Aboard_Ship;
    move player to Aboard_Ship;
    location = Aboard_Ship;
    Achieved(SCORE_FLAG);
    "... but gracefully, as the flag billows out into a parachute, until it suddenly tears out of your hand and you come down in an ignominious heap.";
];


[ OnMastDown ;  
    if (flag_of_the_British_Merchant_Navy has general) {
        give flag_of_the_British_Merchant_Navy ~general;
        print "You are obliged to leave hold of the flag en route.^^";
    }
    return Aboard_Ship;
];


[ OnMastBefore ;        
    if (action == ##Jump) {
        print "You jump (madly) from the crow's nest ";
        if (flag_of_the_British_Merchant_Navy has general) {
            print "(tearing the flag as you go) ";
        }
        deadflag = DIED;
        "to a colourful demise on the deck below.";
    }
    if (action == ##Strike or ##Point) {
        "Up here?";
    }
    rfalse;
];


[ OnMastAfter ; 
    if (action == ##Drop) {
        move noun to Aboard_Ship;
        if (noun == medicine_bottle && noun has locked) {
            give medicine_bottle ~locked;
            give medicine_bottle open;
            "The medicine bottle drops like a stone to the deck far below, where it cracks like an egg.";
        }
        "Dropped a long way down, onto the deck.";
    }
    rfalse;
];


[ FlagpoleBefore ;      
    if (action == ##Take or ##Turn or ##Push or ##Pull) {
        "The flagpole is very securely fixed to the main mast.";
    }
    rfalse;
];


[ FlagBefore ;  
    if (self in comfortable_bed && verb == ##Take or ##Remove) {
        "The flag seems perfect for the bed as it is.";
    }
    if (self notin Up_the_Mast) {
        rfalse;
    }
    if (action == ##Take or ##Pull) {
        give flag_of_the_British_Merchant_Navy general;
        "You take hold of the tassels of the flag in one hand (though it won't pull away from the pole).";
    }
    if (action == ##Drop or ##Remove) {
        give flag_of_the_British_Merchant_Navy ~general;
        "You leave hold of the tassels of the flag.";
    }
    rfalse;
];


[ TimberSparAfter ;     
    if (action == ##Take) {
        if (old_timber_spar hasnt general) {
            rfalse;
        }
        give old_timber_spar ~general;
        StartTimer(bean_pole,5);
        rfalse;
    }
    rfalse;
];


[ ProwCantGo ;  
    print "You can only go aft.^";
    trigger_quotation(11);
    rtrue;
];


[ BranchBefore ;        
    if (action == ##Wave) {
        if (Jemima in location) {
            "Jemima, who has hay fever, is extremely annoyed by this. So it wasn't a turn entirely wasted.";
        }
        if (location ~= Hollow || parent(corn_crake) == nothing) {
            "The pollen given off makes you sneeze a little, but fails to give you the bird. (Worth a try, anyway.)";
        }
        remove corn_crake;
        "The bird is so startled by the cloud of pollen from the waved branch that she leaps into the skies, squawking with flighty anxiety.";
    }
    rfalse;
];


[ SternDown ;   
    if (capstan hasnt general) {
        "You shin precariously down the anchor chain, but reach the end while still hanging very far above the... water? quicksand?  Concentrating very carefully, you heave yourself back aboard and pant with relief.";
    }
    move player to Souvenirs_Room;
    location = Souvenirs_Room;
    "You shin down the anchor chain, down, down, under the keel of the Lady Magdalena, down until there is nothing but the glassy mist and the endless chain...^^...And the approaching soft, spongy, pinkish sand-bank, which welcomes you with its warmth: you step ashore, and immediately sink into the clammy, living sand, until you are engulfed altogether... and pass out.^^However, the hard attic floorboards beneath your back soon wake you again.";
];


[ CapstanBefore ;       
    if (action == ##Turn or ##Push or ##PushDir) {
        print "You heave away at the capstan, ";
        if (capstan has general) {
            give capstan ~general;
        } else {
            give capstan general;
            print "un";
        }
        "winding the great anchor chain.";
    }
    if (action == ##Climb or ##Enter) {
        R_Process(##Go,d_obj);
        rtrue;
    }
    rfalse;
];


[ GardenStreamBefore ;  
    if (action == ##Swim) {
        "Too shallow for comfort.";
    }
    if (action == ##Drink) {
        "Just about drinkable. Not much fun, though.";
    }
    rfalse;
];


[ CoalBunkerAfter ;     
    if (action == ##Close) {
        give metal_door ~open;
        rfalse;
    }
    if (action == ##Open) {
        give metal_door open;
        rfalse;
    }
    if (action == ##Unlock) {
        give metal_door ~locked;
        rfalse;
    }
    if (action == ##Lock) {
        give metal_door locked;
        rfalse;
    }
    rfalse;
];


[ StreamBefore ;        
    if (action == ##Drink) {
        "It's a warm, not unpleasant taste, silt and algae.";
    }
    if (action == ##Enter) {
        R_Process(##Swim);
        rtrue;
    }
    rfalse;
];


[ ShrubBefore ; 
    if (action == ##Climb or ##Enter) {
        "It's only three feet high!";
    }
    if (action == ##Turn) {
        "You swivel the plant's tub.";
    }
    if (action == ##Push or ##PushDir or ##Pull) {
        if (self has general) {
            rfalse;
        }
        give self general;
        move timber_hatch to location;
        Beside_the_Wall.d_to = timber_hatch;
        move self to location;
        "Pushing the shrub a little aside reveals an unsightly old timber hatch, about three feet in diameter.";
    }
    rfalse;
];


[ StoneWallBefore ;     
    if (action == ##Climb or ##Enter) {
        "The old, carved garden wall is one of the treasures of rural England, and you're not nearly desperate enough to crumble it further into ruin.";
    }
    rfalse;
];


[ StoneWallLife ;       
    if (action == ##Order or ##Answer or ##Ask) {
        if (verb ~= ##Lagach) {
            "The old wall is mute.";
        }
        "For a moment, the slightest of zephyrs blows from the wall, but dies away to nothing.";
    }
    rfalse;
];


[ TimberHatchAfter ;    
    if (action == ##Open) {
        give Wine_Cellars light;
        print (string) self.initial;
        new_line;
        rtrue;
    }
    if (action == ##Close) {
        give Wine_Cellars ~light;
        rfalse;
    }
    rfalse;
];


[ FamilyTreeInitial ;   
    MazeX = 4;
    MazeY = 6;
    rfalse;
];


[ FamilyTreeNorth ;     
    if (player in garden_roller) {
        return Maze;
    }
    "You can't go that way.^^Now, this takes a little explaining... These days, it isn't easy to keep up a house the size of Meldrew Hall, and your family has had to strike a bargain with the National Trust that the house should be open to the public in the summer months. The maze is so popular with visitors that the grass has worn away, and it's being reseeded at the moment, so you shouldn't go treading all over it.";
];


[ PlaneTreeBefore ;     
    if (action == ##Climb) {
        R_Process(##Go,u_obj);
        rtrue;
    }
    rfalse;
];


[ WellAfter ;   
    if (action == ##Receive) {
        move noun to hanging_cord;
        give CR ~general;
        "It plummets down into the well.";
    }
    rfalse;
];


[ BeanStalkBefore ;     
    if (action == ##Jump) {
        deadflag = DIED;
        "You fall and break your neck!";
    }
    rfalse;
];


[ BeanStalkAfter ;      
    if (action == ##Drop) {
        move noun to Family_Tree;
        if (noun == medicine_bottle && noun has locked) {
            print "The medicine bottle plummets to the earth below.^";
            give medicine_bottle ~locked;
            give medicine_bottle open;
            rtrue;
        }
        CDefart(inp1);
        " plummets to the earth below.";
    }
    rfalse;
];


[ RollerBefore ;        
    if (action == ##Go) {
        if (self hasnt on) {
            print "(The motor isn't on at the moment.)^";
        } else {
            if (noun == u_obj or d_obj) {
                print "The garden roller is a somewhat horizontal conveyance.^";
                return 2;
            }
            if (location == Garden_Stream && noun == s_obj) {
                print "The garden roller will never fit.^";
                return 2;
            }
            if (location == Lawn_Ornaments && noun == e_obj) {
                print "Philistine!  How dare you try to drive a garden roller over a Roman mosaic.^";
                return 2;
            }
            rtrue;
        }
        rfalse;
    }
    rfalse;
];


[ RollerEachTurn ;      
    if (player notin self || self hasnt on) {
        rfalse;
    }
    if (location == Lawn_Ornaments && plaster_statuette in Lawn_Ornaments) {
        print "^Crunch!  The garden roller ran into something there.^";
        give CR light;
        remove plaster_statuette;
        move ancient_well to Lawn_Ornaments;
        give Lawn_Ornaments general;
    }
    if (medicine_bottle in location && medicine_bottle has locked && location ~= Garage) {
        print "^Oh dear. The medicine bottle, which you negligently left lying in the path of the roller, seems to have been cracked.^";
        give medicine_bottle open;
        give medicine_bottle ~locked;
    }
    rfalse;
];


[ WeedKillerBefore i ;  
    if (action == ##Squeeze or ##Push) {
        if (self has general) {
            "Nothing emerges. The bottle must be empty.";
        }
        give self general;
        if (location == Wall_of_Thorns) {
            "A valiant but doomed idea. The weed killer harms barely a single tendril of the wall.";
        }
        if (location == Vegetable_Garden) {
            remove runner_bean_plant;
            Vegetable_Garden.u_to = nothing;
            "Congratulations. You have devastated the runner-bean plant.";
        }
        if (location == Family_Tree) {
            "Happily, the weed killer makes no impression on the beautiful old tree.";
        }
        if (game_section == T_GARDEN) {
            ! no code
        } else {
            if (game_section ~= T_GARDEN_PAST) {
                "A stream of weed-killer emerges, but evaporates almost at once, just as well considering the vile smell.";
            }
            if (location ~= Maze_Foundations) {
                ! no code
            } else {
                i = MazeBoundary(MazeX,MazeY);
                if (i == 0) {
                    "A stream of weed-killer soaks into the grass, and does nothing obvious.";
                }
                WeedkillerX = MazeX;
                WeedkillerY = MazeY;
                StartDaemon(self);
                "A stream of weed-killer soaks into the seedbed, and does nothing obvious.";
            }
        }
        "A stream of weed-killer soaks into the earth, and does nothing obvious.";
    }
    rfalse;
];


[ WeedKillerDaemon ndx ;        
    if (game_section ~= T_GARDEN_PAST) {
        ndx = WeedkillerX + 9 * WeedkillerY;
        garden_array->ndx = 48;
        StopDaemon(self);
    }
    rfalse;
];


[ SpadeShort ;  
    if (self has general) {
        print "spade";
    } else {
        print "bladed agricultural implement";
    }
    rtrue;
];


[ SpadeBefore ; 
    if (action == ##Read) {
        if (spade has general) {
            rfalse;
        }
        give spade general;
        spade.&name-->3 = 'spade';
        "On second thoughts, let's just call a spade a spade.";
    }
    rfalse;
];

[ MazeBoundary x y cell ;       
    if (x < 0 || x > 8 || y < 0 || y > 6) {
        rfalse;
    }
    cell = garden_array->(9 * y + x);
    if (cell == '0') {
        rfalse;
    }
    if (cell == '1') {
        rtrue;
    }
    rtrue;
];

[ TestMazeConfines x y cell ;   
    if (x == 0 or 8 || y == 0 or 6) {
        cell = garden_array->(9 * y + x);
        if (cell == '0') {
            rfalse;
        }
        if (cell == '1') {
            return 2;
        }
    }
    return MazeBoundary(x,y);
];

[ CheckMaze x y z ;     
    z = TestMazeConfines(x,y);
    if (z == 2) {
        z = 0;
    }
    return z;
];

[ CheckMaze2 x y z ;    
    z = TestMazeConfines(x,y);
    if (z == 1) {
        z = 0;
    }
    if (z == 2) {
        z = 1;
    }
    return z;
];


[ UpTreeBefore ;        
    if (action == ##Jump) {
        deadflag = DIED;
        "You fall and break your neck!";
    }
    rfalse;
];


[ LayoutDesc y x wallp ;        
    print "The layout is roughly as follows:^^";
    0-->8 = 2 | 0-->8;
    y = 0;
  .labelXXX;
    if (y <= 6) {
        print "    ";
        x = 0;
      .labelXXX;
        if (x <= 8) {
            wallp = MazeBoundary(x,y);
            if (wallp == false) {
                print "...";
            }
            if (wallp == true) {
                print "###";
            }
            ++x;
            jump labelXXX;
        }
        new_line;
        ++y;
        jump labelXXX;
    }
    0-->8 = 65533 & 0-->8;
    rfalse;
];

[ MazeDescribe numwalls n_side e_side s_side w_side ;   
    --MazeY;
    n_side = MazeBoundary(MazeX,MazeY);
    ++MazeY;
    ++MazeX;
    s_side = MazeBoundary(MazeX,MazeY);
    --MazeX;
    ++MazeY;
    e_side = MazeBoundary(MazeX,MazeY);
    --MazeY;
    --MazeX;
    w_side = MazeBoundary(MazeX,MazeY);
    ++MazeX;
    numwalls = n_side + s_side + e_side + w_side;
    if (numwalls == 4) {
        "^You are hedged in on all sides.";
    }
    if (numwalls == 3) {
        print "^You are hedged in and can only go back ";
    }
    if (numwalls == 2) {
        print "^The corridor runs ";
    }
    if (numwalls == 1) {
        print "^At this junction, the maze runs ";
    }
    if (numwalls == 0) {
        "^This is a crossroads in the maze.";
    }
  .labelXXX;
    if (numwalls < 4) {
        if (n_side == false) {
            print "north";
            n_side = true;
        } else if (s_side == false) {
            print "east";
            s_side = true;
        } else if (e_side == false) {
            print "south";
            e_side = true;
        } else if (w_side == false) {
            print "west";
            w_side = true;
        }
        ++numwalls;
        if (numwalls == 4) {
            ".";
        }
        if (numwalls == 3) {
            print " and ";
        }
        if (numwalls == 2) {
            print ", ";
        }
        if (numwalls == 1) {
            print ", ";
        }
        jump labelXXX;
    }
    rtrue;
];


[ MazeBefore x y ;      
    if (action == ##Exit) {
        "Remember the poor grass!";
    }
    if (action == ##Go) {
        if (garden_roller hasnt on) {
            "But the garden roller is switched off, and won't drive.";
        }
        if (MazeX == 4 && MazeY == 6 && noun == s_obj) {
            rfalse;
        }
        if (MazeX == 0 && MazeY == 1 && noun == w_obj) {
            rfalse;
        }
        x = 100;
        y = 100;
        if (noun == n_obj) {
            x = MazeX;
            y = MazeY - 1;
        }
        if (noun == e_obj) {
            x = MazeX + 1;
            y = MazeY;
        }
        if (noun == s_obj) {
            x = MazeX;
            y = MazeY + 1;
        }
        if (noun == w_obj) {
            x = MazeX - 1;
            y = MazeY;
        }
        if (x == 100) {
            "The maze is constructed with rectangular grid-lines of privet, so you can only proceed north, east, south or west.";
        }
        if (MazeBoundary(x,y) == 1) {
            "The privet hedge is in the way.";
        }
        MazeX = x;
        MazeY = y;
        if (location == Patio_in_Maze) {
            location = Maze;
            move garden_roller to Maze;
        }
        if (MazeX == 7 && MazeY == 5) {
            location = Patio_in_Maze;
            move garden_roller to Patio_in_Maze;
        }
        trigger_quotation(39);
        R_Process(##Look);
        rtrue;
    }
    rfalse;
];


[ MazeAfter ;   
    if (action == ##Look) {
        MazeDescribe();
        rtrue;
    }
    rfalse;
];


[ PatioBefore ; 
    if (action == ##Go) {
        if (noun == d_obj or u_obj) {
            rfalse;
        }
        if (player notin garden_roller) {
            "Mustn't tread on the grass now!";
        }
        return RunRoutines(Maze,before);
    }
    rfalse;
];


[ PatioAfter ;  
    if (action == ##Look) {
        MazeDescribe();
        rtrue;
    }
    rfalse;
];


[ RoseBefore ;  
    if (action == ##Insert or ##Give && second == statue_of_Diana) {
        "It would look perfect in Diana's hair, but her head is far too high to reach.";
    }
    rfalse;
];


[ ViewpointBefore ;     
    if (action == ##Read) {
        if (player in garden_roller && noun == plaque) {
            "The writing's too small from here.";
        }
        rfalse;
    }
    if (action == ##Go) {
        if (noun == e_obj && player notin garden_roller) {
            "For the sake of the grass, you can't go that way.";
        }
        rfalse;
    }
    rfalse;
];


[ FollyAfter ;  
    MazeX = 0;
    MazeY = 1;
    rfalse;
];


[ BeanpoleAfter ;       
    if (action == ##Take) {
        if (self hasnt general) {
            rfalse;
        }
        give self general;
        StartTimer(self,5);
        rfalse;
    }
    rfalse;
];


[ BeanpoleDaemon ;      
    if (game_section == T_GARDEN_PAST) {
        print "^There is a great rumbling sound and then a thunderous avalanche of stone cascades down the hillside into the valley. The Folly has collapsed!  Capability Meldrew and his workmen come running to investigate. In the ensuing confusion, they come across you and, of course, blame you for their incompetent masonry. You are hauled up before the county assizes...^";
        deadflag = AUSTRALIA;
    }
    rfalse;
];


[ FoundationsBefore x y ;       
    if (action == ##Go) {
        if (MazeX == 4 && MazeY == 6 && noun == s_obj) {
            rfalse;
        }
        if (MazeX == 0 && MazeY == 1 && noun == w_obj) {
            rfalse;
        }
        x = 100;
        y = 100;
        if (inp1 == n_obj) {
            x = MazeX;
            y = MazeY - 1;
        }
        if (inp1 == e_obj) {
            x = MazeX + 1;
            y = MazeY;
        }
        if (inp1 == s_obj) {
            x = MazeX;
            y = MazeY + 1;
        }
        if (inp1 == w_obj) {
            x = MazeX - 1;
            y = MazeY;
        }
        if (inp1 == ne_obj) {
            x = MazeX + 1;
            y = MazeY - 1;
        }
        if (inp1 == nw_obj) {
            x = MazeX - 1;
            y = MazeY - 1;
        }
        if (inp1 == se_obj) {
            x = MazeX + 1;
            y = MazeY + 1;
        }
        if (inp1 == sw_obj) {
            x = MazeX - 1;
            y = MazeY + 1;
        }
        if (x == 100) {
            "The maze is only two-dimensional.";
        }
        if (CheckMaze2(x,y) ~= 0) {
            "The wooden fence is in the way.";
        }
        MazeX = x;
        MazeY = y;
        LookSub(true);
        rtrue;
    }
    rfalse;
];


[ FountdationsAfter ;   
    if (action == ##Look) {
        MazeOldDescribe();
        rtrue;
    }
    if (action == ##Drop) {
        deadflag = PARADOX;
        "You feel an alarming wrench in your insides.";
    }
    rfalse;
];

[ MazeOldDescribe numwalls n_side e_side s_side w_side cornerp ;        
    numwalls = MazeBoundary(MazeX,MazeY);
    if (MazeX == 7 && MazeY == 5) {
        numwalls = 2;
    }
    new_line;
    if (numwalls == 1) {
        print "You are standing on a bed in which seeds have been recently planted. ";
    }
    if (numwalls == 0) {
        print "You stand on a rough patch of grass. ";
    }
    if (numwalls == 2) {
        print "You stand on a rough patch of grass, marked out with whitewash. ";
    }
    --MazeY;
    n_side = CheckMaze(MazeX,MazeY);
    ++MazeY;
    ++MazeX;
    s_side = CheckMaze(MazeX,MazeY);
    --MazeX;
    ++MazeY;
    e_side = CheckMaze(MazeX,MazeY);
    --MazeY;
    --MazeX;
    w_side = CheckMaze(MazeX,MazeY);
    ++MazeX;
    numwalls = n_side + s_side + e_side + w_side;
    if (numwalls == 4) {
        print "There are seedbeds on all sides. ";
    } else {
        if (numwalls == 3) {
            print "There are seedbeds to ";
        }
        if (numwalls == 2) {
            print "There are seedbeds to the ";
        }
        if (numwalls == 1) {
            print "There is a seedbed to the ";
        }
        if (numwalls == 0) {
            jump labelXXX;
        }
      .labelXXX;
        if (numwalls > 0) {
            if (n_side == true) {
                print "north";
                n_side = false;
            } else if (s_side == true) {
                print "east";
                s_side = false;
            } else if (e_side == true) {
                print "south";
                e_side = false;
            } else if (w_side == true) {
                print "west";
                w_side = false;
            }
            --numwalls;
            if (numwalls == 0) {
                print ". ";
            } else {
                if (numwalls == 1) {
                    print " and ";
                }
                if (numwalls == 2) {
                    print ", ";
                }
                if (numwalls == 3) {
                    print ", ";
                }
                jump labelXXX;
            }
        }
    }
  .labelXXX;
    --MazeY;
    n_side = CheckMaze2(MazeX,MazeY);
    ++MazeY;
    ++MazeX;
    s_side = CheckMaze2(MazeX,MazeY);
    --MazeX;
    ++MazeY;
    e_side = CheckMaze2(MazeX,MazeY);
    --MazeY;
    --MazeX;
    w_side = CheckMaze2(MazeX,MazeY);
    ++MazeX;
    numwalls = n_side + s_side + e_side + w_side;
    if (numwalls == 0) {
        new_line;
        rfalse;
    }
    if (numwalls == 1) {
        print "There is a fence to the ";
    }
    if (numwalls == 2) {
        print "There are fences to ";
    }
    if (numwalls == 3) {
        print "There are fences to ";
    }
    if (numwalls == 4) {
        "This is a fenced-in area.";
    }
    if (numwalls == 2 && s_side == true && w_side == true) {
        cornerp = true;
    }
  .labelXXX;
    if (numwalls > 0) {
        if (n_side == true) {
            print "north";
            n_side = false;
        } else if (s_side == true) {
            print "east";
            s_side = false;
        } else if (e_side == true) {
            print "south";
            e_side = false;
        } else if (w_side == true) {
            print "west";
            w_side = false;
        }
        --numwalls;
        if (numwalls == 0) {
            if (cornerp == true) {
                "; uncouth rustics are at work to the south, but fortunately they haven't yet seen you.";
            }
            ".";
        }
        if (numwalls == 1) {
            print " and ";
        }
        if (numwalls == 2) {
            print ", ";
        }
        if (numwalls == 3) {
            print ", ";
        }
        jump labelXXX;
    }
    rtrue;
];


[ PlantingAfter ;       
    deadflag = AUSTRALIA;
    rfalse;
];


[ BrickPathInitial ;    
    trigger_quotation(22);
    rfalse;
];


[ HedgeryNorth ;        
    give flock_of_sparrows general;
    print "Your first step towards the sparrows startles them into the air, and they whirl upwards and around with panic, chirping their alarm.^";
    return Summer_House;
];


[ SummerHouseSouth ;    
    if (flock_of_sparrows has general) {
        give flock_of_sparrows ~general;
        print "As you step out, the sparrows gradually settle back down again.^";
    }
    return Hedgery;
];


[ SummerHouseAfter ;    
    if (action == ##Look) {
        if (flock_of_sparrows hasnt general) {
            print "^Sparrows chirp happily away to themselves around the high gutter.^";
        } else {
            print "^Startled sparrows circle high in the sky, showing no signs of calming down.^";
        }
        rfalse;
    }
    rfalse;
];


[ ChainBefore ; 
    if (self hasnt moved) {
        "The watch is just within sight, but quite beyond reach.";
    }
    if (action == ##Swing or ##Wave) {
        "You come dangerously close to hypnotising yourself.";
    }
    rfalse;
];


[ BoardBefore ; 
    if (action == ##Open or ##Push or ##Pull or ##Turn) {
        if (irate_squirrel_friend in location) {
            "The squirrel rears up and nips you on the wrist. You withdraw, hurt.";
        }
        rfalse;
    }
    rfalse;
];


[ CrackBefore ; 
    if (action == ##Search) {
        "Through the crack you can see sunlight on the summer-house floorboards.";
    }
    rfalse;
];


[ CrackAfter ;  
    if (action == ##Receive) {
        if (noun == bunch_of_nuts) {
            give loose_board open;
            move bunch_of_nuts to irate_squirrel_friend;
            move irate_squirrel_friend to Summer_House;
            GoNuts();
            Summer_House.n_to = Behind_Summer_House;
            "You throw the nuts through the loose board into the summer house, and the squirrel jumps up after them, battering through the board and opening up a hole in the wall.";
        }
        move noun to Summer_House;
        "Thrown through the loose board into the summer house.";
    }
    rfalse;
];


[ SquirrelLife ;        
    if (action == ##Show) {
        if (noun == bunch_of_nuts) {
            "The squirrel finds them of consuming interest.";
        }
        rfalse;
    }
    if (action == ##Give) {
        if (noun has edible) {
            remove noun;
            if (noun == bunch_of_nuts) {
                GoNuts();
                "The squirrel is extremely pleased, and devours the nuts delightedly. You have an uncomfortable feeling of having been suckered.";
            }
            print "Grateful for any food he can get, however unsuitable, the squirrel eagerly consumes ";
            if (noun == Ekmek_Special) {
                print "the ";
            }
            Defart(noun);
            ". He does of course feel no obligation towards you at all as a result, so don't expect any favours.";
        }
        rfalse;
    }
    rfalse;
];

[ GoNuts ;      
    irate_squirrel_friend.initial = "The squirrel sits here, watchfully pecking away at the nuts.";
    rtrue;
];

[ DescribePaces x y ;   
    if (x ~= 0) {
        DescribePacesPoetically(x);
        if (x > 0) {
            print " east";
        } else {
            print " west";
        }
        if (y ~= 0) {
            print " and ";
        }
    }
    if (y ~= 0) {
        DescribePacesPoetically(y);
        if (y > 0) {
            print " north";
        } else {
            print " south";
        }
    }
    rtrue;
];


[ CroquetLawnDesc ;     
    print "One of the most beautiful hedge-enclosed, tree-muffled lawns in England, and just out of sight of the house, this has been a jewel in the gardens for centuries. Since the twenties it has also been a croquet lawn, of the regulation twenty-four yards square, laid out with a central coloured peg and six peripheral hoops";
    if (self.nw_to == nothing) {
        ".";
    }
    ". The hedge is broken slightly to the northwest.";
];


[ CroquetLawnInitial ;  
    DigX = 0;
    DigY = 0;
    rfalse;
];


[ CroquetLawnShort ;    
    if (DigX == 0 && DigY == 0) {
        rfalse;
    }
    if (before_short_desc == true) {
        rfalse;
    }
    print "Croquet Lawn (";
    DescribePaces(DigX,DigY);
    print " of the peg)";
    rtrue;
];


[ AstrolabeBefore ;     
    if (action == ##Remove) {
        if (noun == second) {
            "It is in one piece.";
        }
        rfalse;
    }
    if (action == ##Search) {
        if (parent(golden_astrolabe) ~= Palace_Balustrade || golden_astrolabe has moved) {
            "You catch a fascinating, but all too brief, glimpse of something grey, angular and tall... which slips out of view as your unsteady hand shakes.";
        }
        print "Through the golden eyepiece you see, not the moon (for the astrolabe is tilted too low), but a curious, sunlit, grey triangle.^^Fascinated, you strain closer to the vision... closer...^";
        PlayerTo(Out_on_the_Spire);
        rtrue;
    }
    rfalse;
];


[ AstrolabeAfter ;      
    if (action == ##Take) {
        trigger_quotation(43);
        rfalse;
    }
    rfalse;
];


[ DugHoleBefore ;       
    if (action == ##Take) {
        "A surreal idea, somewhat reminiscent of the Beatles film ~Yellow Submarine~.";
    }
    rfalse;
];


[ DugHoleDesc ; 
    if (OldDigX == DigX && OldDigY == DigY) {
        "^The hole you dug in the lawn is just here.";
    }
    print "^Some vandal has dug a hole in the lawn, ";
    DescribePaces(OldDigX - DigX,OldDigY - DigY);
    ".";
];


[ MurkyCaveInitial ;    
    StartDaemon(self);
    rfalse;
];


[ MurkyCaveDaemon cnt ; 
    if (game_section ~= T_ANCIENT_BRITAIN) {
        StopDaemon(self);
    }
    cnt = CouncilCnt;
    if (cnt > 0) {
        ++CouncilCnt;
    }
    if (cnt == 1) {
        "^From up on the hill you hear the blowing of a horn.";
    }
    if (cnt == 2) {
        "^Horses are approaching the villa, coming down the hill.";
    }
    if (cnt == 3) {
        "^The sound of horses draws nearer.";
    }
    if (cnt == 4) {
        if (location == Entrance) {
            print "^Horsemen suddenly gallop into the courtyard and you are soon ringed by guards!^";
            Capture();
        } else {
            "^There is definitely activity outside the villa.";
        }
    }
    if (cnt >= 5) {
        if (location == Entrance) {
            print "^You walk straight into the guards.^";
            Capture();
        }
        if (location == Roman_Villa) {
            print "^You walk straight into the guards at the back door.^";
            Capture();
        }
    }
    if (cnt == 7) {
        print "^There is sudden activity as the guards make a thorough precautionary search of the villa. ";
        if (location == Hypocaust) {
            "Luckily, they don't even think of looking down in here.";
        }
        if (location == Inside_Well) {
            print "Unfortunately, they do think of looking into the kitchen well, and drag you out onto the triclinium floor.^";
        }
        if (location == Murky_Cave or Spur_of_Rock or Hanging_on_Rope) {
            print "With the kind of zeal which really marked early Dark Age guarding, they look even here.^";
        } else if (location ~= Inside_Well) {
            print "The virtue of doing so is demonstrated when they find you without difficulty.^";
        }
        Capture();
    }
    if (cnt <= 7) {
        rfalse;
    }
    if (location == Triclinium) {
        print "^An industrious-looking slave (who cooks for the horsemen) is rather surprised to see you, but with creditable presence of mind he summons the guard at once.^";
        Capture();
    }
    if (location ~= Hypocaust) {
        rfalse;
    }
    if (cnt == 8) {
        "^You hear men walking across the mosaic just above your head.";
    }
    if (cnt == 9) {
        print "^A voice, which can just be heard through the vent, says ";
        if (KnowLanguages == false) {
            "something in Anglo-Saxon or Celtic (hard to say which).";
        }
        "~Welcome, great masters. We are convened in secret conclave to decide the fate of Britain. Lament, for the old ways are passing!  There will be a dark age, a collapse into many monarchies, and any man who can hold a town will call himself King and heir to Vortigern.~";
    }
    if (cnt == 10) {
        print "^A younger, more impatient voice, says ";
        if (KnowLanguages == false) {
            "something else.";
        }
        "~This is an opportunity!  We must be the power behind the thrones, we will in secret unite and be the true force of the land...~";
    }
    if (cnt == 11) {
        print "^There is cynical laughter for a moment, and a third voice interjects ";
        if (KnowLanguages == false) {
            "something.";
        }
        "~And who will lead this, this unity?  We take all sides and none, you know that. There are potent druids in the tents of each general down there in the rabble. They'd kill each other in a second come the battle.~";
    }
    if (cnt == 12) {
        print "^The first voice speaks once more. ";
        if (KnowLanguages == false) {
            new_line;
            rtrue;
        }
        "~Far worse is to come. The jumped-up kings and their new men will no longer believe in the ancient powers. Already I can feel the druidic magic weakening away, and we are perilously close to the nexus now. In the valleys below, armies wait to fight the decisive battle. Whichever side wins, they will no longer need us. In a matter of hours, the power will be broken forever.~";
    }
    if (cnt == 13) {
        print "^After a sombre silence, a much older voice says ";
        if (KnowLanguages == false) {
            "something wise. It really is a pity you can't understand them.";
        }
        "~You did right to call us together. There is a path prepared for us, but the sacrifice will be terrible. We must concentrate all the remaining druidical energy into this sacred hill, that it may last through all time, and we must ensure that druids live on this site forever and keep the faith.~";
    }
    if (cnt == 14) {
        print "^The younger voice speaks again. ";
        if (KnowLanguages == false) {
            new_line;
            rtrue;
        }
        "~For now, yes, for a century or two, yes, but what then?  They will forget the old ways, they will no longer truly be druids.~";
    }
    if (cnt == 15) {
        print "^The older voice replies triumphantly. ";
        if (KnowLanguages == false) {
            new_line;
            rtrue;
        }
        "~This is what must be done. They will forget, so we must give them a substitute. We shall accurse them to always seek after this magical stone, which it will be all but impossible for them to find. It will take the form of whatever they most desire. In six hundred years, by my prophecy, religious wars in the East will capture men's hearts, and then they will think it is the Holy Grail, the cup which held the blood of Christ. A thousand years later they will think it is -~  But at this moment the voices move away.";
    }
    rfalse;
];


[ RopeBefore ;  
    if (action == ##Climb) {
        R_Process(##Go,d_obj);
        rtrue;
    }
    rfalse;
];


[ RopeDown ;    
    print "You clamber down the rope, straight into a patrol of guards who capture you!^";
    Capture();
    rtrue;
];


[ HangingOnRopeBefore ; 
    if (action == ##Swing) {
        if (noun ~= hemp_rope) {
            rfalse;
        }
        give hemp_rope general;
        "You set the rope swinging back and forth. Very exhilarating!";
    }
    rfalse;
];


[ HangingOnRopeAfter ;  
    if (action == ##Drop) {
        remove noun;
        CDefart(noun);
        " tumbles end over end into the valley below.";
    }
    rfalse;
];


[ DaisyAfter ;  
    if (action == ##Wear) {
        "You tuck the daisy behind your ear, almost out of sight.";
    }
    if (action == ##Take) {
        if (self hasnt general) {
            give self general;
            "Aided by the swinging of the rope, you pick the daisy.";
        }
        rfalse;
    }
    rfalse;
];


[ DaisyBefore ; 
    if (action == ##Take) {
        if (self has moved || hemp_rope has general) {
            rfalse;
        }
        "You stretch out your hand, but cannot quite reach the daisy, such is the size of the overhang.";
    }
    rfalse;
];


[ DaisyUp o ;   
    if (self has worn && rod_identity == 2) {
        o = child(player);
      .labelXXX;
        if (o ~= nothing) {
            if (o has hidden_rod) {
                print " (twitching behind your ear)";
                rtrue;
            }
            o = sibling(o);
            jump labelXXX;
        }
        print " (tucked behind your ear)";
        rtrue;
    }
    rfalse;
];


[ EndStreamBefore ;     
    if (action == ##Swim) {
        "Too shallow for comfort.";
    }
    if (action == ##Drink) {
        "Deliciously clear and unpolluted.";
    }
    rfalse;
];


[ LadderBefore ;        
    if (action == ##Climb or ##Enter) {
        R_Process(##Go,u_obj);
        rtrue;
    }
    rfalse;
];


[ HornBefore ;  
    if (action == ##Blow) {
        print "You blow the horn, and it lets a great clarion call out to the hills. ";
        if (CouncilCnt >= 7) {
            print "The guardsmen, all over the villa, find you very quickly.^";
            Capture();
        } else {
            print "A call which is rapidly answered as...^";
            CouncilCnt = 7;
        }
        rtrue;
    }
    rfalse;
];


[ DieAfter ;    
    if (action == ##Drop) {
        print "Alea iacta est. It comes up ";
        EnglishNumber(random(6));
        ".";
    }
    rfalse;
];


[ TricliniumDown ;      
    if (kitchen_well hasnt open) {
        "The well is covered.";
    }
    if (kitchen_well has general) {
        print "Aware of the dangers, you very carefully lower yourself...^";
        Achieved(SCORE_WELL);
        return kitchen_well;
    }
    deadflag = DIED;
    "Having no reason to suppose the well is very deep, you cheerfully lower yourself in. This turns out to be something of a misjudgement and you soon lose your grip and fall, endlessly banging against the walls until finally...";
];


[ WellDaemon ;  
    if (player notin Triclinium) {
        rfalse;
    }
    give kitchen_well general;
    trigger_quotation(9);
    "^You hear a splash from far down in the depths of the well.";
];


[ WellAfter ;   
    if (action == ##Receive) {
        remove noun;
        if (noun has light) {
            give kitchen_well general;
            "It plummets out of sight, until even the light vanishes in the distance. This must be an extremely deep well.";
        }
        if (noun ~= historical_pamphlet) {
            StartTimer(self,2);
        }
        CDefart(noun);
        " drops into the well-shaft.";
    }
    rfalse;
];


[ InsideWellBefore ;    
    if (verb == ##Look or ##Go or ##Read) {
        rfalse;
    }
    "In this confined space there is little room for action.";
];


[ VentsBefore ; 
    if (action == ##Read or ##Search) {
        if (CouncilCnt > 7) {
            "Four men in druidic furs are standing on the corners of the mosaic, in some kind of sinister conference. This old villa must be some kind of rendezvous point. Between the men a bluish stone rests on the mosaic floor.";
        }
        "You see across the mosaic floor of the moonlit atrium.";
    }
    rfalse;
];


[ EntranceBefore ;      
    if (action == ##Go) {
        if (noun ~= s_obj or sw_obj or se_obj) {
            rfalse;
        }
        print "You walk out into the courtyard and are immediately set upon by guards, who drag you away.^";
        Capture();
        rtrue;
    }
    rfalse;
];


[ EntranceAfter ;       
    if (CouncilCnt == 0) {
        CouncilCnt = 1;
    }
    rfalse;
];


[ Capture o s ; 
    if (CouncilCnt < 8) {
        deadflag = DIED;
        "^The guardsmen grab your head by the chin and examine you, but take you for a plain thief and immediately put you to the sword. A pity they did not realise your importance, but then they are only guards, and besides they would probably only have done you in more unpleasantly.";
    }
    print "^Suddenly you are thrust before a druidical figure. He seems to recognise you, and is troubled. Perhaps because of this, your life is saved and you are taken away into custody, down in the valley among the army encampments.^";
    StartTimer(tent_pole,4);
    o = child(player);
  .labelXXX;
    if (o ~= nothing) {
        s = sibling(o);
        if (o hasnt worn) {
            remove o;
        }
        o = s;
        jump labelXXX;
    }
    CouncilCnt = 0;
    PlayerTo(Rough_Tent);
    rtrue;
];


[ TentPoleDaemon ;      
    print "^Without warning a Saxon spy (or, as the guards would no doubt put it, another Saxon spy) is thrown bodily into the tent, careering into the central pole and slumping unconscious on the ground as a result. For a moment the whole tent rocks with the force - the pole was nearly broken.^";
    give tent_pole ~static;
    move unconscious_Saxon_spy to Rough_Tent;
    StartTimer(unconscious_Saxon_spy,5);
    rfalse;
];


[ TentPoleBefore ;      
    if (action == ##Attack) {
        "It won't break.";
    }
    if (action == ##Push or ##Pull or ##Turn) {
        "Its base is in the earth.";
    }
    rfalse;
];


[ TentPoleAfter ;       
    if (action == ##Take) {
        if (self has general) {
            rfalse;
        }
        give self general;
        print "As you uproot the tent-pole, the whole tent collapses ignominiously, the animal hides falling about your head. The hides are heavy and weigh you down, but you just manage to crawl out...^";
        StartTimer(Encampment,10);
        PlayerTo(Encampment);
        rtrue;
    }
    rfalse;
];


[ SpyDaemon ;   
    if (location ~= Rough_Tent) {
        rfalse;
    }
    if (unconscious_Saxon_spy in Rough_Tent) {
        print "^Men arrive to drag the Saxon spy away to some unguessable grisly fate. They grimace at you as if to say, ~You're next.~^";
        remove unconscious_Saxon_spy;
        StartTimer(unconscious_Saxon_spy,5);
        rtrue;
    }
    deadflag = DIED;
    print "^The men arrive once more and this time they securely grab you by the arms. If you were an anthropologist, you'd be fascinated by the ritual in which you are bound up, then garotted with a cord and laid into a peat swamp. Instead, your last thought is of the celebrated body they found when they drained the marshes in 1974 to build a motorway service station.";
    rfalse;
];


[ SpyBefore ;   
    if (action == ##Search) {
        "Not only are the guards better at searching suspects than you, they also did so first.";
    }
    if (action == ##WakeOther) {
        rfalse;
    }
    rfalse;
];


[ SpyLife ;     
    if (action == ##WakeOther) {
        "The spy is too deeply unconscious.";
    }
    if (action == ##Attack or ##Kiss or ##ThrowAt) {
        "Not an act worthy of a Meldrew.";
    }
    if (action == ##Order or ##Answer or ##Ask or ##Give) {
        "He's asleep.";
    }
    rfalse;
];


[ EncampmentDaemon ;    
    if (game_section ~= T_ANCIENT_BRITAIN) {
        rfalse;
    }
    deadflag = DIED;
    "^It had to happen sooner or later. One of the druids looks round, sees you and raises an instant alarm. It is absolutely hopeless and you are dragged away screaming to your fate.";
];


[ EncampmentEast ;      
    if (leather_sandals has worn) {
        print "You cross the hot coals nimbly in your sandals.^";
        return dolmen;
    }
    "Walk across those hot coals!  You must be joking.";
];


[ YourGhostBefore ;     
    if (verb == ##Sleep) {
        "In the dream you are not drowsy.";
    }
    if (verb == ##Wake) {
        if (game_section == T_EGYPT_DREAMING) {
            "It doesn't seem to be that easy.";
        } else {
            "You are unable to shake off the dream.";
        }
    }
    if (game_section == T_EGYPT_DREAMING && verb == ##Attack && noun == self) {
        print "Ouch!  You wake up, smarting.^";
        ChangePlayer(selfobj);
        R_Process(##Look);
        rtrue;
    }
    if (game_section == T_EGYPT_DREAMING && verb == ##Turn or ##Attack or ##Read) {
        rfalse;
    }
    if (verb == ##Go or ##Take or ##Drop) {
        rfalse;
    }
    if (verb == ##Look or ##Inv or ##Wait) {
        rfalse;
    }
    "You seem unable to concentrate sufficiently.";
];


[ DreamCantGo ; 
    trigger_quotation(29);
    "You drift in that direction, but without gaining any ground.";
];

[ PremonitionStart ;    
    ChangePlayer(ghost_of_yourself);
    PlayerTo(Premonition);
    rtrue;
];


[ PremonitionEast ;     
    print "You pass uncomfortably straight through the hide wall.^";
    return The_Generals_Tent;
];


[ GeneralsTentWest ;    
    print "You pass uncomfortably back through the hide wall.^";
    return Premonition;
];


[ BearTapestryLife ;    
    if (action == ##Order or ##Ask or ##Answer) {
        "Your mouth is too furred up to speak.";
    }
    rfalse;
];


[ MascotAfter ; 
    if (action == ##Take) {
        if (Beside_Table hasnt general) {
            give Beside_Table general;
            remove Druid;
            "The Druid catches sight of your ghostly hand taking the mascot, and immediately begins her occultations, cursing you and your ill-gotten gains. But she is unable to make contact with you, and turns furiously to the tapestry, hissing ~lagach~ to the Bear. At once a sudden swirl of wind seems to pull her into the rough cloth, dissolving her to nothing.";
        }
        rfalse;
    }
    rfalse;
];


[ MascotBefore ;        
    if (action == ##Give) {
        "Now that really would not be very kind.";
    }
    rfalse;
];


[ MascotDaemon i ;      
    if (heavy_iron_mascot notin player) {
        rfalse;
    }
    i = self.number - 1;
    self.number = i;
    if (i == 0) {
        deadflag = DIED;
        print "^In an astonishing freak accident, ";
        i = random(5);
        if (i == 1) {
            "a meteorite hurtles through the Earth's atmosphere and then straight through your head. Anyone would think you had a curse on you (anyone, that is, still able to think).";
        }
        if (i == 2) {
            "an earthquake demolishes everything in the neighbourhood, swallowing you up into a chasm in the ground. Anyone would think you had a curse on you.";
        }
        if (i == 3) {
            "a long-dormant volcano erupts instantaneously below your feet. Anyone would think you had a curse on you (anyone, that is, still standing).";
        }
        if (i == 4) {
            "lightning abruptly strikes into your body, making your hair stand on end. (Oh, and vapourising you utterly, of course.)";
        }
        "four hundred Spartan soldiers are transported by some quantum-mechanical fluke from the Battle of Thermopylae into your immediate vicinity. They are quite keen for someone to explain things to them, but unfortunately most of the spears they were throwing came with them; one of which struck straight through the mascot into your body.";
    }
    if (i == 10) {
        "^You feel very nervous indeed, for some reason.";
    }
    if (i == 7) {
        if (player notin servants_bed) {
            "^You stub your toe painfully, and trip over.";
        } else {
            "^You feel bed-sores coming on.";
        }
    }
    if (i == 5) {
        "^You scratch yourself, unable to get rid of an itching sensation.";
    }
    if (i == 2) {
        "^Something feels very wrong indeed. Your hand begins to burn.^";
    }
    rfalse;
];


[ DruidLife ;   
    if (action == ##Order or ##Ask or ##Answer) {
        "This is one of those dreams where you find you cannot speak.";
    }
    rfalse;
];


[ DolmenAfter ; 
    if (action == ##Look) {
        ChangePlayer(selfobj);
        if (heavy_iron_mascot in ghost_of_yourself) {
            move heavy_iron_mascot to player;
            StartDaemon(heavy_iron_mascot);
            heavy_iron_mascot.number = 15;
            Achieved(SCORE_MASCOT);
            score = score - 50;
        }
        "^You awaken, shivering with dread.";
    }
    rfalse;
];

[ EnterDream ;  
    ChangePlayer(ghost_of_yourself);
    PlayerTo(Melancholy_Dream);
    rtrue;
];


[ DreamEachTurn ;       
    ++DreamCnt;
    if (DreamCnt ~= 2) {
        rfalse;
    }
    move green_luminescence to Melancholy_Dream;
    Melancholy_Dream.e_to = Solid_Sand;
    Melancholy_Dream.d_to = Solid_Sand;
    "^A ghostly apparition of a venerable man hazes into view. He raises his mahogany staff and strikes it (silently) on the ground, then points it at the walls, and suddenly a flurry of green luminescence chases around you!^^He fades away again, mumbling something incoherent.";
];


[ BarrierBefore ;       
    "The metal barrier is indistinct, on the edge of your consciousness, and you can't get close. However familiar it seems.";
];


[ LumnescenceBefore ;   
    if (action == ##Take or ##Remove or ##Touch) {
        "You bat at the flurries with your hand, but they're just green light (with the tiniest mosquito-sting).";
    }
    rfalse;
];


[ HieroglyphsDescription ;      
    print "Your dream eye is caught by...^^";
    0-->8 = 2 | 0-->8;
    print "       (|/        ^   #   -o-  >>>   ^       /|)        ^";
    0-->8 = 65533 & 0-->8;
    "^Confused and hazy, you feel you can understand hieroglyphics, - or hasn't that happened yet?";
];


[ ShipWheelBefore ;     
    if (action == ##Turn) {
        if (self has general) {
            "Your hands seem unable to touch it again.";
        }
        give self general;
        give sandstone_recess open;
        "You try turning the wheel, but it moves only infinitesimally slowly. The door begins to raise the tiniest fraction, and a few grains of sand cascade in slow motion, rattling horribly against each other...^^It will take forever, and the air is running out...";
    }
    rfalse;
];


[ CryptInitial ;        
    MazeX = 7;
    MazeY = 5;
    rfalse;
];


[ CryptRoomBefore i ;   
    if (action == ##Smell) {
        if (location ~= The_Catacombs) {
            "Ugh.";
        }
        i = The_Catacombs.time_left + 1;
        The_Catacombs.time_left = i;
        if (i == 1) {
            "Something like... perhaps, air after a thunderstorm... but no, you still can't be sure what it is.";
        }
        if (i == 2) {
            move aluminium_staircase to The_Catacombs;
            The_Catacombs.d_to = Universe_Maintenance_Room;
            OzoneSmelled = true;
            Achieved(SCORE_SMELL);
            "Ozone!  That's what it's called. Funny sort of odour for a cave - especially since, on investigating further, you find that it's drifting up from a concealed aluminium staircase.";
        }
        "Definitely ozone.";
    }
    rfalse;
];


[ AluminumStairBefore ; 
    if (action == ##Climb or ##Enter) {
        R_Process(##Go,d_obj);
        rtrue;
    }
    rfalse;
];

[ AdjustSlide i j u v ; 
    u = henri_post_array->i;
    v = henri_post_array->j;
    henri_post_array->j = u;
    henri_post_array->i = v;
    rtrue;
];


[ DisplaySlidePos ndx chr ;     
    chr = henri_post_array->(ndx - 1);
    if (chr == '@{0}') {
        print ". ";
        rfalse;
    }
    chr = chr + 65 - 1;
    print (char) chr, " ";
    rtrue;
];


[ DisplayWholeGrid ;    
    0-->8 = 2 | 0-->8;
    print "     ";
    DisplaySlidePos(1);
    DisplaySlidePos(2);
    DisplaySlidePos(3);
    print "^      + +^", "     ";
    DisplaySlidePos(4);
    DisplaySlidePos(5);
    DisplaySlidePos(6);
    print "^      + +^", "     ";
    DisplaySlidePos(7);
    DisplaySlidePos(8);
    DisplaySlidePos(9);
    print "^      + +^", "     ";
    DisplaySlidePos(10);
    DisplaySlidePos(11);
    DisplaySlidePos(12);
    print "^      + +^", "     ";
    DisplaySlidePos(13);
    DisplaySlidePos(14);
    DisplaySlidePos(15);
    new_line;
    0-->8 = 65533 & 0-->8;
    rtrue;
];


[ CRShort ;     
    if (self.time_left == 3) {
        print "Contraption Reflection";
    } else {
        print "Contraption Room";
    }
    rtrue;
];


[ CREast ;      
    if (self.time_left == 3) {
        "You bump into an invisible barrier - perhaps the edge of the reflection.";
    }
    return The_Catacombs;
];


[ CRAfter ;     
    if (action == ##Go or ##Enter) {
        if (noun == n_obj or s_obj or metal_wall) {
            print "^Walking through the mirror is a wrench, but leaves you somewhere... almost exactly the same...^";
            rewdraw_statusline = true;
            Achieved(SCORE_REFLECTING);
            if (noun == n_obj) {
                self.s_to = metal_wall;
                self.n_to = nothing;
                metal_wall.w_to = ne_obj;
                self.time_left = 3;
            } else {
                self.n_to = metal_wall;
                self.s_to = nothing;
                metal_wall.w_to = w_obj;
                self.time_left = 2;
            }
            AdjustSlide(0,2);
            AdjustSlide(3,5);
            AdjustSlide(6,8);
            AdjustSlide(9,11);
            AdjustSlide(12,14);
        }
        rfalse;
    }
    if (action == ##Look) {
        if (self has general) {
            print "^The lower basket contains a cannonball, and the upper is empty.^";
            rfalse;
        }
        if (child(hanging_cord) ~= nothing) {
            print "^The lower basket contains ";
            WriteListFrom(child(hanging_cord),8 + 64);
            ".";
        }
    }
    rfalse;
];


[ MetalWallInitial ;    
    print "The whole ";
    if (CR.time_left == 2) {
        print "north";
    } else {
        print "south";
    }
    " wall is occupied by a bronze mirror, reflecting the room.";
];


[ MetalWallBefore ;     
    if (action == ##Rub) {
        "You polish the metal a little, but there's far too much to do by hand.";
    }
    rfalse;
];


[ IronGridInitial ;     
    print "Amid the glass wall is an iron panel divided into a three-by-five grid.^^Behind the glass is a kind of see-saw of two leather baskets at opposite ends of an oak pivot. ", "In one corner of the roof, above the far end of the see-saw, is a ";
    if (ancient_well notin nothing) {
        print "hole through which dim natural light emanates.^^";
    } else {
        print "dark hole.^^";
    }
    print "Projecting out of the back of the panel mechanism at the near end is a metal hand, which ";
    if (CR has general) {
        "grasps empty air.";
    }
    "grasps a cannonball in mid-air.";
];


[ GridDesc ;    
    print "There are fourteen pieces in the grid, and one gap. The pieces have letters upon them ";
    if (CR.time_left == 3) {
        print "(in reflected script) ";
    }
    print "and are arranged as follows:^^";
    DisplayWholeGrid();
    "^[Try ~slide b~, for instance, to move a piece into the gap.]";
];


[ CannonballBefore ;    
    if (verb ~= ##Read) {
        "It is out of reach, beyond the glass.";
    }
    rfalse;
];

[ SlideSub i j col ;    
    if (location ~= CR) {
        "~Slide~ is inappropriate here.";
    }
    if (noun == nothing) {
        "What piece was that?";
    }
    i = 0;
  .labelXXX;
    if (i <= 14) {
        if (henri_post_array->i == noun) {
            if (i >= 3) {
                j = i - 3;
                if (henri_post_array->j == 0) {
                    jump labelXXX;
                }
            }
            if (i < 12) {
                j = i + 3;
                if (henri_post_array->j == 0) {
                    jump labelXXX;
                }
            }
            col = i % 3;
            if (col ~= 0) {
                j = i - 1;
                if (henri_post_array->j == 0) {
                    jump labelXXX;
                }
            }
            if (col ~= 2) {
                j = i + 1;
                if (henri_post_array->j == 0) {
                    jump labelXXX;
                }
            }
        }
        ++i;
        jump labelXXX;
    }
    print "Unfortunately, '", (char) noun + 65 - 1, "' is not adjacent to the gap.";
    new_line;
    rtrue;
  .labelXXX;
    ++slide_moves;
    if (slide_moves == 8) {
        trigger_quotation(36);
    }
    if (slide_moves == 5) {
        trigger_quotation(42);
    }
    col = henri_post_array->i;
    henri_post_array->j = col;
    henri_post_array->i = 0;
    print "You slide '", (char) noun + 65 - 1, "' into the gap, leaving the grid looking like:^^";
    DisplayWholeGrid();
    i = 0;
  .labelXXX;
    if (i <= 14) {
        if (henri_post_array->i ~= henry_post_initial_layout->i) {
            rfalse;
        }
        ++i;
        jump labelXXX;
    }
    Achieved(SCORE_HENRIPOST);
    print "^There is a click from the mechanism. Pulleys pull. Cogs spin. Little bits of string run.^";
    if (CR hasnt general) {
        give CR general;
        print "^The cannonball drops out of the metal hand, and falls into the higher basket, which plunges down, hurling the other basket upwards, ";
        j = child(hanging_cord);
        if (j == 0) {
            "but it must have been empty.";
        }
        j = sibling(j);
        print "and projecting ";
        if (j == 0) {
            print "something";
        } else {
            print "some things";
        }
        print " up the hole in the corner.^";
        if (CR has light) {
            j = child(hanging_cord);
          .labelXXX;
            if (j ~= 0) {
                i = sibling(j);
                move j to Lawn_Ornaments;
                j = i;
                jump labelXXX;
            }
            move ancient_well to Lawn_Ornaments;
        } else {
            print "^A moment later, however, there is a distant but loud thump. A moment after that, something plummets back down out of the hole (in a shower of thin white plaster) and into the higher basket, which (owing to fantastic machinery) wrenches down again, hurling the cannonball in the other end up into the air.^^The metal hand catches the cannonball beautifully.^";
            give CR ~general;
        }
        if (parent(golden_orb) == hanging_cord) {
            move glowing_golden_orb to CR;
        } else {
            remove glowing_golden_orb;
        }
    }
    rtrue;
];


[ SwitchAfter ; 
    if (action == ##SwitchOn) {
        "Click-clunk!  The world looks precisely the same.";
    }
    if (action == ##SwitchOff) {
        "Clunk-click!  Probably nothing very much has changed.";
    }
    rfalse;
];


[ DialBefore ;  
    if (action == ##Turn) {
        if (PlanckWarning == false) {
            PlanckWarning = true;
            trigger_quotation(12);
            "Is it really wise to go meddling with things here?  Well, only one way to find out. Don't expect a second warning!";
        }
        deadflag = DESTROYED_UNIVERSE;
        score = 65437;
        "Mmm. On the whole, it's probably best not to alter one of the fundamental constants of the physical universe while still inside it. On the bright side, for once you are unlikely to get the blame.";
    }
    rfalse;
];


[ GlowingOrbBefore ;    
    if (action == ##Rub) {
        if (self has general) {
            "It shines already!";
        }
        print "Bewilderingly, the condensation dissolves your hand away, and the water rushes up over your body as if it were blotting paper. You feel nothing except disorientation, but your confusion soon resolves to...^";
        move golden_orb to location;
        ContainerSave = parent(player);
        LocationSave = location;
        PlayerTo(Inside_the_Orb);
        rtrue;
    }
    rfalse;
];


[ InOrbAfter ;  
    if (action == ##Strike) {
        "The sphere rings with a hollow noise, but the rod charges up.";
    }
    rfalse;
];


[ InOrbEachTurn i j ;   
    i = Inside_the_Orb.number + 1;
    Inside_the_Orb.number = i;
    if (i == 1) {
        rtrue;
    }
    if (i == 2) {
        print "^The sphere rotates, giving you a fresh view of the images: stylised Kings and Queens?^";
    }
    if (i == 4) {
        print "^The sphere rotates, giving you another look: humble tokens of warriors.^";
    }
    if (i == 6) {
        print "^The sphere rotates, giving you another look: carved horse-heads and Bishops' mitres.^";
    }
    if (i == 8) {
        print "^(The sphere rotates.)  It's a chess game!  Now you understand. But you still can't puzzle out the actual solution.^";
    }
    if (i == 10) {
        print "^(The sphere rotates.)  You have some impression that White is trying to make an attack, having plenty of spare pieces.^";
        trigger_quotation(26);
    }
    if (i == 12) {
        print "^(The sphere rotates.)  Seeing the board from Black's point of view, the defence looks solid.^";
    }
    if (i == 14) {
        print "^(The sphere rotates.)  Back to White's side. You definitely need to smash through somehow, all that cautious exchanging of pieces hasn't worked. If you want White to win, that is.^";
    }
    j = i % 4;
    if (j == 0) {
        give Inside_the_Orb ~general;
        if (i > 12) {
            "^(The sphere rotates.)  Black still looks safe.";
        }
    }
    if (j == 2) {
        give Inside_the_Orb general;
        if (i > 14) {
            "^(The sphere rotates.)  White must break out somehow.";
        }
    }
    rfalse;
];


[ CausewayBefore ;      
    if (action == ##Drink) {
        "Drink warm salty water?  No.";
    }
    if (action == ##Swim) {
        "The waters are deceptively treacherous. Best not.";
    }
    rfalse;
];


[ CausewayInitial ;     
    StartDaemon(self);
    if (Austin in self) {
        StartDaemon(Outside_the_Royal_Museum);
    }
    rfalse;
];


[ CausewayDaemon i ;    
    if (game_section ~= T_ALEXANDRIA) {
        rfalse;
    }
    self.number = (self.number + 1) % 12;
    if (location ~= Crossroads or Outside_the_Royal_Museum or Stadium) {
        rfalse;
    }
    i = Causeway.number;
    if (location == Outside_the_Royal_Museum) {
        --i;
    }
    if (location == Stadium) {
        i = i - 2;
    }
    if (i < 4) {
        "^A lively, very noisy procession pushes through here, and some spectacular floats are approaching fast.";
    }
    if (i == 4) {
        "^The Morning Star leads an enormous procession for the festival of Dionysus, which throngs with officials dressed as satyrs, actors and townswomen.";
    }
    if (i == 5) {
        "^Behind the front are huge statues on mechanical floats, flanked by giant overflowing pitchers of wine. And the animals are coming!";
    }
    if (i == 6) {
        "^Yes, 2000 oxen dressed in gold, as many dogs, and the giraffes, the antelopes, the gnus, parrots, elephants, wildebeest... ostriches pulling carts, a white bear...";
    }
    if (i == 7) {
        "^Next the dancers, in a great masque of the life of Alexander the Great, his travels, conquests, founding of the City, and so on. The delicate matter of how exactly his general Ptolemy took over is omitted, since Ptolemy's son Ptolemy II is now very much in charge.";
    }
    if (i == 8) {
        "^The centrepiece of the procession: an enormous gold ribboned phallus, two hundred feet long and with a giant star on the end. Inexplicably, you are the only person present who feels this to be in doubtful taste.";
    }
    if (i == 9) {
        "^A procession of women follows next, each in the national dress of an allied city state, from all over the Hellenistic world, North Africa to Sicily to Asia.";
    }
    if (i == 10) {
        "^The procession ends as it began, with a great Evening Star, before falling into a shambolic crowd of revellers, drunken and maudlin.";
    }
    if (i > 10) {
        "^The procession looks like running on forever.";
    }
    rfalse;
];


[ PharosEachTurn ;      
    if (random(5) ~= 1) {
        "^Down below, a wave splashes against the sea front, briefly washing up under the grating.";
    }
    rfalse;
];


[ PharosDaemon ;        
    if (random(5) ~= 1) {
        rfalse;
    }
    if (smooth_round_stone has general) {
        Achieved(SCORE_WASH);
        move smooth_round_stone to Warehouses_and_Port;
        move rusty_iron_key to Warehouses_and_Port;
        give smooth_round_stone ~general;
        give smooth_round_stone ~moved;
        give smooth_round_stone ~concealed;
        give rusty_iron_key general;
        rusty_iron_key.initial = "That iron key seems to have washed up here...";
        smooth_round_stone.initial = "...and there's the strange stone again.";
        if (location == Island_of_Pharos) {
            "^A wave splashes up under the grating, throwing up the strange stone, which bounces back off the grating and washes away down the passage out of sight.^^Well, you didn't think it was going to be that easy, did you?^";
        }
    } else {
        StopDaemon(self);
    }
    rfalse;
];


[ IronGratingBefore ;   
    if (action == ##Receive) {
        if (noun == player) {
            "The bars are far too close together.";
        }
        if (noun == smooth_round_stone) {
            move noun to Island_of_Pharos;
            give smooth_round_stone general;
            give smooth_round_stone concealed;
            StartDaemon(Island_of_Pharos);
            rusty_iron_key.initial = "The iron key, out of reach below, is glued somehow to the strange stone.";
            "The strange stone drops through the grating, and falls on the top step. The iron key mysteriously glues itself to the metal in the stone. It's still out of reach, though.";
        }
        if (noun == robot_mouse) {
            "The robot mouse is just the wrong shape.";
        }
        move noun to Jetty;
        CDefart(noun);
        " drops through the grating and bounces down in the darkness.";
    }
    rfalse;
];


[ RustyKeyBefore ;      
    if (action == ##Take && rusty_iron_key hasnt general) {
        "Reach down the grating as you may, it remains just beyond reach.";
    }
    rfalse;
];


[ JettyEachTurn ;       
    if (random(4) ~= 1) {
        rfalse;
    }
    if (player in skiff) {
        "^A wave suddenly rocks the skiff.";
    }
    "^A wave suddenly splashes against your feet, up to the knees, and washes up the steps toward the grating.";
];


[ HarbourMouthBefore ;  
    if (action == ##Exit or ##Swim) {
        "The sepulchral calm of the ocean overwhelms you, and you can only watch and sail.";
    }
    rfalse;
];


[ HarbourMouthEachTurn ;        
    if (Harbour_Mouth has general) {
        print "^The sails billow, then slacken...^";
        move skiff to Drifting;
        location = Drifting;
        R_Process(##Look);
        rtrue;
    } else {
        give Harbour_Mouth general;
    }
    rfalse;
];


[ DriftingEachTurn ;    
    print "^Light brightens into day. The skiff drifts, drifts upon...^";
    move skiff to Garden_Stream;
    location = Garden_Stream;
    R_Process(##Look);
    rtrue;
];


[ CrossroadsBefore ;    
    if (action == ##Go) {
        if (noun == ne_obj && cloak_of_many_colours has worn) {
            print "The procession happily accommodates another crazily-dressed loon.^";
            rfalse;
        }
        if (noun == nw_obj or sw_obj or se_obj) {
            rfalse;
        }
        "The enormous procession, which throngs the great streets of Alexandria, is impossible to push your way through. Better just enjoy the spectacle.";
    }
    rfalse;
];


[ TombstoneBefore ;     
    if (action == ##Receive) {
        if (noun ~= gleaming_amber_gem) {
            "Doesn't seem to fit.";
        }
        if (unexciting_tombstone has open) {
            "What?";
        }
        unexciting_tombstone.description = "An amber gem gleams in the mouth of its face.";
        give unexciting_tombstone open;
        trigger_quotation(25);
        move gleaming_amber_gem to unexciting_tombstone;
        "The amber fits perfectly into the mouth of the stone face, and there is a heaving from beneath your feet... you topple over backward, flailing wildly. When you get up you can see a short flight of steps leading down. You have opened the tomb!";
    }
    rfalse;
];


[ CloakBefore ; 
    if (action == ##Turn or ##SwitchOn) {
        if (noun has worn) {
            "Not while you're wearing it.";
        }
        if (noun notin player) {
            "You need to be holding it.";
        }
        if (noun == cloak_of_many_colours) {
            move grey_cloak to player;
            remove cloak_of_many_colours;
            itobj = grey_cloak;
        } else {
            move cloak_of_many_colours to player;
            remove grey_cloak;
            itobj = cloak_of_many_colours;
        }
        "You turn the cloak inside out.";
    }
    rfalse;
];


[ PyramidBefore ;       
    if (action == ##Smell) {
        "Why do you only ever smell hard in unpleasant places?  The odour is repulsive in a termites-and-honey kind of way.";
    }
    rfalse;
];


[ HeightFashionBefore ; 
    if (action == ##Sleep) {
        if (player in wooden_couch) {
            print "The heavy weave mattings feel so restful that you slide into...^";
            The_Spirit_World.number = 1;
            PlayerTo(The_Spirit_World);
            rtrue;
        }
        rfalse;
    }
    rfalse;
];


[ HeightFashionWest ;   
    if (player notin location) {
        "First get up.";
    }
    print "Slightly to your surprise, the sphinxes make no effort to stop you.^";
    return This_Is_The_Death;
];


[ NoseBefore ;  
    if (action == ##Push or ##Pull) {
        "It is made of stone, you know.";
    }
    if (action == ##Turn) {
        if (player notin location) {
            "You can't reach from the couch.";
        }
        if (marble_wall has open) {
            give marble_wall ~open;
        } else {
            give marble_wall open;
        }
        Achieved(SCORE_SPHINX);
        "You twist the nose, and before it springs back there is a rumbling of stone from below.";
    }
    rfalse;
];


[ SpiritWorldWest ;     
    print "The spirits of the sphinxes prowl across the doorway, paws raised, and then lunge towards you. Their claws rake across your skin, tearing off a layer, unwrapping you in a curiously painless way... and you wake...^";
    if (The_Spirit_World.number == 1) {
        move player to wooden_couch;
        location = The_Height_of_Fashion;
    } else {
        The_Spirit_World.number = The_Spirit_World.number - 1;
        move player to spirit_wooden_couch;
        remove Napoleonic_officers;
    }
    R_Process(##Look);
    rtrue;
];


[ SpiritWorldBefore ;   
    if (action == ##Go) {
        if (noun == w_obj) {
            rfalse;
        }
        if (The_Spirit_World.number == 4) {
            "You somehow cannot leave the tomb. Your spirit is anchored still to your body, sleeping two thousand years before.";
        }
        "The tomb is sealed, apparently forever.";
    }
    if (action == ##Take or ##Drop or ##Inv or ##Empty or ##Remove or ##Insert) {
        "You are beyond worldly possessions.";
    }
    if (action == ##Sleep) {
        if (player in spirit_wooden_couch) {
            if (The_Spirit_World.number == 4) {
                "The spell of the tomb is broken now, and you cannot sleep.";
            }
            print "The heavy weave mattings draw you deeper into...^";
            The_Spirit_World.number = The_Spirit_World.number + 1;
            PlayerTo(The_Spirit_World);
            rtrue;
        }
        rfalse;
    }
    rfalse;
];


[ SpiritWorldAfter i ;  
    if (action == ##Look) {
        i = The_Spirit_World.number;
        if (i == 1) {
            "^The tomb seems older now, weighed under with centuries.";
        }
        if (i == 2) {
            "^The tomb swelters now, a thousand years old.";
        }
        if (i == 3) {
            "^The tomb is beautifully well-preserved, but it seems quite ancient.";
        }
        if (i == 4) {
            print "^By now the tomb might be two thousand years old.^";
            if (Napoleonic_officers in The_Spirit_World) {
                "^And at last it has been opened.";
            }
        }
        rfalse;
    }
    rfalse;
];


[ SpiritWorldEachTurn ; 
    if (The_Spirit_World.number < 4) {
        rfalse;
    }
    ++SpiritCnt;
    if (SpiritCnt == 2) {
        print "^The entrance to the tomb rumbles.^";
    }
    if (SpiritCnt == 3) {
        print "^The noise grows, and dust falls from cracks in the masonry.^";
    }
    if (SpiritCnt == 4) {
        print "^The entrance bursts open in a shower of plaster!  Light streams in, searing your eyes. There is a great commotion. Two Napoleonic French officers stride down the stairs, lanterns in hand, looking admiringly around the court. They do not seem to see you.^";
        move Napoleonic_officers to The_Spirit_World;
    }
    if (SpiritCnt == 5) {
        print "^The officers are fascinated by the way the tomb seems almost untouched, and yet the couch looks slept in.^";
    }
    if (SpiritCnt == 6) {
        print "^The officers look down the passage, finding it to be sealed.^";
    }
    if (SpiritCnt == 7) {
        print "^The officers sit next to the sphinxes, stroking their moustaches in comic perplexity. As they do so, one bangs his head on a stone nose.^";
    }
    if (SpiritCnt == 8) {
        print "^The other officer is greatly amused by this slapstick. (You really are beginning to see just how boring the living can be.)^";
    }
    if (SpiritCnt == 9) {
        print "^The first officer tweaks the nose of the sphinx in affection. Suddenly there is a great rumbling of stone from the passage below, and they rush down to investigate!^";
        remove Napoleonic_officers;
        give sphinxes general;
        move stone_nose_of_a_sphinx to The_Height_of_Fashion;
    }
    rfalse;
];


[ OfficerLife ; 
    if (action == ##Kiss or ##Attack) {
        "Your body passes through them.";
    }
    if (action == ##Order or ##Ask or ##Answer) {
        "They hear nothing.";
    }
    rfalse;
];


[ UglyAnimalShort ;     
    if (self hasnt general) {
        rfalse;
    }
    print "model of a mischievous-looking monkey, which wriggles as it comes alive";
    rtrue;
];


[ UndertakingBefore ;   
    if (player in mummy_case) {
        if (verb == ##Exit) {
            print "(That's a relief.)^";
            rfalse;
        }
        if (verb ~= ##Close) {
            print "(You are so distracted that common sense takes over and you clamber out of the mummy case.)^";
            move player to parent(mummy_case);
            location = parent(player);
        }
    }
    if (action == ##Go) {
        if (noun == n_obj or ne_obj) {
            if (second_socket hasnt general) {
                move quarterstaff to Quite_an_Undertaking;
                give second_socket general;
                "The passage seems endless, and you are obliged to retreat before the air runs out. You trip over something as you do, cursing under your breath.";
            }
            "The passage seems endless and you retreat.";
        }
        rfalse;
    }
    rfalse;
];


[ MummyCaseBefore ;     
    if (action == ##Open) {
        if (self hasnt open) {
            "The lid must weigh a ton. You can't shift it.";
        }
        "The coffin's already open.";
    }
    if (action == ##Close) {
        if (noun == mummy_case && noun has open && player in mummy_case) {
            if (MummyWarning == false) {
                MummyWarning = true;
                "That seems an awfully... final decision. Here's a chance to reconsider.";
            }
            print "The lid slams down on you with a very terminal sound indeed.^^^   *** You have ...^^^But - something more is happening. The coffin's delicate balance has been altered, and it is sliding, slipping away down the square passage, endlessly, endlessly...^^And even that is not the end, for you suddenly crash into buffers at one end. What a lucky escape, you think... for a moment...^";
            PlayerTo(Buried_Alive);
            rtrue;
        }
        if (self has open) {
            "No, don't. Once shut it would never open again.";
        }
        "The coffin is, to put it mildly, already closed.";
    }
    if (action == ##Enter) {
        if (mummy_case hasnt open) {
            "It's closed.";
        }
        print "(You can't help feeling that someone has planned all this... and it isn't you.)^^";
        rfalse;
    }
    rfalse;
];


[ SocketDesc ;  
    print "Above ";
    Defart(self);
    print " is the single word ~";
    EtruscanInt(self.number);
    "~.";
];


[ SocketBefore ;        
    if (action == ##Receive) {
        if (noun == model_golden_sceptre) {
            model_golden_sceptre.number = self;
            if (self == first_socket) {
                model_golden_sceptre.initial = "The sceptre projects from the first socket like a handle.";
            }
            if (self == second_socket) {
                model_golden_sceptre.initial = "The sceptre projects from the second socket like a handle.";
            }
            if (inp2 == third_socket) {
                model_golden_sceptre.initial = "The sceptre projects from the third socket like a handle.";
            }
            move model_golden_sceptre to Quite_an_Undertaking;
            give model_golden_sceptre ~moved;
            "It fits perfectly (wouldn't you know it).";
        } else {
            "Doesn't seem to fit, quite.";
        }
        rfalse;
    }
    rfalse;
];


[ SceptreAfter ;        
    if (action == ##Take or ##Remove) {
        if (location == Quite_an_Undertaking) {
            self.number = 0;
        }
        rfalse;
    }
    rfalse;
];


[ SceptreBefore i ;     
    if (action == ##Wave) {
        "Apparently, it's not susceptible to that.";
    }
    if (action == ##Turn) {
        if (self notin Quite_an_Undertaking || self has moved) {
            rfalse;
        }
        if (self.number ~= 0 && mummy_case has open) {
            give mummy_case ~open;
            print "With a crash, the coffin slams shut.^^";
        }
        print "You crank the sceptre round, lose control for a moment, and some primitive mechanism spins. The word comes to rest as ~";
        i = random(6);
        EtruscanInt(i);
        print "~.^";
        self.number.number = i;
        if (debug_deterministic_transportation == 1) {
            first_socket.number = 3;
            second_socket.number = 6;
            third_socket.number = 1;
        }
        if (first_socket.number == 3 && second_socket.number == 6 && third_socket.number == 1 || (first_socket.number == 1 && second_socket.number == 6 && third_socket.number == 3)) {
            give mummy_case open;
            mummy_case.initial = "The great lid of the coffin is open.";
            "^With an awful groaning noise, the coffin lid heaves open. And it is...^^Empty!";
        }
        rtrue;
    }
    rfalse;
];


[ BuriedBefore ;        
    if (verb == ##Look or ##Wait or ##Inv) {
        rfalse;
    }
    if (verb == ##Sleep) {
        rfalse;
    }
    if (verb ~= ##Go) {
        "There's very little room, and the air is running out.";
    }
    if (mummy_case hasnt general || inp1 ~= u_obj) {
        "There's nowhere to go.";
    }
    if (self has general) {
        "^Your spirit, having cheated death once already, is weighed down with its double life and will not diffuse out again.";
    }
    give self general;
    Achieved(SCORE_AFTERLIFE);
    move adamantine_skull to player;
    print "^Your spirit rises, prepared as it was for the afterlife, and diffuses through the solid gold of the coffin by sheer effort of will, finally beginning to recoalesce. You stagger, confused, through dark caves until you finally come to light, clutching something solid...^";
    rfalse;
];


[ BuriedEachTurn i ;    
    i = Buried_Alive.number - 1;
    Buried_Alive.number = i;
    if (i == 0) {
        deadflag = DIED;
        "^The air runs out, and you expire. Few corpses as so considerate as to bury themselves in advance - hopefully this thought is some consolation.";
    }
    if (i == 3) {
        "^You are beginning to choke and pant.";
    }
    if (i == 1) {
        "^The air is desperately thin now, and you struggle hopelessly.";
    }
    rfalse;
];


[ OutsideRoyalMuseumSE ;        
    if (purple_sash has worn) {
        print "Seeing that you're wearing the sash of a Librarian, the guards part to allow you entrance.^";
        return The_Birdcage_of_the_Muses;
    }
    if (Austin in location) {
        print "The Museum guards are so busy abasing themselves before the sacred Cat (incredibly, that's Austin) that you are able to slip inside.^^Austin, having at long last found owners even more gullible and undemanding than yourself, ambles away to a life of extreme cossetting and luxury.^";
        remove Austin;
        StopDaemon(Austin);
        StopDaemon(self);
        return The_Birdcage_of_the_Muses;
    }
    "Museum guards tactfully nudge drunken louts away from the Museum.";
];


[ OutsideRoyalMuseumDaemon ;    
    if (game_section ~= T_ALEXANDRIA || location has cat_nofollow || Austin in location) {
        rfalse;
    }
    move Austin to location;
    "^Austin strolls regally along with you.";
];


[ DefacedDoorBefore ;   
    if (action == ##Open) {
        if (grey_cloak has worn) {
            rfalse;
        }
        "It won't open, for no reason you can see.";
    }
    if (action == ##Knock) {
        "The door shakes, and its old wood whispers ~Sosostris, the Priest of Sosostris~ in a falling echo.";
    }
    rfalse;
];


[ TableBefore ; 
    if (action == ##Receive) {
        if (noun == quarterstaff) {
            remove quarterstaff;
            give defaced_door ~open;
            give defaced_door lockable;
            give defaced_door locked;
            print "Madame Sosostris looks up, startled. ~Yes,~ she says, ~yes... this has potential.~^^She mutters incantations over the green wood and it begins to straighten out in a quite Freudian way. ~It will be ready in two thousand years. Come back then.~^^And she slips something into your palm as she bustles you out.^";
            PlayerTo(A_Tower);
            move silver_keepsake to player;
            Achieved(SCORE_QUARTERSTAFF);
            rtrue;
        }
        print "Madame Sosostris brushes ";
        Defart(noun);
        move noun to location;
        " aside impatiently.";
    }
    rfalse;
];


[ SosostrisLife2 ;      
    if (action == ##Give or ##Kiss) {
        "She is staring fixedly at the table, meditating.";
    }
    if (action == ##Order or ##Ask or ##Answer) {
        "Madame Sosostris is meditating.";
    }
    if (action == ##Attack) {
        "Your hand feels impotent to do so.";
    }
    rfalse;
];


[ QuarterstaffBefore ;  
    if (action == ##Wave) {
        "It rumbles in your hands, but nothing else happens.";
    }
    rfalse;
];


[ SailorBefore ;        
    if (action == ##Gamble) {
        R_Process(##Drop,inscribed_die);
        rtrue;
    }
    rfalse;
];


[ SailorLife ;  
    if (action == ##Order or ##Ask or ##Answer) {
        "You can't understand his guttural speech, but the die seems his only fascination.";
    }
    if (action == ##Kiss) {
        "Yes, your sort can be found down by the docks of most ports.";
    }
    if (action == ##Answer) {
        "He is burlier than you.";
    }
    rfalse;
];


[ GamblingSailorEachTurn n ;    
    if (gambling_sailor has general) {
        n = random(5);
        if (n < 3) {
            print "^The sailor grabs the die and throws a ~";
            n = random(6);
            if (gambling_sailor has lucky || inscribed_die has lucky) {
                n = 6;
            }
            EtruscanInt(n);
            print "~, ";
            if (n > inscribed_die.number) {
                print "and grins.^";
            }
            if (n < inscribed_die.number) {
                print "and sighs.^";
            }
            if (n == inscribed_die.number) {
                print "and shrugs.^";
            }
            inscribed_die.number = n;
            give gambling_sailor ~general;
        } else {
            "^The sailor stares at the die thoughtfully.";
        }
    } else {
        "^The sailor hums a sea shanty.";
    }
    rfalse;
];


[ InscribedDieBefore i ;        
    if (action == ##Take) {
        "The sailor covers it with his hand. But he looks the type who's never averse to a game.";
    }
    if (action == ##Read) {
        print "Each side has a word inscribed on it. The word on top is ~";
        EtruscanInt(self.number);
        "~.";
    }
    if (action == ##Drop or ##ThrowAt or ##Gamble) {
        i = random(6);
        if (inscribed_die has lucky) {
            i = 6;
        }
        give gambling_sailor general;
        inscribed_die.number = i;
        print "You throw a ~";
        EtruscanInt(i);
        "~, whatever that means.";
    }
    rfalse;
];

[ EtruscanInt i ;       
    if (i == 1) {
        print "thu";
    }
    if (i == 2) {
        print "zal";
    }
    if (i == 3) {
        print "si";
    }
    if (i == 4) {
        print "ca";
    }
    if (i == 5) {
        print "mach";
    }
    if (i == 6) {
        print "huth";
    }
    rtrue;
];


[ BirdcageEachTurn i ;  
    i = The_Birdcage_of_the_Muses.number;
    if (i == 3) {
        print "^A messenger-boy in a plain white tunic slips into the library and places a couple of tubes in the pigeonhole. So resentful is he of missing the party outside that he fails to notice you, and runs back out again at once.^";
        move tube_with_an_alpha_on to pigeonhole;
        move tube_with_a_kappa_on to pigeonhole;
    }
    if (i < 4) {
        The_Birdcage_of_the_Muses.number = i + 1;
    }
    rfalse;
];


[ TubeParse i w ;       
    if (parser_action == ##TheSame) {
        return 65535;
    }
  .labelXXX;
    if (1[?] == 1[?]) {
        w = NextWord();
        if (Refers(self,w) == 1) {
            ++i;
        } else if (w == 'tubes') {
            parser_action = ##PluralFound;
            ++i;
        } else {
            return i;
        }
        jump labelXXX;
    }
    rfalse;
];


[ ScrollParse i w ;     
    if (parser_action == ##TheSame) {
        return 65535;
    }
  .labelXXX;
    if (1[?] == 1[?]) {
        w = NextWord();
        if (Refers(self,w) == 1) {
            ++i;
        } else if (w == 'poems' or 'scrolls') {
            parser_action = ##PluralFound;
            ++i;
        } else {
            return i;
        }
        jump labelXXX;
    }
    rfalse;
];


[ OilRoomBefore ;       
    if (action == ##Anoint) {
        if (noun ~= player || mummy_case has general) {
            "That hardly seems worthwhile.";
        }
        give mummy_case general;
        "You smear some oil on your head, making a mental note to wash your hair in the morning. It is the least sacred sacred ritual you have ever taken part in.";
    }
    rfalse;
];


[ OilTroughsBefore ;    
    if (action == ##Drink or ##Enter) {
        "What a revolting idea!";
    }
    rfalse;
];


[ SpindleBefore ;       
    if (action == ##Pull) {
        R_Process(##Take,self);
        rtrue;
    }
    rfalse;
];


[ SpindleAfter ;        
    if (action == ##Take) {
        if (spindle_from_the_globe hasnt general) {
            give spindle_from_the_globe general;
            spindle_from_the_globe.description = "Once the polar axis of a globe.";
            "As you pull out its polar axis, the spindle, the Earth collapses altogether in a possibly symbolic, certainly dusty shambles.";
        }
        rfalse;
    }
    rfalse;
];


[ CallimachusLife o ;   
    if (action == ##Give) {
        if (self == Callimachus && noun == tube_with_an_alpha_on || (self == Apollonius && inp1 == tube_with_a_kappa_on)) {
            "He takes the tube, sees the letter on it, looks exasperated, clouts you over the head with the tube and pushes it back into your arms.";
        }
        if (noun == tube_with_an_alpha_on or tube_with_a_kappa_on) {
            CDefart(self);
            print " takes the tube and looks inside";
            o = child(noun);
            if (o == nothing) {
                move noun to location;
                " to find it is empty. He looks at you very darkly indeed but returns to his work, throwing the tube down impatiently.";
            }
            if (o == scroll_bearing_a_short_poem or scroll_bearing_an_epic_poem) {
                print " to see a scroll, which he pulls out eagerly.^^";
                if (self == Callimachus && o == scroll_bearing_an_epic_poem || (self == Apollonius && o == scroll_bearing_a_short_poem)) {
                    remove o;
                    if (parent(Callimachus) == parent(Apollonius)) {
                        move purple_sash to location;
                        move mystic_scroll to location;
                        move Apollonius to location;
                        Apollonius.initial = "Apollonius and Callimachus are now engaged in a furious, ugly brawl, from which it seems unlikely they will emerge for some considerable time.";
                        Achieved(SCORE_LIBRARY);
                        "One look is enough. He throws a vicious punch, and the librarians begin a savage bare-knuckled fist fight.^^This, shall we say, rather petty practical joke of yours does seem to have had one interesting consequence, though.";
                    }
                    remove noun;
                    print "~Arrghhhieee!~ he says (untranslatably), boiling over with rage. He then curses repeatedly, but the only word you can make out is ~";
                    if (self == Callimachus) {
                        print "Apollonius";
                        move self to parent(Apollonius);
                    } else {
                        print "Callimachus";
                        move self to parent(Callimachus);
                    }
                    give Callimachus concealed;
                    Apollonius.initial = "Apollonius and Callimachus are having a furious, heated, endless argument about something. They seem well practised at this occupation.";
                    "~. He pushes you out of his way and stomps off.";
                }
                print "~Ahhhh...~ he says (untranslatably) as he reads. ";
                if (noun == Callimachus) {
                    print "Eventually, after a very long wait, ";
                } else {
                    print "But soon ";
                }
                move noun to location;
                "he finishes, puts the scroll back into the tube with the habit of a trained librarian, and drops it absentmindedly on the floor.";
            }
            print " to find ";
            Indefart(o);
            print ", which, to say the least, comes as a surprise. Such a fuss is kicked up that you are quickly thrown out into the street.^";
            PlayerTo(Outside_the_Royal_Museum,1);
            rfalse;
        }
        "How could you bribe such disinterested men of learning as the librarians?";
    }
    if (action == ##Order or ##Ask or ##Answer) {
        "As a barbarian scholar, unversed in Greek, you can hardly expect to converse with such as he.";
    }
    rfalse;
];


[ PalaceNorth ; 
    if (cloak_of_many_colours has worn) {
        deadflag = DIED;
        "Or you could just saunter up to them wearing a cloak of many colours. Have it your own way.";
    }
    print "^You tiptoe into the palace, and immediately dart away from view of the many clerks and civil servants manning the machinery of government even at this late hour. Within seconds, you realise you are...^";
    return Lost_inside_the_Palace;
];


[ InsidePalaceBefore ;  
    if (action == ##Go) {
        if (purple_sash hasnt worn) {
            move player to Outside_Royal_Palace;
            location = Outside_Royal_Palace;
            "The slave looks you over and sees that you do not bear the mark of an accredited visitor to the Palace. You are discreetly escorted out.";
        }
        rfalse;
    }
    if (action == ##Drop or ##Empty) {
        "The slave politely holds your arm fast until you desist.";
    }
    if (action == ##Anoppe) {
        if (Lost_inside_the_Palace has general) {
            SlaveFindsYou();
            rtrue;
        }
        rfalse;
    }
    rfalse;
];


[ InsidePalaceAfter ;   
    if (action == ##Go) {
      .labelXXX;
        if (child(Lost_inside_the_Palace) ~= nothing) {
            remove child(Lost_inside_the_Palace);
            jump labelXXX;
        }
        move slave to Lost_inside_the_Palace;
        move player to Lost_inside_the_Palace;
        palace_move3 = palace_move2;
        palace_move2 = palace_move1;
        palace_move1 = noun;
        give Lost_inside_the_Palace ~general;
        if (palace_move3 == ne_obj && palace_move2 == e_obj && palace_move1 == s_obj) {
            give Lost_inside_the_Palace general;
        }
        if (palace_move1 == s_obj && palace_move2 == s_obj) {
            location = Outside_Royal_Palace;
            move player to location;
        }
        ++PalaceCnt;
        if (PalaceCnt == 2) {
            trigger_quotation(46);
        }
        rfalse;
    }
    rfalse;
];


[ SlaveLife ;   
    if (action == ##Order) {
        if (verb == ##Anoppe && location has general) {
            R_Process(##Anoppe);
            rtrue;
        }
        "The slave doesn't seem to notice.";
    }
    if (action == ##Ask) {
        if (second == invalidObj29928 or invalidObj32817 && location has general) {
            R_Process(##Anoppe);
            rtrue;
        }
        rfalse;
    }
    rfalse;
];

[ SlaveFindsYou ;       
    print "The slave here, a senior adviser merely disguised as a deaf mute, reacts at once, taking you by the arm and leading you on a convoluted path through the Palace to the...^";
    PlayerTo(Palace_Balustrade);
    rtrue;
];


[ BalustradeBefore ;    
    if (action == ##Swim or ##Jump) {
        move player to Warehouses_and_Port;
        location = Warehouses_and_Port;
        "You dive off the balcony in a beautifully graceful motion, plunging perfectly into the icy and (fortunately) deep waters below. You then struggle to the surface in a panicky, floundering motion, and finally wash up out of the water in a clumsy, ridiculous one.";
    }
    rfalse;
];


[ MountingBefore ;      
    if (action == ##Receive) {
        if (noun == golden_astrolabe) {
            remove astronomical_mounting;
            move golden_astrolabe to Palace_Balustrade;
            give golden_astrolabe static;
            give golden_astrolabe ~moved;
            golden_astrolabe.initial = "Instead, there is an astrolabe.";
            move astronomical_mounting to Palace_Balustrade;
            "It fits beautifully, as if designed to go there.";
        }
        "Doesn't fit.";
    }
    rfalse;
];


[ DriveBefore ; 
    if (action == ##Go) {
        if (noun == w_obj or u_obj && self.u_to == Dead_End) {
            print "With your heart in your mouth, you scale the old fire escape once again, breathing a sigh of relief as you haul yourself in through the open hatchway at the top.^";
        }
        rfalse;
    }
    rfalse;
];


[ FireEscapeBefore ;    
    if (action == ##Climb or ##Enter) {
        R_Process(##Go,u_obj);
        rtrue;
    }
    rfalse;
];


[ FireEscpeInitial ;    
    if (Beside_the_Drive.u_to ~= Dead_End) {
        "Wistaria climbs a desperately rickety fire escape up the side of the Hall.";
    }
    "Wistaria climbs a desperately rickety fire escape up the east side of the Hall, and so might you: at the top the fire escape door into the attic is open.";
];


[ NutsBefore ;  
    trigger_quotation(41);
    if (corn_crake in Hollow) {
        "The corn crake won't let you near her nest.";
    }
    rfalse;
];


[ CornCrakeLife ;       
    if (action == ##Order or ##Ask or ##Answer) {
        "The bird seems not to have heard.";
    }
    rfalse;
];


[ OldEvansLife ;        
    if (action == ##Order or ##Ask) {
        if (self hasnt general) {
            "~Just a minute, I'm doing my form.~";
        }
        print "He looks at you in a hypnotic daze,";
        if (verb == ##Give && noun == Crescent_Moon && second == player) {
            move Crescent_Moon to player;
            Achieved(SCORE_HYPNOSIS);
            self.description = "Old Evans' hat is empty. You feel terribly guilty.";
            " and before you can say ~How heartless I am~ he obediently hands you the Moon.";
        }
        " unable to follow your perfectly clear instruction.";
    }
    if (action == ##Answer) {
        "Evans is lost. Whatever do you mean?";
    }
    if (action == ##Give) {
        if (noun == Crescent_Moon) {
            "Evans looks sadly at the mascot. But it is tarnished now, you have spoilt it. Your guilt increases further.";
        }
        rfalse;
    }
    rfalse;
];


[ ChurchBefore ;        
    if (action == ##Enter) {
        if (self hasnt open) {
            "The Church door is barred from the far side.";
        }
        rfalse;
    }
    rfalse;
];


[ GoatsCompassesBefore ;        
    if (action == ##Enter) {
        "The pub is closed, licensing laws being what they are.";
    }
    rfalse;
];


[ PetMonkeyBefore ;     
    if (action == ##Touch) {
        "You stroke the monkey's pelt. It jumps about, cheeping.";
    }
    if (action == ##Kiss) {
        "Evans rather resents this importunate advance.";
    }
    rfalse;
];


[ CrescentMoonBefore ;  
    if (action == ##Take or ##Remove) {
        if (self in Old_Evans) {
            "Evans isn't giving up his mascot that easily.";
        }
        rfalse;
    }
    rfalse;
];


[ RacingTimesBefore ;   
    if (action == ##Take or ##Remove) {
        "Evans isn't giving up his paper.";
    }
    rfalse;
];


[ HatBandBefore ;       
    if (action == ##Take or ##Remove) {
        "Evans isn't giving up his hat-band.";
    }
    rfalse;
];


[ ParishChurchSouth ;   
    if (parish_church_obj hasnt open) {
        give parish_church_obj open;
        parish_church_obj.description = "The church door is open.";
        print "You unbar the door, and let yourself out.^";
    }
    return Stone_Cross;
];


[ ParishChurchDown ;    
    if (Moonstone has open) {
        "To your horror your body partly thins to mist as you climb down through the threshold!  Alarmed, you pull back. The underworld beneath the Moonstone, it seems, is not for mortals.";
    }
    "The Moonstone is huge and solid.";
];


[ MoonstoneBefore ;     
    if (action == ##Read) {
        trigger_quotation(47);
        rfalse;
    }
    if (action == ##Open or ##Push or ##Pull or ##Take) {
        trigger_quotation(19);
        "Legend has it nothing holds down the stone, but if so it's far too heavy to budge.";
    }
    if (action == ##PointAt or ##Knock) {
        if (adamantine_knight in location) {
            "The knight comes a little closer, cupping one ear to pantomime listening. He does seem to have partial hearing.";
        }
        rfalse;
    }
    rfalse;
];


[ LifeDeathLoveBefore ; 
    if (verb == ##Take && noun hasnt moved) {
        if (noun hasnt general) {
            if (old_gardeners__gloves has worn) {
                "It is searing hot!  Even with the gloves on you cannot touch the adamantine.";
            }
            "It is searing hot, and you cannot touch the surface!";
        }
        if (HighRodWarn == 0) {
            HighRodWarn = 1;
            "Warning (once only!): the three High Rods seem to balanced extremely delicately on the edge of the pit.";
        }
        Achieved(SCORE_HIGHROD);
    }
    rfalse;
];


[ LifeDeathLoveAfter ;  
    if (verb == ##Take && HighRodBalance == false) {
        remove rod_of_life;
        give rod_of_life moved;
        give rod_of_life ~concealed;
        give rod_of_life scored;
        remove rod_of_death;
        give rod_of_death moved;
        give rod_of_death ~concealed;
        give rod_of_death scored;
        remove rod_of_love;
        give rod_of_love moved;
        give rod_of_love ~concealed;
        give rod_of_love scored;
        move noun to player;
        give noun ~scored;
        HighRodBalance = true;
        "(Interesting choice.)^^As you take it, you upset the balance and the other two High Rods rattle away down the crystal passageway into the underworld.";
    }
    rfalse;
];


[ WestSideChapelBefore ;        
    if (action == ##Repair or ##Insert or ##PutOn) {
        if (second ~= adamantine_statue) {
            rfalse;
        }
        if (noun ~= adamantine_hand or adamantine_skull or adamantine_heart) {
            "That seems incongruous.";
        }
        if (noun == adamantine_hand) {
            move adamantine_hand to West_Side_Chapel;
            give adamantine_hand concealed;
            LeftHand = 2;
            "The hand fits rather loosely onto the left ~wrist~ of the adamantine knight.";
        }
        if (noun == adamantine_skull) {
            move adamantine_skull to West_Side_Chapel;
            give adamantine_skull concealed;
            SkullFit = 2;
            "The skull fits very loosely onto the ~neck~ of the adamantine knight.";
        }
        if (noun == adamantine_heart) {
            remove adamantine_heart;
            give adamantine_heart general;
            "The heart sits well in the so-empty ribcage of the adamantine knight.";
        }
        rfalse;
    }
    if (action == ##Turn) {
        if (noun == adamantine_skull or adamantine_hand && noun has concealed) {
            if (noun == adamantine_hand) {
                remove adamantine_hand;
                LeftHand = 0;
                give adamantine_hand general;
                give adamantine_hand ~concealed;
                "The hand screws tightly onto the adamantine knight.";
            }
            if (noun == adamantine_skull) {
                remove adamantine_skull;
                SkullFit = 0;
                give adamantine_skull general;
                give adamantine_skull ~concealed;
                "The skull screws tightly onto the adamantine knight.";
            }
        }
        rfalse;
    }
    rfalse;
];


[ WestSideChapelAfter ; 
    if (action == ##Look) {
        if (adamantine_statue in West_Side_Chapel) {
            DisplayKnight();
        }
        rfalse;
    }
    rfalse;
];


[ WestSideChapelEachTurn ;      
    if (SkullFit > 0) {
        --SkullFit;
        if (SkullFit == 0) {
            give adamantine_skull ~concealed;
            "^The skull wobbles and falls off the knight again.";
        }
    }
    if (LeftHand > 0) {
        --LeftHand;
        if (LeftHand == 0) {
            give adamantine_hand ~concealed;
            "^The hand wavers and falls off the knight again.";
        }
    }
    rfalse;
];


[ AdamantineKnightDesc ;        
    print "The knight is bursting and eager with life, as though nothing could fade his boundless energy for existence. ";
    if (marble_rose in self) {
        print "He is holding the marble flower. ";
    }
    if (statue_of_Diana in location && marble_rose notin statue_of_Diana) {
        "He gazes sadly at Diana, wanting only to be of chivalrous service.";
    }
    new_line;
    rtrue;
];


[ AdamantineKnightLife ;        
    if (action == ##Order) {
        KnightReacts();
        rtrue;
    }
    if (action == ##Ask or ##Answer) {
        "A shame there were no adamantine ears, really.";
    }
    if (action == ##Show or ##Give) {
        if (noun == marble_rose) {
            move marble_rose to adamantine_knight;
            "The knight is exceedingly pleased, and takes the flower.";
        }
        if (noun == silver_keepsake) {
            if (marble_rose notin adamantine_knight) {
                "The knight looks sadly at the picture.";
            }
            if (location ~= East_Side_Chapel) {
                "The knight looks at the picture sadly, unable to see its immediate relevance.";
            }
            move marble_rose to statue_of_Diana;
            give adamantine_knight general;
            statue_of_Diana.initial = "Diana's tall marble statue bathes in the moonlight: and a flower is placed gaily in her hair.";
            Achieved(SCORE_KNIGHT_ENCOURAGE);
            remove silver_keepsake;
            "The knight takes the keepsake, and studies it. Catching on, he places the marble flower in Diana's hair, high up beyond your reach. Afterward, he bows to you gravely. But there is a little sadness in his eye as he turns away from her.";
        }
        "The knight has forsworn earthly things in the service of Diana.";
    }
    if (action == ##Attack) {
        "He is adamant.";
    }
    rfalse;
];

[ DisplayKnight ;       
    if (adamantine_skull hasnt general && adamantine_skull hasnt concealed) {
        print "^A headless ";
    } else {
        print "^An ";
    }
    print "adamantine statue lies prone here, a knight on a tomb";
    if (adamantine_hand hasnt general && adamantine_heart hasnt general) {
        ".";
    }
    if (adamantine_hand has general || adamantine_hand has concealed) {
        print " with hand outstretched";
    }
    if (adamantine_heart has general) {
        ", a heart in his ribcage. And yet there is no spark of life in him.";
    }
    ", heartless and implacable.";
];

[ KnightReacts o ;      
    if (verb == ##Jump or ##Dance or ##Sing) {
        "The knight dances a jig with sheer exuberance.";
    }
    if (verb == ##Open or ##Pull or ##Take && noun == Moonstone && Moonstone hasnt open) {
        if (adamantine_knight hasnt general) {
            "The knight understands what is to be done. But he is world-weary and sad, and not yet in your service.";
        }
        give Moonstone open;
        "The knight bows, and pulls the enormously heavy Moonstone open. He plainly expected it to be effortless, but by the time he's finished you can almost see ghostly perspiration bead on the ghostly sinews around his adamantine body.";
    }
    if (verb == ##Go) {
        "The knight just about understands that he is to go somewhere, but cannot quite comprehend the direction. You'll have to indicate it somehow. (Shame there were no adamantine ears, really.)";
    }
    if (verb == ##PointVague) {
        if (location == Parish_Church && noun == d_obj) {
            if (Moonstone hasnt open) {
                "The knight is unable to walk straight through the Moonstone.";
            }
            remove adamantine_knight;
            move rod_of_life to Parish_Church;
            move rod_of_death to Parish_Church;
            move rod_of_love to Parish_Church;
            move Moonstone to Parish_Church;
            "The knight strides down into the underworld beneath the Moonstone, to be lost to your sight... forever?^^For even he has not life force enough to hold together in the mists: his skeleton begins to clatter away to nothing, falling in all directions, his heart, hand and skull returning Somehow to your feet. And they are altering, altering even as you look down into the void...";
        }
        o = nothing;
        if (location == Parish_Church) {
            if (noun == s_obj) {
                o = Stone_Cross;
            }
            if (noun == e_obj) {
                o = East_Side_Chapel;
            }
            if (noun == w_obj) {
                o = West_Side_Chapel;
            }
            if (noun == u_obj) {
                "Somewhat comically, the knight is too bulky to squeeze into the staircase. After a moment or two of watching an immovable object fighting it out with an irresistable force, you point back, and the knight returns, chastened.";
            }
        }
        if (location == East_Side_Chapel && noun == w_obj) {
            o = Parish_Church;
        }
        if (location == West_Side_Chapel && noun == e_obj) {
            o = Parish_Church;
        }
        if (o == nothing) {
            "The knight shakes his head, solemnly.";
        }
        if (o == Stone_Cross) {
            "The knight won't leave sacred ground.";
        }
        move adamantine_knight to o;
        if (o == East_Side_Chapel) {
            adamantine_knight.initial = "The knight stands here, bowing toward Diana.";
            move statue_of_Diana to o;
        } else if (marble_rose in adamantine_knight) {
            adamantine_knight.initial = "The knight stands clasping the flower.";
        } else {
            adamantine_knight.initial = "The knight stands staunchly here.";
        }
        print "The knight strides boldly away to the ";
        if (noun == n_obj) {
            "north.";
        }
        if (noun == s_obj) {
            "south.";
        }
        if (noun == e_obj) {
            "east.";
        }
        "west.";
    }
    if (verb == ##Give or ##Insert && second == statue_of_Diana && noun == marble_rose) {
        "The knight likes the idea but is confused.";
    }
    "The knight is confused. Perhaps you were a little rough with the skull.";
];


[ DianaBefore ; 
    if (action == ##PointAt) {
        if (adamantine_knight in location) {
            if (marble_rose in self) {
                "The knight has done all he can for Diana, and is now in your service.";
            }
            "The knight is unable to think how he can serve Diana.";
        }
        rfalse;
    }
    rfalse;
];


[ BellRopesBefore ;     
    if (action == ##Pull or ##Push or ##Blow) {
        "You ring an amateurish, jangling peal.";
    }
    rfalse;
];


[ OutOfSpireDown ;      
    print "You slither down a bell rope, noisily...^";
    return Bell_Tower;
];

[ AngelDevilConsultTopic tbl w ndx i len flag ; 
    ndx = 0;
  .labelXXX;
    if (1[?] == 1[?]) {
        len = 1;
        flag = false;
        if (tbl-->ndx == 65535) {
            rfalse;
        }
        if (tbl-->ndx < 20 && tbl-->ndx >= 0) {
            len = tbl-->ndx;
            ++ndx;
        }
        i = 0;
      .labelXXX;
        if (i < len) {
            if (w == tbl-->ndx) {
                flag = true;
            }
            ++i;
            ++ndx;
            jump labelXXX;
        }
        if (flag == true) {
            return tbl-->ndx;
        }
        ++ndx;
        jump labelXXX;
    }
    rtrue;
];

[ DemonQuestion w topic ;       
    topic = AngelDevilConsultTopic(demon_topics,w);
    if (topic ~= 0) {
        print (string) topic;
        new_line;
        rtrue;
    }
    if (AngelDevilConsultTopic(angel_topics,w) ~= 0) {
        "~That's a question you'd better put to my colleague in the Other Place,~ says the demon smoothly. ~Try something else.~";
    }
    print "~That's not something I am empowered to answer,~ says the demon with a nervous glance behind him. ~Try something else.~^";
    rfalse;
];

[ AngelQuestion w topic ;       
    topic = AngelDevilConsultTopic(angel_topics,w);
    if (topic ~= 0) {
        print (string) topic;
        new_line;
        rtrue;
    }
    if (AngelDevilConsultTopic(demon_topics,w) ~= 0) {
        "~That's a question you'd better put to my colleague in the Other Place,~ says the angel smoothly. ~Try something else.~^";
    }
    print "~That's not something I am empowered to answer,~ says the angel with a beatific smile upward. ~Try something else.~^";
    rfalse;
];


[ HellishPlaceCantGo ;  
    trigger_quotation(37);
    "That direction is not for the living.";
];


[ HellishPlaceAfter cnt ;       
    if (action == ##Look) {
        new_line;
        if (demon has general) {
            "~Thought what you wanted to ask yet?~ says the demon.";
        }
        cnt = demon.number;
        if (cnt > 0) {
            --cnt;
            demon.number = cnt;
            if (cnt > 0) {
                give demon general;
            }
        }
        if (cnt == 0) {
            "~Begone, pipsqueak!  I'll be seeing you... much later...~ says the demon with a memorable smile.";
        }
        if (cnt == 1) {
            "~All right, toad, you have one, just one, chance left,~ says the demon with a memorable smile.";
        }
        if (cnt == 2) {
            "~Now then, two chances remaining,~ says the demon with a memorable smile.";
        }
        "~Good afternoon,~ says the demon with a memorable smile. ~As a reward for your naked greed, may I welcome you to our little information service. We try to be as helpful as possible to explorers who are lost, or can't think how to solve their problems, you know the kind of thing. So just tell me what you want to know, or show me something to look at. You get the usual three hints.~";
    }
    rfalse;
];


[ HellishPlaceEachTurn i ;      
    i = random(10);
    if (i == 1) {
        "^There is a horrid grinding noise from far away.";
    }
    if (i == 2) {
        "^A flash of light sears your eyes, as the sulphurous flames grumble.";
    }
    if (i == 3) {
        "^You can almost, but not quite, make out the noise of shouting.";
    }
    if (i == 4) {
        "^Thunder and lightning can be heard from the fiery depths.";
    }
    rfalse;
];

[ HellishAsk ;  
    if (demon hasnt general) {
        if (demon.number == 0) {
            "~No hints left, sucker.~";
        }
        "~Under Regulation 3, paragraph 15 (i) clause (f), only one hint per visit to the infernal domain. You'll have to go away again and come back if you want another. So sorry.~";
    }
    rfalse;
];


[ DemonLife i ; 
    if (action == ##Answer or ##Ask) {
        if (HellishAsk() ~= 0) {
            rtrue;
        }
        if (DemonQuestion(special_word) ~= 0) {
            give demon ~general;
        }
        rtrue;
    }
    if (action == ##Order) {
        "One does not give orders to such a character.";
    }
    if (action == ##Give or ##Show) {
        if (HellishAsk() ~= 0) {
            rtrue;
        }
        print "The demon glances lazily at ";
        Defart(noun);
        print " and rouses himself to say: ~";
        give demon ~general;
        if (noun has edible) {
            remove noun;
            print "Mmm... delicious!~  Sloth and gluttony... two deadly sins in one minute. His boss will be pleased. ~";
        }
        i = noun.devil_hint;
        if (i == 65535) {
            if (noun.angel_hint ~= "") {
                "I know about that, but my counterpart doesn't.~";
            }
            "I know just what that's for.~";
        }
        (string) i, "~";
    }
    rfalse;
];


[ HeavenCantGo ;        
    trigger_quotation(27);
    "That direction is not for the living.";
];


[ HeavenBefore ;        
    if (action == ##Strike) {
        "The clouds are too fluffy.";
    }
    rfalse;
];


[ HeavenAfter i ;       
    if (action == ##Look) {
        new_line;
        if (angel has general) {
            "~Take all the time you need,~ says the angel kindly.";
        }
        i = angel.number;
        if (i > 0) {
            --i;
            angel.number = i;
            if (i > 0) {
                give angel general;
            }
        }
        if (i == 0) {
            "~I'm afraid I can be of no further use to you!  See you in another life,~ says the angel with a memorable smile.";
        }
        if (i == 1) {
            "~You have one remaining question,~ says the angel with a memorable smile.";
        }
        if (i == 2) {
            "~A whole two questions left,~ says the angel with a memorable smile.";
        }
        "~Good day,~ says the angel with a memorable smile. ~As a reward for your act of faith, may I welcome you to our little information service. We try to be as helpful as possible to explorers who are lost, or can't think how to solve their problems. Is there anything, pray, which you would like a hint about, or which you'd like to show me?  You are permitted three hints in all, in accordance with standard practice.~";
    }
    rfalse;
];


[ HeavenEachTurn i ;    
    i = random(10);
    if (i == 1) {
        "^Angels with harps float by, gossiping about you in a kindly way.";
    }
    if (i == 2) {
        "^Babies float by, just counting their toes.";
    }
    if (i == 3) {
        "^Burnished-gold sunlight strokes the tops of the clouds here.";
    }
    if (i == 4) {
        "^The choir invisible almost, for a moment, becomes audible.";
    }
    rfalse;
];

[ AngelHints ;  
    if (angel hasnt general) {
        if (angel.number == 0) {
            "~No hints left, alas.~";
        }
        "~Under Regulation 3, paragraph 15 (i) clause (f), only one hint per visit to the sacred domain. You'll have to go away again and come back if you want another. So sorry.~";
    }
    rfalse;
];


[ AngelLife i ; 
    if (action == ##Answer or ##Ask) {
        if (AngelHints() ~= 0) {
            rtrue;
        }
        if (AngelQuestion(special_word) ~= 0) {
            give demon ~general;
        }
        rtrue;
    }
    if (action == ##Order) {
        "One does not give orders to such a character.";
    }
    if (action == ##Give or ##Show) {
        if (AngelHints() ~= 0) {
            rtrue;
        }
        print "The angel looks keenly at ";
        Defart(noun);
        print " and rouses himself to say: ~";
        give angel ~general;
        i = noun.angel_hint;
        if (i == 65535) {
            if (noun.devil_hint ~= "") {
                "I suppose you could ask, um, that tailed gentleman.~";
            }
            "I'm afraid I can't help you there.~";
        }
        (string) i, "~";
    }
    rfalse;
];


[ SoapBefore ;  
    if (action == ##Eat) {
        R_Process(##Wash,self);
        rtrue;
    }
    rfalse;
];

[ HelpSub ;     
    if (pretty_mode == false) {
        "Newcomers to the game may like to try the following:^^  ~help instructions~   which gives some basic information,^  ~help commands~       details some common commands,^  ~help credits~        runs the game credits,^  ~help legal~          makes some legal disclaimers; or^  ~help inform~         which advertises the compiler Inform,^  ~help archive~        and the interactive fiction archive.";
    }
    DoMenu("Information is available on the following subjects:^^     Instructions    giving some basic information^     Commands        detailing some common commands^     Credits         game credits^     Release         release notes^     Legal           legal disclaimers^     Inform          advertising the compiler Inform^     Archive         and the interactive fiction archive",MainMenu,MainMenuDesc);
    rewdraw_statusline = true;
    rtrue;
];

[ MainMenu ;    
    if (menu_item == 0) {
        submenu_number = 3;
        submenu_header = "Curses";
        return 7;
    }
    if (menu_item == 1) {
        submenu_number = 6;
        submenu_header = "Instructions";
    }
    if (menu_item == 2) {
        submenu_number = 4;
        submenu_header = "Commands";
    }
    if (menu_item == 3) {
        submenu_number = 8;
        submenu_header = "Cast of Thousands";
    }
    if (menu_item == 4) {
        submenu_number = 6;
        submenu_header = "Release Notes";
    }
    if (menu_item == 5) {
        submenu_number = 5;
        submenu_header = "Legal Notes";
    }
    if (menu_item == 6) {
        submenu_number = 3;
        submenu_header = "Inform";
    }
    if (menu_item == 7) {
        submenu_number = 5;
        submenu_header = "ftp.gmd.de";
    }
    rtrue;
];

[ HelpSpecialSub ;      
    menu_item = 0;
    if (special_word == 'instruction') {
        menu_item = 1;
    }
    if (special_word == 'commands') {
        menu_item = 2;
    }
    if (special_word == 'credits') {
        menu_item = 3;
    }
    if (special_word == 'release') {
        menu_item = 4;
    }
    if (special_word == 'legal') {
        menu_item = 5;
    }
    if (special_word == 'inform') {
        menu_item = 6;
    }
    if (special_word == 'archive') {
        menu_item = 7;
    }
    if (menu_item == 0) {
        HelpSub();
    } else {
        MainMenuDesc(menu_item);
    }
    rtrue;
];

[ MainMenuDesc ;        
    if (menu_item == 1) {
        "^Welcome to the world of CURSES, an Advanced interactive Adventure game...^^", "The scene is set initially in the present day, at Meldrew Hall, an old family seat in the shires of England. You play the part of the current heir to the house. (This doesn't make your family rich aristocrats - just people who suffer very badly from inheritance tax.)^^Remember, your only aim is to find that map of Paris so you can go on holiday - try not to get diverted by any enormous quests. Still, it would be interesting to find out:^", "^  Just how realistic are the Tarot cards?^  What do sixth century politics have to do with you?^  Surely Greek myths can't come into this?^  What on earth is wrong with your entire family?^  Do the National Trust have sinister motives?^  Why is it so hard to go to church these days?^  What are daisies for?  Or goats, for that matter?^  Can modernist poetry really be bad for you?^  Should you rescue someone who doesn't want you to?^^", "To finally understand the secret, you will need to reach the Master Game, a concluding game-within-a-game buried deep in the past. Good luck!";
    }
    if (menu_item == 2) {
        print "Basic commands consist either of a verb on its own, or a verb with one or more nouns. For instance, to see where you are type ~look~. Some verbs can also have more elaborate forms; for instance you could also look at, inside or under something. ~Curses~ understands about 1200 English words, so most reasonable synonyms are allowed.^^To pick something up, ~take thing~ and to drop it again, ~drop thing~. To see what you have, type ~take inventory~ or just ~inventory~. You can move about with commands such as ~go west~, or just ~west~ for short. (It is assumed that you are blessed with an excellent sense of direction.)^^", "Some commands can act on more than one thing. You can ~drop all~, which will drop everything (except things you're wearing), for instance. Or if you found a packing case with a number of things in, you could type such things as:^^    remove everything but the blue key^    get all the coins except ten, twenty and fifty^^(Containers may also be emptied or emptied into each other.)  If you are not explicit enough, sometimes the game can infer what you mean, but at other times it will ask for further details. It might have replied to the first line above by saying^^    (from the yellow packing case)^^", "so that you know what has been assumed on your behalf. If there had been two blue keys you might reasonably have meant, it would reply with something like^^    Which do you mean, the blue doorkey or the Blue Moon Agency key?^^You may either tell it which, or else give up and do something else instead. If you don't mind which key, you can always say something such as:^^    drop a key into the slot^^and the game will make a sensible choice and tell you what it was.^^", "~Curses~ sometimes assumes commands which you implicitly make, but always tells you what they are in brackets. For instance:^^    >look up bach in book^    (first taking the Encyclopaedia of Composers)^    (putting the tuning fork in the rucksack to make room)^    ~J. S. Bach (1685-1750) had a pet aardvark called Nigel...^^", "~it~ refers to the last thing manipulated, ~him~ and ~her~ to anyone obvious in the room; ~pronouns~ will tell you what they currently mean, if in doubt. ~again~ repeats the last command.^^You can ~save~, ~restore~ or ~restart~ the game at any time, or indeed ~quit~ or ask for your ~score~, which also tells the time. ~fullscore~ or ~full~ gives a breakdown of the score. As an aide-memoire the command ~objects~ tells you where you left things you once had, and ~places~ says where you have been. ", "If you want to check that your copy of the game file is intact (and not, for instance, corrupted by some file-transfer process you used to get it), you can ~verify~ it. These commands do not take up any game time, and nor does anything the game didn't understand.^^", "Some jaundiced players tire of long descriptions of places, and they can type ~short~ (or ~superbrief~) to make the game only give short ones. Amnesiac players, on the other hand, may like to use ~long~ (or ~verbose~) to give only long ones. Either kind can go back to the usual state of affairs with ~normal~ (or ~brief~). There are also two kinds of inventory: ~inventory wide~ and ~inventory tall~.^^", "This Advanced story file employs special effects such as ";
        style bold;
        print "bold face";
        style roman;
        " names of rooms and a more elaborate status line than usual. Also, less than altogether relevant quotations pop up from time to time. If these effects do not seem to work properly on your machine, or are just downright annoying, they can be turned off with ~plain~ and on again with ~pretty~.^^", "From time to time you will be told that your score has changed: this can be turned off with ~notify off~, turned on again with ~notify on~ or made even more common by ~notify full~ (which even tells you about scores accruing from visits to places, unusual items discovered and the like).^^", "Simple typing mistakes can sometimes be corrected just by typing ~oops~ followed by the word you had intended to type, so for instance:^^    drop fish in buket^    oops bucket^^The game knows several useful abbreviations: i for inventory, ne for northeast (and so on), l for look, g for again, o for oops, x for examine, z for wait (short for ~zzz~ - sorry about that).^^", "You can sometimes enter larger objects you find. You might well be able to get in a tractor, for instance, though driving it around might be harder.^^", "From time to time, you will wish to speak to other people. If you only have a single word to say, you could use commands like^^    answer yes^    say boo to goose^^(Text in quotation marks is not allowed.)  The game will usually guess who you want to talk to if you miss off the name. A better way to talk, which allows more complicated remarks, is to use commands such as^", "^    goose, boo^    wine waiter, give me the bill^    ask professor about turtles^^though the waiter may have better things to do, and the professor might be quite mad. Some documents may be consulted in this game. For this, try commands such as^^    look up chlorine^    consult periodic table about argon^^", "You can give several commands in a row by use of ~then~ (or full stops, commas or ~and~ in some contexts): so, for instance,^^    e, s, get fish then inventory^    e.e.open door.s^^", "There are, of course, many other commands for more specialised circumstances. A final word of warning: cursing is strictly forbidden in this game.";
    }
    if (menu_item == 3) {
        style bold;
        print "CURSES^";
        style roman;
        "An Interactive Diversion by Graham Nelson^^Play-testing by Michael Kinyon, Gareth Rees and Richard Tucker^^Together with informers: ", "Torbjorn Andersson, Julian Arnold, Jonathan Badger, Greg Bakker, Richard Barnett, Joachim Baumann, Richard Beigel, Don Blaheta, Martin Braun, Allen Braunsdorf, Otto Christenson, Tomas Clark, Andrew Clover, Alan Cox, Richard Develyn, Robert Dickau, Paul David Doherty, Roger Dominick, Koen van der Drift, Ivan Drucker, Jon Drukman, Martin N. Dunstan, Paul Fletcher, Richard Forster, Ron Galicia, Allen Garvin, Chris Goedde, Peter Grundy, Mark ~Guido~ Guidarelli, David Horowitz, Will Hurwood, Hakan Huss, Randy Hutson, Darin Johnson, Stefan Jokisch, Brad Jones, Jose Kahan, Darius Katz, Dennis S. Keeler, Andrew Kemp, John W. Kennedy, Peter Killworth, Marnix Klooster, Mark Knibbs, Teo Kwang Liak, Matthew J. MacKenzie, Chris Mann, Chris Markwyn, David McGrath, M. Sean Molley, Byron Montgomerie, David Moore, Carl Muckenhoupt, Christine Nelson, Toby Nelson, Carrie O'Grady, Michael A. Patton, Morten Holm Pederson, Mark Phillips, Neil Querengesser, Mason Reed, Robert Rendell, Loren Rittle, Luke Roberts, John Rodriguez, Kathleen Rudden, Bryan Scattergood, Bernd Schmitt, Rene Schneer, Alison Scott, Mike Scott, Matthew Selby, Dilip Sequeira, David Sinclair, Suzanne Skinner, David Stephenson, Robert Stone, Nyko Tyni, David VanBronkhorst, Andrew Vesperman, Hao-yang Wang, Robin Watts, John West, Christopher A. Wichura, Graham Willmott, Andrew Wren, Brendon Wyber, Jeff Zahn and Zhang Genglue.^^", "Apologies and acknowledgements to: the late Mr T. S. Eliot, the Oxford History of England, Philip Vellacott's translations of the Greek plays and the guidebooks of the British Museum; ", "Edouard Poor, for porting interpreters to the Acorn Archimedes; ", "and Volker Blasius, for keeping the if-archive.^^", "Coffee mugs fired by: Helena Verrill.^^", "Genealogy and photography associate: Peter Nelson.^^", "Ancient Greek cultural attache and daisy chain consultant: Dr L. J. Coventry.^^", "Archaeology: the InfoTaskForce, Paul David Doherty and Mark Howell, without whose excavations Inform could not have been written. If I have hacked deeper than them, it is because I stand in their trenches.";
    }
    if (menu_item == 4) {
        Banner();
        "^Release 16 is the eighth public release of ~Curses~. Its major previous releases were as follows:^^", "   Release 7 / 930428   (the original and still the worst)^   Release 8 / 930603   (much enhanced, slightly larger)^   Release 9 / 931111   (extended by about 20%)^   Release 10 / 940120  (tidied up a little)^   Release 12 / 940601  (a major extension)^   Release 14 / 950522  (first edition of the rewrite)^^", "For Release 14 the entire source code was ~digitally remastered~, so to speak: rewritten and tidied up into Inform 5 code which properly uses the Library. Since then, the author has only been maintaining and correcting.";
    }
    if (menu_item == 5) {
        Banner();
        "^This story file is copyright (c) Graham Nelson 1993, 1994, 1995, but may be freely distributed and used provided no profit is involved and provided it is not modified in any way. ", "It contains no fragments of code written by anyone other than the author. The author was extremely tempted to hide an important clue here, but thought better of it. No trade marks are (knowingly) used. All characters and locations are imaginary, and any resemblance to real persons (living after 1900) or places (except in antiquity) is accidental.";
    }
    if (menu_item == 6) {
        "~Inform~ is an Adventure game compiler written by the author, and was once ~Curses~' Siamese twin but has now taken on an independent life of its own. It takes a C-like source (this game takes up about 18600 lines, or 750K) to produce story files which can be played on almost any modern computer. (~Curses~ has been played on Acorns, PCs, Macs, Amigas, Ataris, Suns, NeXTs, Psions, VAX and IBM mainframes and many other machines.)^^", "Documentation, source code (in ANSI C) and examples for Inform are available to the public: see ~help archive~.";
    }
    if (menu_item == 7) {
        "There is an archive of ~interactive fiction~ like this at the anonymous FTP site ~ftp.gmd.de~, in its ~if-archive~, currently maintained by Volker Blasius. The archive contains the work of many people, including source for interpreters capable of playing games like this on almost any computer.^^~Curses~ itself, and the ANSI C source for its compiler ~Inform~, together with manuals in a choice of formats and code for several example games, are archived there.";
    }
    rtrue;
];


[ trigger_quotation i ; 
    if (quote_flag_set->i == 0) {
        quote_flag_set->i = 1;
        quote_selection = i;
    }
    rtrue;
];

[ display_quote n ;     
    rewdraw_statusline = true;
    if (n == 0) {
        quote_line-->0 = "Four be the things I'd been better without:";
        quote_line-->1 = "Love, curiosity, freckles and doubt.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Dorothy Parker, ~Inventory~";
        generic_globvar = quote_display(4,43,quote_line);
    }
    if (n == 1) {
        quote_line-->0 = "It seemed that the next minute they would discover";
        quote_line-->1 = "a solution. Yet it was clear to both of them that";
        quote_line-->2 = "the end was still far, far off, and that the";
        quote_line-->3 = "hardest part was just beginning.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Anton Chekhov, ~The Lady with the Dog~";
        generic_globvar = quote_display(6,50,quote_line);
    }
    if (n == 2) {
        quote_line-->0 = "                           The mouse";
        quote_line-->1 = "Behind the mouldering wainscot shrieked.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Alfred, Lord Tennyson, ~Mariana~";
        generic_globvar = quote_display(4,40,quote_line);
    }
    if (n == 3) {
        quote_line-->0 = "Parturient montes, nascetur ridiculus mus.";
        quote_line-->1 = 0;
        quote_line-->2 = "-- Horace, ~Ars Poetica~";
        generic_globvar = quote_display(3,42,quote_line);
    }
    if (n == 4) {
        quote_line-->0 = "Zeus, whose will has marked for man";
        quote_line-->1 = "A single way where wisdom lies";
        quote_line-->2 = "Ordained one eternal plan:";
        quote_line-->3 = "Man must suffer to be wise.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Aeschylus, ~Agamemnon~";
        generic_globvar = quote_display(6,35,quote_line);
    }
    if (n == 5) {
        quote_line-->0 = "I might repeat to myself, slowly and soothingly,";
        quote_line-->1 = "a list of quotations beautiful from minds profound;";
        quote_line-->2 = "if I can remember any of the damn things.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Dorothy Parker";
        generic_globvar = quote_display(5,51,quote_line);
    }
    if (n == 6) {
        quote_line-->0 = "More ways of killing a cat";
        quote_line-->1 = "than choking her with cream.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Charles Kingsley";
        generic_globvar = quote_display(4,28,quote_line);
    }
    if (n == 7) {
        quote_line-->0 = "I would like to be there,";
        quote_line-->1 = "were it but to see how the cat jumps.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Sir Walter Scott";
        generic_globvar = quote_display(4,37,quote_line);
    }
    if (n == 8) {
        quote_line-->0 = "Do not go gentle into that good night.";
        quote_line-->1 = "Rage, rage against the dying of the light.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Dylan Thomas";
        generic_globvar = quote_display(4,42,quote_line);
    }
    if (n == 9) {
        quote_line-->0 = "No, 'tis not so deep as a well, nor so wide as";
        quote_line-->1 = "a church door; but 'tis enough, 'twill serve.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Shakespeare, ~Romeo and Juliet~";
        generic_globvar = quote_display(4,46,quote_line);
    }
    if (n == 10) {
        quote_line-->0 = "...I have just signed legislation that will outlaw";
        quote_line-->1 = "Russia for ever. We begin bombing in five minutes.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- President Reagan, mistakenly believing the TV";
        quote_line-->4 = "   cameras were switched off";
        generic_globvar = quote_display(5,51,quote_line);
    }
    if (n == 11) {
        quote_line-->0 = "What is a ship but a prison?";
        quote_line-->1 = 0;
        quote_line-->2 = "-- Robert Burton (1577-1640)";
        generic_globvar = quote_display(3,28,quote_line);
    }
    if (n == 12) {
        quote_line-->0 = "The remarkable fact is that the values of these";
        quote_line-->1 = "numbers seem to have been very finely adjusted";
        quote_line-->2 = "to make possible the development of life.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Stephen Hawking, ~A Brief History of Time~";
        generic_globvar = quote_display(5,47,quote_line);
    }
    if (n == 13) {
        quote_line-->0 = "Remember that you are an Englishman, and have";
        quote_line-->1 = "consequently won first prize in the lottery of life.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Cecil Rhodes (1853-1902)";
        generic_globvar = quote_display(4,52,quote_line);
    }
    if (n == 14) {
        quote_line-->0 = "Les plus desesperes sont les chants les plus beaux";
        quote_line-->1 = "Et j'en sais d'immortels quit sont de purs songlots.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Alfred de Musset, ~La Nuit de mai~";
        generic_globvar = quote_display(4,52,quote_line);
    }
    if (n == 15) {
        quote_line-->0 = "There is no return game between a man and his stars.";
        quote_line-->1 = 0;
        quote_line-->2 = "-- Samuel Beckett, ~Murphy~";
        generic_globvar = quote_display(3,52,quote_line);
    }
    if (n == 16) {
        quote_line-->0 = "Throw away thy rod,";
        quote_line-->1 = "Throw away thy wrath:";
        quote_line-->2 = "O my God.";
        quote_line-->3 = "Take the gentle path.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- George Herbert, ~Discipline~";
        generic_globvar = quote_display(6,31,quote_line);
    }
    if (n == 17) {
        quote_line-->0 = "Speak gently, she can hear";
        quote_line-->1 = "The daisies grow.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Oscar Wilde, ~Requiescat~";
        generic_globvar = quote_display(4,28,quote_line);
    }
    if (n == 18) {
        quote_line-->0 = "Too poor for a bribe, and too proud to importune";
        quote_line-->1 = "He had not the method of making a fortune.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Thomas Grey, ~Sketch of His own Character~";
        generic_globvar = quote_display(4,48,quote_line);
    }
    if (n == 19) {
        quote_line-->0 = "Facilis descensus Averno:";
        quote_line-->1 = "Noctes atque dies patet atri ianua Ditis;";
        quote_line-->2 = "Sed revocare gradum superasque evadere ad auras,";
        quote_line-->3 = "Hoc opus, hic labor est.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Virgil, ~The Aeneid~ Book VI:126";
        generic_globvar = quote_display(6,48,quote_line);
    }
    if (n == 20) {
        quote_line-->0 = "We are the children of primeval night; we bear";
        quote_line-->1 = "The name of Curses in our home deep under earth.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Aeschylus, ~The Eumenides~";
        generic_globvar = quote_display(4,48,quote_line);
    }
    if (n == 21) {
        quote_line-->0 = "Thou makest his beauty to consume away,";
        quote_line-->1 = "Like as it were a moth fretting a garment:";
        quote_line-->2 = "Every man therefore is but vanity.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Psalms 39:12 (Book of Common Prayer version)";
        generic_globvar = quote_display(5,47,quote_line);
    }
    if (n == 22) {
        quote_line-->0 = "White lilac bowed,";
        quote_line-->1 = "Lost lanes of Queen Anne's lace";
        quote_line-->2 = "And that high-builded cloud";
        quote_line-->3 = "Moving at summer's pace.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Philip Larkin, ~Cut Grass~";
        generic_globvar = quote_display(6,31,quote_line);
    }
    if (n == 23) {
        quote_line-->0 = "At the end of the day victory belongs to the Curses,";
        quote_line-->1 = "Who shout in shrill triumph";
        quote_line-->2 = "Over the utter rout of the defeated house.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Aeschylus, ~Seven Against Thebes~";
        generic_globvar = quote_display(5,52,quote_line);
    }
    if (n == 24) {
        quote_line-->0 = "He shall separate them one from another,";
        quote_line-->1 = "as a shepherd divideth his sheep from the goats.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Matthew 25:32";
        generic_globvar = quote_display(4,48,quote_line);
    }
    if (n == 25) {
        quote_line-->0 = "Quickly now the amber";
        quote_line-->1 = "  Takes the fly with knees deranged";
        quote_line-->2 = "To be buried unseen, unfound";
        quote_line-->3 = "  And irrevocably changed.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Dean Waynflete, ~Substance~";
        generic_globvar = quote_display(6,35,quote_line);
    }
    if (n == 26) {
        quote_line-->0 = "Thus the devil played at chess with me, and yielding";
        quote_line-->1 = "a pawn, thought to gain a queen of me, taking";
        quote_line-->2 = "advantage of my honest endeavours.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Sir Thomas Browne, ~Religio Medici~ pt I";
        generic_globvar = quote_display(5,52,quote_line);
    }
    if (n == 27) {
        quote_line-->0 = "Art thou pale for weariness";
        quote_line-->1 = "Of climbing heaven and gazing on the earth?";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Shelley, ~To The Moon~";
        generic_globvar = quote_display(4,43,quote_line);
    }
    if (n == 28) {
        quote_line-->0 = "A nice, - respectable, - middle class, middle-aged maiden";
        quote_line-->1 = "lady, with time on her hands and the money to help her pass";
        quote_line-->2 = "it... Let us call her Aunt Edna... Aunt Edna is universal,";
        quote_line-->3 = "and to those who may feel that all the problems of the";
        quote_line-->4 = "modern theatre might be solved by her liquidation, let me";
        quote_line-->5 = "add that... she is also immortal.";
        quote_line-->6 = 0;
        quote_line-->7 = "-- Terence Rattigan, preface to the ~Collected Plays~";
        generic_globvar = quote_display(8,60,quote_line);
    }
    if (n == 29) {
        quote_line-->0 = "I seemed to move among a world of ghosts,";
        quote_line-->1 = "And feel myself the shadow of a dream.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Alfred, Lord Tennyson, ~The Princess~";
        generic_globvar = quote_display(4,41,quote_line);
    }
    if (n == 30) {
        quote_line-->0 = "If the doors of perception were cleansed,";
        quote_line-->1 = "everything would appear to man as it is, infinite.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- William Blake";
        generic_globvar = quote_display(4,50,quote_line);
    }
    if (n == 31) {
        quote_line-->0 = "Follow the instructions,";
        quote_line-->1 = "tell us what you think:";
        quote_line-->2 = "they lose something in translation,";
        quote_line-->3 = "they might as well be written in invisible ink.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Peter Hammill, ~Invisible Ink~";
        generic_globvar = quote_display(6,47,quote_line);
    }
    if (n == 32) {
        quote_line-->0 = "On a round ball";
        quote_line-->1 = "A workman that hath copies by, can lay";
        quote_line-->2 = "An Europe, Afrique and an Asia,";
        quote_line-->3 = "And quickly make that, which was nothing, All.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- John Donne, ~Valediction: Of Weeping~";
        generic_globvar = quote_display(6,46,quote_line);
    }
    if (n == 33) {
        quote_line-->0 = "What you don't know would make a great book.";
        quote_line-->1 = 0;
        quote_line-->2 = "-- The Rev. Sydney Smith";
        generic_globvar = quote_display(3,44,quote_line);
    }
    if (n == 34) {
        quote_line-->0 = "Sir Walter Elliot, of Kellynch-hall, in Somersetshire,";
        quote_line-->1 = "was a man who, for whose own amusement, never took up";
        quote_line-->2 = "any book but the Baronetage; there he found occupation";
        quote_line-->3 = "in an idle hour, and consolation in a distressed one";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Jane Austen, ~Persuasion~";
        generic_globvar = quote_display(6,54,quote_line);
    }
    if (n == 35) {
        quote_line-->0 = "I am the Love that dare not speak its name.";
        quote_line-->1 = 0;
        quote_line-->2 = "-- Lord Alfred Douglas, ~Two Loves~";
        generic_globvar = quote_display(3,43,quote_line);
    }
    if (n == 36) {
        quote_line-->0 = "'I am inclined to think -' said I.";
        quote_line-->1 = "'I should do so,' Sherlock Holmes remarked";
        quote_line-->2 = "impatiently.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Sir Arthur Conan Doyle, ~The Valley of Fear~";
        generic_globvar = quote_display(5,47,quote_line);
    }
    if (n == 37) {
        quote_line-->0 = "Hell is a city much like London -";
        quote_line-->1 = "A populous and a smoky city.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Shelley, ~Peter Bell the Third~";
        generic_globvar = quote_display(4,34,quote_line);
    }
    if (n == 38) {
        quote_line-->0 = "I hope I shall never be deterred from detecting";
        quote_line-->1 = "what I think a cheat, by the menaces of a ruffian.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Dr Johnson (a letter from 1775)";
        generic_globvar = quote_display(4,50,quote_line);
    }
    if (n == 39) {
        quote_line-->0 = "Expatiate free o'er all this scene of man;";
        quote_line-->1 = "A mighty maze! but not without a plan.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Alexander Pope, ~An Essay on Man~";
        generic_globvar = quote_display(4,42,quote_line);
    }
    if (n == 40) {
        quote_line-->0 = "It's hard to be religious when certain people";
        quote_line-->1 = "are never incinerated by bolts of lightning.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Bill Watterson, ~Calvin & Hobbes~";
        generic_globvar = quote_display(4,45,quote_line);
    }
    if (n == 41) {
        quote_line-->0 = "Follow me, follow";
        quote_line-->1 = "Down to the hollow";
        quote_line-->2 = "And there let us wallow";
        quote_line-->3 = "In glorious mud.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Flanders and Swann";
        generic_globvar = quote_display(6,23,quote_line);
    }
    if (n == 42) {
        quote_line-->0 = "Zoe, logic merely enables one";
        quote_line-->1 = "to be wrong with authority";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Dr Who, aboard ~The Wheel In Space~";
        generic_globvar = quote_display(4,38,quote_line);
    }
    if (n == 43) {
        quote_line-->0 = "Then for as moche as a philosofre saith,";
        quote_line-->1 = "~he wrappith him in his frend, that condescendith";
        quote_line-->2 = "to the rightfulle praiers of his frend,~";
        quote_line-->3 = "therefore have I yeven the a suffisant Astrolabie";
        quote_line-->4 = "as for oure orizonte, compowned after the";
        quote_line-->5 = "latitude of Oxenforde;";
        quote_line-->6 = 0;
        quote_line-->7 = "-- Geoffrey Chaucer, ~A Treatise on the Astrolabe~";
        generic_globvar = quote_display(8,50,quote_line);
    }
    if (n == 44) {
        quote_line-->0 = "Upon a nyght in sleep as he hym leyde,";
        quote_line-->1 = "Hym thoughte how that the wynged god Mercurie";
        quote_line-->2 = "Biforn hym stood and bad hym to be murie.";
        quote_line-->3 = "His slepy yerde in hond he bar uprighte;";
        quote_line-->4 = "An hat he werede upon his heris brighte.";
        quote_line-->5 = 0;
        quote_line-->6 = "-- Geoffrey Chaucer, ~The Knight's Tale~";
        generic_globvar = quote_display(7,45,quote_line);
    }
    if (n == 45) {
        quote_line-->0 = "Benedick:";
        quote_line-->1 = "  To bind me or undo me, one of those.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Shakespeare, ~Much Ado About Nothing~";
        generic_globvar = quote_display(4,40,quote_line);
    }
    if (n == 46) {
        quote_line-->0 = "In the central display case, there is a curious";
        quote_line-->1 = "pottery model, either representing the Labyrinth";
        quote_line-->2 = "of Minos or a water-cooling system.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- W. J. Murnane's ~Guide to Ancient Egypt~";
        generic_globvar = quote_display(5,48,quote_line);
    }
    if (n == 47) {
        quote_line-->0 = "I don't know who was there before me:";
        quote_line-->1 = "One person, several, none;";
        quote_line-->2 = "It doesn't matter.";
        quote_line-->3 = "There are marks on the slabs of rock,";
        quote_line-->4 = "Some beautiful, all mysterious;";
        quote_line-->5 = "Some certainly not made by human hands.";
        quote_line-->6 = 0;
        quote_line-->7 = "-- Primo Levi, ~A Valley~";
        generic_globvar = quote_display(8,39,quote_line);
    }
    if (n == 48) {
        quote_line-->0 = "It has always seemed to me that I had to answer";
        quote_line-->1 = "questions which fate had posed to my forefathers,";
        quote_line-->2 = "and which had not yet been answered, or as if I";
        quote_line-->3 = "had to complete, or perhaps continue, things which";
        quote_line-->4 = "previous ages had left unfinished.";
        quote_line-->5 = 0;
        quote_line-->6 = "-- Carl Jung, ~Memories, Dreams, Reflections~";
        generic_globvar = quote_display(7,50,quote_line);
    }
    rtrue;
];

[ EnglishNumber n m f ; 
    if (n == 0) {
        print "zero";
        rfalse;
    }
    if (n < 0) {
        print "minus ";
        n = 0 - n;
    }
    if (n >= 1000) {
        EnglishNumber(n / 1000);
        print " thousand";
        n = n % 1000;
        f = true;
    }
    if (n >= 100) {
        if (f == true) {
            print ", ";
        }
        EnglishNumber(n / 100);
        print " hundred";
        n = n % 100;
        f = true;
    }
    if (n == 0) {
        rfalse;
    }
    if (f == true) {
        print " and ";
    }
    if (n < 10) {
        EnglishDigit(n);
        rfalse;
    }
    if (n >= 20) {
        m = n / 10;
        if (m == 2) {
            print "twenty";
        }
        if (m == 3) {
            print "thirty";
        }
        if (m == 4) {
            print "forty";
        }
        if (m == 5) {
            print "fifty";
        }
        if (m == 6) {
            print "sixty";
        }
        if (m == 7) {
            print "seventy";
        }
        if (m == 8) {
            print "eighty";
        }
        if (m == 9) {
            print "ninety";
        }
        if (n % 10 == 0) {
            rfalse;
        }
        print "-";
        EnglishDigit(n % 10);
        rfalse;
    }
    if (n == 10) {
        print "ten";
        rfalse;
    }
    if (n == 11) {
        print "eleven";
        rfalse;
    }
    if (n == 12) {
        print "twelve";
        rfalse;
    }
    if (n == 13) {
        print "thirteen";
        rfalse;
    }
    if (n == 14) {
        print "fourteen";
        rfalse;
    }
    if (n == 15) {
        print "fifteen";
        rfalse;
    }
    if (n == 16) {
        print "sixteen";
        rfalse;
    }
    if (n == 17) {
        print "seventeen";
        rfalse;
    }
    if (n == 18) {
        print "eighteen";
        rfalse;
    }
    print "nineteen";
    rtrue;
];

[ EnglishDigit n ;      
    if (n == 1) {
        print "one";
        rfalse;
    }
    if (n == 2) {
        print "two";
        rfalse;
    }
    if (n == 3) {
        print "three";
        rfalse;
    }
    if (n == 4) {
        print "four";
        rfalse;
    }
    if (n == 5) {
        print "five";
        rfalse;
    }
    if (n == 6) {
        print "six";
        rfalse;
    }
    if (n == 7) {
        print "seven";
        rfalse;
    }
    if (n == 8) {
        print "eight";
        rfalse;
    }
    if (n == 9) {
        print "nine";
        rfalse;
    }
    rtrue;
];

[ NextEntry o odepth ;  
    o = sibling(o);
    if (lt_value ~= 0) {
        if (c_style & 512 ~= 0 && odepth == 0) {
          .labelXXX;
            if (o ~= nothing && (o.sw_to ~= lt_value || o hasnt workflag)) {
                o = sibling(o);
                jump labelXXX;
            }
            return o;
        }
        if (c_style & 2048 ~= 0) {
          .labelXXX;
            if (o ~= nothing && (o has concealed || o has scenery || o.sw_to ~= lt_value)) {
                o = sibling(o);
                jump labelXXX;
            }
            return o;
        }
      .labelXXX;
        if (o ~= nothing && o.sw_to ~= lt_value) {
            o = sibling(o);
            jump labelXXX;
        }
        return o;
    }
    if (c_style & 512 ~= 0 && odepth == 0) {
      .labelXXX;
        if (o ~= nothing && o hasnt workflag) {
            o = sibling(o);
            jump labelXXX;
        }
        return o;
    }
    if (c_style & 2048 ~= 0) {
      .labelXXX;
        if (o ~= nothing && (o has concealed || o has scenery)) {
            o = sibling(o);
            jump labelXXX;
        }
    }
    return o;
];

[ WillRecurse o ;       
    if (c_style & 32 ~= 0) {
        rtrue;
    }
    if (c_style & 16 == 0) {
        rfalse;
    }
    if (o has transparent || o has supporter || (o has container && o has open)) {
        rtrue;
    }
    rfalse;
];

[ ListEqual o1 o ;      
    if (child(o1) ~= nothing && WillRecurse(o1) ~= 0) {
        rfalse;
    }
    if (child(o) ~= nothing && WillRecurse(o) ~= 0) {
        rfalse;
    }
    if (c_style & (4 + 128) ~= 0) {
        if (o1 hasnt worn && o has worn || (o hasnt worn && o1 has worn)) {
            rfalse;
        }
        if (o1 hasnt light && o has light || (o hasnt light && o1 has light)) {
            rfalse;
        }
    }
    return Identical(o1,o);
];

[ SortTogether obj value ;      
  .labelXXX;
    if (child(obj) ~= nothing) {
        if (child(obj).sw_to ~= value) {
            move child(obj) to out_obj;
        } else {
            move child(obj) to in_obj;
        }
        jump labelXXX;
    }
  .labelXXX;
    if (child(in_obj) ~= nothing) {
        move child(in_obj) to obj;
        jump labelXXX;
    }
  .labelXXX;
    if (child(out_obj) ~= nothing) {
        move child(out_obj) to obj;
        jump labelXXX;
    }
    rtrue;
];


[ SortOutList obj i k l ;       
  .labelXXX;
    i = obj;
  .labelXXX;
    if (i ~= 0) {
        k = i.sw_to;
        if (k ~= 0) {
            i = sibling(i);
          .labelXXX;
            if (i ~= 0 && i.sw_to == k) {
                i = sibling(i);
                jump labelXXX;
            }
            if (i == 0) {
                rfalse;
            }
            l = sibling(i);
          .labelXXX;
            if (l ~= 0) {
                if (l.sw_to == k) {
                    SortTogether(parent(obj),k);
                    obj = child(parent(obj));
                    jump labelXXX;
                }
                l = sibling(l);
                jump labelXXX;
            }
        }
        i = sibling(i);
        jump labelXXX;
    }
    rtrue;
];

[ WriteListFrom o style depth ; 
    if (o == child(parent(o))) {
        SortOutList(o);
        o = child(parent(o));
    }
    c_style = style;
    if (style & 512 ~= 0) {
      .labelXXX;
        if (o ~= nothing && o hasnt workflag) {
            o = sibling(o);
            jump labelXXX;
        }
    } else if (c_style & 2048 ~= 0) {
      .labelXXX;
        if (o ~= nothing && (o has concealed || o has scenery)) {
            o = sibling(o);
            jump labelXXX;
        }
    }
    if (o == nothing) {
        rfalse;
    }
    wlf_indent = 0;
    WriteListR(o,depth);
    rtrue;
];

[ WriteListR o depth stack_pointer classes_p sizes_p i j k k2 l m n q senc mr ; 
    if (depth > 0 && o == child(parent(o))) {
        SortOutList(o);
        o = child(parent(o));
    }
    classes_p = 24788 + stack_pointer;
    sizes_p = 24660 + stack_pointer;
    i = o;
    j = 0;
  .labelXXX;
    if (i ~= 0 && j + stack_pointer < 128) {
        classes_p->j = 0;
        if (i.d_to ~= nothing) {
            ++k;
        }
        i = NextEntry(i,depth);
        ++j;
        jump labelXXX;
    }
    if (c_style & 1024 ~= 0) {
        if (j == 1[?]) {
            print " is";
        } else {
            print " are";
        }
        if (c_style & 1 ~= 0) {
            print ":^";
        } else {
            print ' ';
        }
        c_style = c_style - 1024;
    }
    stack_pointer = stack_pointer + j + 1;
    if (k < 2) {
        ! no code
    } else {
        n = 1[?];
        i = o;
        k = 0;
      .labelXXX;
        if (k < j) {
            if (classes_p->k == 0) {
                classes_p->k = n;
                sizes_p->n = 1[?];
                l = NextEntry(i,depth);
                m = k + 1;
              .labelXXX;
                if (l ~= 0 && m < j) {
                    if (classes_p->m == 0 && i.d_to ~= nothing && l.d_to ~= nothing && ListEqual(i,l) == 1[?]) {
                        sizes_p->n = sizes_p->n + 1;
                        classes_p->m = n;
                    }
                    l = NextEntry(l,depth);
                    ++m;
                    jump labelXXX;
                }
                ++n;
            }
            i = NextEntry(i,depth);
            ++k;
            jump labelXXX;
        }
        --n;
        i = 1[?];
        j = o;
        k = 0;
      .labelXXX;
        if (i <= n) {
          .labelXXX;
            if (classes_p->k ~= i && classes_p->k ~= 0 - i) {
                ++k;
                j = NextEntry(j,depth);
                jump labelXXX;
            }
            m = sizes_p->i;
            if (j.sw_to ~= nothing or lt_value && ZRegion(j.sw_to) == 2 or 3 && j.sw_to == mr) {
                --senc;
            }
            mr = j.sw_to;
            ++i;
            ++senc;
            jump labelXXX;
        }
        --senc;
        i = 1[?];
        j = o;
        k = 0;
        mr = 0;
      .labelXXX;
        if (senc >= 0) {
          .labelXXX;
            if (classes_p->k ~= i && classes_p->k ~= 0 - i) {
                ++k;
                j = NextEntry(j,depth);
                jump labelXXX;
            }
            if (j.sw_to ~= nothing or lt_value) {
                if (j.sw_to == mr) {
                    ++senc;
                    jump labelXXX;
                }
                k2 = NextEntry(j,depth);
                if (k2 == 0 || k2.sw_to ~= j.sw_to) {
                    ! no code
                } else {
                    k2 = ZRegion(j.sw_to);
                    if (k2 == 2[?] or 3[s_obj?]) {
                        q = j;
                        listing_size = 1;
                        l = k;
                        m = i;
                      .labelXXX;
                        if (m < n && q.sw_to == j.sw_to) {
                            ++m;
                          .labelXXX;
                            if (classes_p->l ~= m && classes_p->l ~= 0 - m) {
                                ++l;
                                q = NextEntry(q,depth);
                                jump labelXXX;
                            }
                            if (q.sw_to == j.sw_to) {
                                ++listing_size;
                            }
                            jump labelXXX;
                        }
                        if (listing_size == 1) {
                            ! no code
                        } else {
                            if (c_style & 2 ~= 0) {
                                generic_globvar = 2 * (depth + wlf_indent);
                                if (generic_globvar >= 1) {
                                  .labelXXX;
                                    print ' ';
                                    generic_globvar = generic_globvar - 1;
                                    if (generic_globvar ~= 0) jump labelXXX;
                                }
                            }
                            if (k2 == 3[s_obj?]) {
                                q = 0;
                                l = 0;
                              .labelXXX;
                                if (l < listing_size) {
                                    q = q + sizes_p->(l + i);
                                    ++l;
                                    jump labelXXX;
                                }
                                EnglishNumber(q);
                                print " ", (string) j.sw_to;
                                if (c_style & 8 ~= 0) {
                                    print " (";
                                }
                                if (c_style & 2 ~= 0) {
                                    print ":^";
                                }
                            }
                            q = c_style;
                            if (k2 ~= 3[s_obj?]) {
                                rod_identity = 1;
                                parser_one = j;
                                parser_two = depth + wlf_indent;
                                if (RunRoutines(j,sw_to) == 1[?]) {
                                    jump labelXXX;
                                }
                            }
                            lt_value = j.sw_to;
                            listing_together = j;
                            ++wlf_indent;
                            WriteListR(j,depth,stack_pointer);
                            --wlf_indent;
                            lt_value = 0;
                            listing_together = nothing;
                            if (k2 == 3[s_obj?]) {
                                if (c_style & 8 ~= 0) {
                                    print ")";
                                }
                            } else {
                                rod_identity = 2;
                                parser_one = j;
                                parser_two = depth + wlf_indent;
                                RunRoutines(j,sw_to);
                            }
                          .labelXXX;
                            if (q & 1 ~= 0 && c_style & 1 == 0) {
                                new_line;
                            }
                            c_style = q;
                            mr = j.sw_to;
                            jump labelXXX;
                        }
                    }
                }
            }
            if (WriteBeforeEntry(j,depth) == 1[?]) {
                ! no code
            } else {
                if (sizes_p->i == 1[?]) {
                    if (c_style & 4096 ~= 0) {
                        PrintShortName(j);
                    } else if (c_style & 256 ~= 0) {
                        Defart(j);
                    } else {
                        Indefart(j);
                    }
                } else {
                    if (c_style & 256 ~= 0) {
                        print "the ";
                    }
                    EnglishNumber(sizes_p->i);
                    print " ";
                    PrintOrRun(j,d_to,1);
                }
                WriteAfterEntry(j,depth,stack_pointer);
              .labelXXX;
                if (c_style & 8 ~= 0) {
                    if (senc == 1[?]) {
                        print " and ";
                    }
                    if (senc > 1) {
                        print ", ";
                    }
                }
            }
          .labelXXX;
            ++i;
            --senc;
            jump labelXXX;
        }
        rtrue;
    }
    n = j;
    i = 1[?];
    j = o;
  .labelXXX;
    if (i <= n) {
        if (j.sw_to ~= nothing or lt_value && ZRegion(j.sw_to) == 2 or 3 && j.sw_to == mr) {
            --senc;
        }
        mr = j.sw_to;
        j = NextEntry(j,depth);
        ++i;
        ++senc;
        jump labelXXX;
    }
    i = 1[?];
    j = o;
    mr = 0;
  .labelXXX;
    if (i <= senc) {
        if (j.sw_to ~= nothing or lt_value) {
            if (j.sw_to == mr) {
                --i;
                jump labelXXX;
            }
            k = NextEntry(j,depth);
            if (k == 0 || k.sw_to ~= j.sw_to) {
                ! no code
            } else {
                k = ZRegion(j.sw_to);
                if (k == 2[?] or 3[s_obj?]) {
                    if (c_style & 2 ~= 0) {
                        generic_globvar = 2 * (depth + wlf_indent);
                        if (generic_globvar >= 1) {
                          .labelXXX;
                            print ' ';
                            generic_globvar = generic_globvar - 1;
                            if (generic_globvar ~= 0) jump labelXXX;
                        }
                    }
                    if (k == 3[s_obj?]) {
                        q = j;
                        l = 0;
                      .labelXXX;
                        q = NextEntry(q,depth);
                        ++l;
                        if (q.sw_to == j.sw_to) jump labelXXX;
                        EnglishNumber(l);
                        print " ", (string) j.sw_to;
                        if (c_style & 8 ~= 0) {
                            print " (";
                        }
                        if (c_style & 2 ~= 0) {
                            print ":^";
                        }
                    }
                    q = c_style;
                    if (k ~= 3[s_obj?]) {
                        rod_identity = 1;
                        parser_one = j;
                        parser_two = depth + wlf_indent;
                        if (RunRoutines(j,sw_to) == 1[?]) {
                            jump labelXXX;
                        }
                    }
                    lt_value = j.sw_to;
                    listing_together = j;
                    ++wlf_indent;
                    WriteListR(j,depth,stack_pointer);
                    --wlf_indent;
                    lt_value = 0;
                    listing_together = nothing;
                    if (k == 3[s_obj?]) {
                        if (q & 8 ~= 0) {
                            print ")";
                        }
                    } else {
                        rod_identity = 2;
                        parser_one = j;
                        parser_two = depth + wlf_indent;
                        RunRoutines(j,sw_to);
                    }
                  .labelXXX;
                    if (q & 1 ~= 0 && c_style & 1 == 0) {
                        new_line;
                    }
                    c_style = q;
                    mr = j.sw_to;
                    jump labelXXX;
                }
            }
        }
        if (WriteBeforeEntry(j,depth) == 1[?]) {
            ! no code
        } else {
            if (c_style & 4096 ~= 0) {
                PrintShortName(j);
            } else if (c_style & 256 ~= 0) {
                Defart(j);
            } else {
                Indefart(j);
            }
            WriteAfterEntry(j,depth,stack_pointer);
          .labelXXX;
            if (c_style & 8 ~= 0) {
                if (i == senc - 1) {
                    print " and ";
                }
                if (i < senc - 1) {
                    print ", ";
                }
            }
        }
      .labelXXX;
        j = NextEntry(j,depth);
        ++i;
        jump labelXXX;
    }
    rtrue;
];

[ WriteBeforeEntry o depth flag ;       
    if (c_style & 2 ~= 0) {
        generic_globvar = 2 * (depth + wlf_indent);
        if (generic_globvar >= 1) {
          .labelXXX;
            print ' ';
            generic_globvar = generic_globvar - 1;
            if (generic_globvar ~= 0) jump labelXXX;
        }
    }
    if (c_style & 4 ~= 0 && o.u_to ~= nothing) {
        rod_identity = 1;
        flag = PrintOrRun(o,u_to,1);
        if (flag == 1 && c_style & 1 ~= 0) {
            new_line;
        }
    }
    return flag;
];

[ WriteAfterEntry o depth stack_p flag flag2 flag3 p comb ;     
    if (c_style & 128 ~= 0) {
        comb = 0;
        if (o has light && location hasnt light) {
            comb = comb + 1;
        }
        if (o has container && o hasnt open) {
            comb = comb + 2;
        }
        if (o has container && (o has open || o has transparent) && child(o) == nothing) {
            comb = comb + 4;
        }
        if (comb == 1) {
            print " (providing light)";
        }
        if (comb == 2) {
            print " (which is closed)";
        }
        if (comb == 3) {
            print " (closed and providing light)";
        }
        if (comb == 4) {
            print " (which is empty)";
        }
        if (comb == 5) {
            print " (empty and providing light)";
        }
        if (comb == 6) {
            print " (which is closed and empty)";
        }
        if (comb == 7) {
            print " (closed, empty and providing light)";
        }
    }
    if (c_style & 4 ~= 0) {
        if (o.u_to ~= nothing) {
            rod_identity = 2;
            if (RunRoutines(o,u_to) ~= 0) {
                if (c_style & 1 ~= 0) {
                    new_line;
                }
                rtrue;
            }
        }
        if (o has light && o has worn) {
            print " (providing light and being worn";
            flag2 = 1;
        } else {
            if (o has light) {
                print " (providing light";
                flag2 = 1;
            }
            if (o has worn) {
                print " (being worn";
                flag2 = 1;
            }
        }
        if (o has container) {
            if (o has openable) {
                if (flag2 == 1) {
                    print " and ";
                } else {
                    print " (which is ";
                }
                if (o has open) {
                    print "open";
                    if (child(o) == nothing) {
                        print " but empty";
                    }
                } else {
                    print "closed";
                }
                if (o has lockable && o has locked) {
                    print " and locked";
                }
                flag2 = 1;
            } else if (child(o) == nothing) {
                if (flag2 == 1) {
                    print " and empty";
                } else {
                    print " (which is empty)";
                }
            }
        }
        if (flag2 == 1) {
            print ")";
        }
    }
    if (c_style & 2048 == 0) {
        if (child(o) ~= nothing) {
            generic_globvar = 0;
            if (child(o) ~= nothing) {
              .labelXXX;
                ++generic_globvar;
                @get_sibling SP -> SP ?labelXXX;
            }
            @add SP generic_globvar -> SP;
            @store 6 SP;
        }
    } else {
        p = child(o);
      .labelXXX;
        if (p ~= 0) {
            if (p hasnt concealed) {
                ++flag3;
            }
            p = sibling(p);
            jump labelXXX;
        }
    }
    if (c_style & 32 ~= 0 && flag3 > 0) {
        if (c_style & 8 ~= 0) {
            print " containing ";
        }
        flag = 1;
    }
    if (c_style & 16 ~= 0 && flag3 > 0) {
        if (o has supporter) {
            if (c_style & 8 ~= 0) {
                if (c_style & 64 ~= 0) {
                    print " (on ";
                } else {
                    print ", on top of ";
                }
                if (o has animate) {
                    print "whom ";
                } else {
                    print "which ";
                }
            }
            flag = 1;
        }
        if (o has container && (o has open || o has transparent)) {
            if (c_style & 8 ~= 0) {
                if (c_style & 64 ~= 0) {
                    print " (in ";
                } else {
                    print ", inside ";
                }
                if (o has animate) {
                    print "whom ";
                } else {
                    print "which ";
                }
            }
            flag = 1;
        }
    }
    if (flag == 1 && c_style & 8 ~= 0) {
        if (flag3 > 1) {
            print "are ";
        } else {
            print "is ";
        }
    }
    if (c_style & 1 ~= 0) {
        new_line;
    }
    if (flag == 1) {
        WriteListR(child(o),depth + 1,stack_p);
    }
    if (flag == 1 && c_style & 64 ~= 0) {
        print ")";
    }
    rtrue;
];

[ MoveFloatingObjects i k l m address ; 
    i = 15 + 1;
  .labelXXX;
    if (i <= top_object) {
        address = i.&found_in;
        if (address ~= 0 && i hasnt absent) {
            if (ZRegion(address-->0) == 2) {
                if ((address-->0)() ~= 0) {
                    move i to location;
                }
            } else {
                generic_globvar = i.&found_in;
                if (generic_globvar) {
                    generic_globvar = get_prop_len(generic_globvar);
                }
                k = generic_globvar;
                l = 0;
              .labelXXX;
                if (l < k / 2) {
                    m = address-->l;
                    if (m == location || m in location) {
                        move i to location;
                    }
                    ++l;
                    jump labelXXX;
                }
            }
        }
        ++i;
        jump labelXXX;
    }
    rtrue;
];

[ PlayerTo newplace flag ;      
    move player to newplace;
  .labelXXX;
    if (parent(newplace) ~= nothing) {
        newplace = parent(newplace);
        jump labelXXX;
    }
    location = newplace;
    real_location = location;
    AdjustLight(1);
    if (flag == 0) {
        R_Process(##Look);
    }
    if (flag == 1) {
        NoteArrival();
        ScoreArrival();
    }
    if (flag == 2) {
        LookSub(true);
    }
    rtrue;
];

[ MovePlayer direc ;    
    R_Process(##Go,direc);
    R_Process(##Look);
    rtrue;
];

[ YesOrNo i ;   
  .labelXXX;
    if (1[?] == 1[?]) {
        buffer->1 = 0;
        DrawStatusLine();
        @aread buffer parse -> generic_globvar;
        i = parse-->1;
        if (i == 'yes' or 'y//') {
            rtrue;
        }
        if (i == 'no' or 'n//') {
            rfalse;
        }
        L__M(##Quit,1);
        print "> ";
        jump labelXXX;
    }
    rtrue;
];

[ QuitSub ;     
    L__M(##Quit,2);
    if (YesOrNo() ~= 0) {
        @quit;
    }
    rtrue;
];

[ RestartSub ;  
    L__M(##Restart,1);
    if (YesOrNo() ~= 0) {
        @restart;
        L__M(##Restart,2);
    }
    rtrue;
];

[ VerifySub ;   
    @verify ?labelXXX;
    jump labelXXX;
  .labelXXX;
    return L__M(##Verify,1);
  .labelXXX;
    L__M(##Verify,2);
    rtrue;
];

[ ScriptOnSub ; 
    if (transcript_mode == true) {
        return L__M(##ScriptOn,1);
    }
    transcript_mode = true;
    0-->8 = 0-->8 | 1;
    L__M(##ScriptOn,2);
    VersionSub();
    rtrue;
];

[ ScriptOffSub ;        
    if (transcript_mode == false) {
        return L__M(##ScriptOff,1);
    }
    L__M(##ScriptOff,2);
    transcript_mode = false;
    0-->8 = 0-->8 & 65534;
    rtrue;
];

[ NotifyOnSub ; 
    notify_mode = true;
    L__M(##NotifyOn);
    rtrue;
];

[ NotifyOffSub ;        
    notify_mode = false;
    L__M(##NotifyOff);
    rtrue;
];

[ PlacesSub i j k ;     
    L__M(##Places);
    i = selfobj;
  .labelXXX;
    if (i <= top_object) {
        if (i has visited) {
            ++j;
        }
        ++i;
        jump labelXXX;
    }
    i = selfobj;
  .labelXXX;
    if (i <= top_object) {
        if (i has visited) {
            PrintShortName(i);
            ++k;
            if (k == j) {
                ".";
            }
            if (k == j - 1) {
                print " and ";
            } else {
                print ", ";
            }
        }
        ++i;
        jump labelXXX;
    }
    rtrue;
];

[ ObjectsSub i j k ;    
    L__M(##Objects,1);
    i = selfobj;
  .labelXXX;
    if (i <= top_object) {
        if (i has moved) {
            k = 1[?];
            Defart(i);
            j = parent(i);
            if (j == player) {
                if (i has worn) {
                    print "   (worn)";
                } else {
                    print "   (held)";
                }
            } else if (j has animate) {
                print "   (given away)";
            } else if (j has visited) {
                print "   (in ";
                PrintShortName(j);
                print ")";
            } else if (j has enterable) {
                print "   (in ";
                Defart(j);
                print ")";
            } else if (j has container) {
                print "   (inside ";
                PrintShortName(j);
                print ")";
            } else if (j has supporter) {
                print "   (on ";
                PrintShortName(j);
                print ")";
            } else {
                print "   (lost)";
            }
            new_line;
        }
        ++i;
        jump labelXXX;
    }
    if (k == 0) {
        L__M(##Objects,2);
    }
    rtrue;
];

[ ScoreSub ;    
    L__M(##Score);
    PrintRank();
    rtrue;
];

[ Achieved num ;        
    if (task_done->num == 0) {
        task_done->num = 1[?];
        score = score + task_scores->num;
    }
    rtrue;
];

[ PANum m n ;   
    print "  ";
    n = m;
    if (n < 0) {
        n = 0 - m;
        n = n * 10;
    }
    if (n < 10) {
        print "   ";
    } else if (n < 100) {
        print "  ";
    } else if (n < 1000) {
        print " ";
    }
    print m, " ";
    rtrue;
];

[ InvWideSub ;  
    inventory_style = 4 + 8 + 16;
    R_Process(##Inv);
    rtrue;
];

[ InvTallSub ;  
    inventory_style = 4 + 2 + 1 + 16;
    R_Process(##Inv);
    rtrue;
];

[ InvSub ;      
    if (child(player) == nothing) {
        return L__M(##Inv,1);
    }
    if (inventory_style == 0) {
        R_Process(##InvTall);
        rtrue;
    }
    L__M(##Inv,2);
    if (inventory_style & 1 ~= 0) {
        print ":^";
    } else {
        print " ";
    }
    WriteListFrom(child(player),inventory_style,1);
    if (inventory_style & 8 ~= 0) {
        print ".^";
    }
    BeforeRoutines();
    rtrue;
];

[ TakeSub ;     
    if (onotheld_mode == 0 || parent(noun) ~= player) {
        if (location == thedark) {
            if (RTakeSub(real_location) ~= 0) {
                rtrue;
            }
        } else if (RTakeSub(location) ~= 0) {
            rtrue;
        }
    }
    if (BeforeRoutines() == true) {
        rtrue;
    }
    notheld_mode = onotheld_mode;
    if (notheld_mode == 1 || keep_silent == true) {
        rtrue;
    }
    L__M(##Take,1);
    rtrue;
];

[ RTakeSub fromobj i j k postonobj ;    
    if (noun == player) {
        return L__M(##Take,2);
    }
    if (noun has animate) {
        return L__M(##Take,3,noun);
    }
    if (parent(player) == noun) {
        return L__M(##Take,4,noun);
    }
    i = parent(noun);
    if (i == player) {
        return L__M(##Take,5);
    }
    if (i has container || i has supporter) {
        postonobj = i;
        k = verb;
        verb = ##LetGo;
        if (RunRoutines(i,before) ~= 0) {
            verb = k;
            rtrue;
        }
        verb = k;
    }
  .labelXXX;
    if (i ~= fromobj or nothing) {
        if (i hasnt container && i hasnt supporter) {
            if (i has animate) {
                return L__M(##Take,6,i);
            }
            if (i has transparent) {
                return L__M(##Take,7,i);
            }
            return L__M(##Take,8);
        }
        if (i has container && i hasnt open) {
            return L__M(##Take,9,i);
        }
        i = parent(i);
        if (i == player) {
            i = fromobj;
        }
        jump labelXXX;
    }
    if (noun has scenery) {
        return L__M(##Take,10);
    }
    if (noun has static) {
        return L__M(##Take,11);
    }
    k = 0;
    j = child(player);
  .labelXXX;
    if (j ~= 0) {
        if (j hasnt worn) {
            ++k;
        }
        j = sibling(j);
        jump labelXXX;
    }
    if (k >= ValueOrRun(player,27[rod_of_returning2?])) {
        if (79[canvas_rucksack?] ~= 0) {
            if (parent(canvas_rucksack) ~= player) {
                return L__M(##Take,12);
            }
            j = 0;
            k = child(player);
          .labelXXX;
            if (k ~= 0) {
                if (k ~= 79[canvas_rucksack?] && k hasnt worn && k hasnt light) {
                    j = k;
                }
                k = sibling(k);
                jump labelXXX;
            }
            if (j ~= 0) {
                L__M(##Take,13,j);
                keep_silent = true;
                R_Process(##Insert,j,canvas_rucksack);
                keep_silent = false;
                if (j notin canvas_rucksack) {
                    rtrue;
                }
            } else {
                return L__M(##Take,12);
            }
        } else {
            return L__M(##Take,12);
        }
    }
    move noun to player;
    if (postonobj ~= 0) {
        k = verb;
        verb = ##LetGo;
        if (RunRoutines(postonobj,after) ~= 0) {
            verb = k;
            rtrue;
        }
        verb = k;
    }
    rfalse;
];

[ DropSub o ;   
    o = parent(noun);
    if (o == location) {
        return L__M(##Drop,1);
    }
    if (o ~= player) {
        return L__M(##Drop,2);
    }
    if (noun has worn) {
        L__M(##Drop,3,noun);
        R_Process(##Disrobe,noun);
        if (noun has worn) {
            rtrue;
        }
    }
    move noun to parent(player);
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    return L__M(##Drop,4);
];

[ RemoveSub o ; 
    o = parent(noun);
    if (o has container && o hasnt open) {
        return L__M(##Remove,1);
    }
    if (o ~= second) {
        return L__M(##Remove,2);
    }
    if (o has animate) {
        return L__M(##Take,6,o);
    }
    if (RTakeSub(second) ~= 0) {
        rtrue;
    }
    verb = ##Take;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    verb = ##Remove;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    return L__M(##Remove,4);
];

[ IndirectlyContains o1 o2 ;    
  .labelXXX;
    if (o2 ~= nothing) {
        if (o1 == o2) {
            rtrue;
        }
        o2 = parent(o2);
        jump labelXXX;
    }
    rfalse;
];

[ PutOnSub ;    
    receive_action = ##PutOn;
    if (second == d_obj) {
        R_Process(##Drop,noun);
        rfalse;
    }
    if (parent(noun) ~= player) {
        return L__M(##PutOn,1,noun);
    }
    if (second > 1) {
        verb = ##Receive;
        if (RunRoutines(second,before) ~= 0) {
            verb = ##PutOn;
            rtrue;
        }
        verb = ##PutOn;
    }
    if (IndirectlyContains(noun,second) == true) {
        return L__M(##PutOn,2);
    }
    if (second hasnt supporter) {
        return L__M(##PutOn,3,second);
    }
    if (parent(second) == player) {
        return L__M(##PutOn,4);
    }
    if (noun has worn) {
        L__M(##PutOn,5);
        R_Process(##Disrobe,noun);
        if (noun has worn) {
            rtrue;
        }
    }
    ValueOrRun(second,27[rod_of_returning2?]);  ! not popped
    generic_globvar = 0;
    if (child(second) ~= nothing) {
      .labelXXX;
        ++generic_globvar;
        @get_sibling SP -> SP ?labelXXX;
    }
    @add SP generic_globvar -> SP;
    @jl SP SP ?labelXXX;
    return L__M(##PutOn,6,second);
  .labelXXX;
    move noun to second;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (second > 1) {
        verb = ##Receive;
        if (RunRoutines(second,after) ~= 0) {
            verb = ##PutOn;
            rtrue;
        }
        verb = ##PutOn;
    }
    if (keep_silent == true) {
        rtrue;
    }
    if (multiflag == 1) {
        return L__M(##PutOn,7);
    }
    L__M(##PutOn,8,noun);
    rtrue;
];

[ InsertSub ;   
    receive_action = ##Insert;
    if (second == d_obj) {
        R_Process(##Drop,noun);
        rtrue;
    }
    if (parent(noun) ~= player) {
        return L__M(##Insert,1);
    }
    if (second > 1) {
        verb = ##Receive;
        if (RunRoutines(second,before) ~= 0) {
            verb = ##Insert;
            rtrue;
        }
        verb = ##Insert;
    }
    if (second hasnt container) {
        return L__M(##Insert,2);
    }
    if (second hasnt open) {
        return L__M(##Insert,3);
    }
    if (IndirectlyContains(noun,second) == true) {
        return L__M(##Insert,5);
    }
    if (noun has worn) {
        L__M(##Insert,6);
        R_Process(##Disrobe,noun);
        if (noun has worn) {
            rtrue;
        }
    }
    ValueOrRun(second,27[rod_of_returning2?]);  ! not popped
    generic_globvar = 0;
    if (child(second) ~= nothing) {
      .labelXXX;
        ++generic_globvar;
        @get_sibling SP -> SP ?labelXXX;
    }
    @add SP generic_globvar -> SP;
    @jl SP SP ?labelXXX;
    return L__M(##Insert,7,second);
  .labelXXX;
    move noun to second;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (second > 1) {
        verb = ##Receive;
        if (RunRoutines(second,after) ~= 0) {
            verb = ##Insert;
            rtrue;
        }
        verb = ##Insert;
    }
    if (keep_silent == true) {
        rtrue;
    }
    if (multiflag == 1) {
        return L__M(##Insert,8);
    }
    L__M(##Insert,9,noun);
    rtrue;
];

[ TransferSub i act_needed k postonobj par ;    
    act_needed = ##Drop;
    if (second has container) {
        act_needed = ##Insert;
    } else if (second has supporter) {
        act_needed = ##PutOn;
    }
    i = parent(noun);
    if (i ~= player) {
      .labelXXX;
        if (i ~= 0) {
            if (i hasnt open) {
                return L__M(##Transfer,1);
            }
            i = parent(i);
            if (i == player) {
                jump labelXXX;
            }
            jump labelXXX;
        }
        return L__M(##Transfer,2);
    }
  .labelXXX;
    if (noun notin player) {
        par = parent(noun);
        if (par has container || par has supporter) {
            postonobj = par;
            k = verb;
            verb = ##LetGo;
            if (RunRoutines(par,before) ~= 0) {
                verb = k;
                rtrue;
            }
            verb = k;
        }
        move noun to player;
        if (postonobj ~= 0) {
            k = verb;
            verb = ##LetGo;
            if (RunRoutines(postonobj,after) ~= 0) {
                verb = k;
                rtrue;
            }
            verb = k;
        }
    }
    if (act_needed == ##Drop) {
        R_Process(##Drop,noun);
        rtrue;
    }
    if (act_needed == ##Insert) {
        R_Process(##Insert,noun,second);
        rtrue;
    }
    if (act_needed == ##PutOn) {
        R_Process(##PutOn,noun,second);
        rtrue;
    }
    rtrue;
];

[ EmptySub ;    
    second = d_obj;
    EmptyTSub();
    rtrue;
];

[ EmptyTSub i j ;       
    if (noun hasnt container) {
        return L__M(##EmptyT,1,noun);
    }
    if (noun hasnt open) {
        return L__M(##EmptyT,2,noun);
    }
    if (second ~= d_obj) {
        if (second hasnt container) {
            return L__M(##EmptyT,1,second);
        }
        if (second hasnt open) {
            return L__M(##EmptyT,2,second);
        }
    }
    i = child(noun);
    if (i == 0) {
        return L__M(##EmptyT,3,noun);
    }
  .labelXXX;
    if (i ~= 0) {
        j = sibling(i);
        PrintShortName(i);
        print ": ";
        R_Process(##Transfer,i,second);
        i = j;
        jump labelXXX;
    }
    rtrue;
];

[ GiveSub ;     
    if (parent(noun) ~= player) {
        return L__M(##Give,1,noun);
    }
    if (second == player) {
        return L__M(##Give,2,noun);
    }
    if (RunLife(second,##Give) ~= 0) {
        rfalse;
    }
    L__M(##Give,3,second);
    rtrue;
];

[ GiveRSub ;    
    R_Process(##Give,second,noun);
    rtrue;
];

[ ShowSub ;     
    if (parent(noun) ~= player) {
        return L__M(##Show,1,noun);
    }
    if (second == player) {
        R_Process(##Read,noun);
        rtrue;
    }
    if (RunLife(second,##Show) ~= 0) {
        rfalse;
    }
    L__M(##Show,2,second);
    rtrue;
];

[ ShowRSub ;    
    R_Process(##Show,second,noun);
    rtrue;
];

[ EnterSub o ;  
    if (noun has door) {
        R_Process(##Go,noun);
        rtrue;
    }
    o = parent(player);
    if (o ~= location) {
        return L__M(##Enter,1,o);
    }
    o = parent(noun);
    if (o == compass) {
        R_Process(##Go,noun);
        rtrue;
    }
    if (noun hasnt enterable) {
        return L__M(##Enter,2);
    }
    if (noun has container && noun hasnt open) {
        return L__M(##Enter,3,noun);
    }
    if (o ~= location) {
        return L__M(##Enter,4);
    }
    move player to noun;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Enter,5,noun);
    Locale(noun);
    rtrue;
];

[ TakeOffSub ;  
    if (parent(player) == noun) {
        R_Process(##Exit);
        rtrue;
    }
    L__M(##TakeOff,1,noun);
    rtrue;
];

[ ExitSub env ; 
    env = parent(player);
    if (env == location || (location == thedark && env == real_location)) {
        if (location.orders ~= nothing || (location == thedark && real_location.orders ~= nothing)) {
            R_Process(##Go,out_obj);
            rtrue;
        }
        return L__M(##Exit,1);
    }
    if (env has container && env hasnt open) {
        return L__M(##Exit,2,env);
    }
    if (location == thedark) {
        move player to real_location;
    } else {
        move player to location;
    }
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Exit,3,env);
    LookSub(true);
    rtrue;
];

[ VagueGoSub ;  
    L__M(##VagueGo);
    rtrue;
];

[ EnterSub ;    
    R_Process(##Go,in_obj);
    rtrue;
];

[ GoSub i j k df movewith thedir ;      
    movewith = 0;
    i = parent(player);
    if (location ~= thedark && i ~= location || (location == thedark && i ~= real_location)) {
        j = location;
        if (location == thedark) {
            location = real_location;
        }
        k = RunRoutines(i,before);
        if (k ~= 3[s_obj?]) {
            location = j;
        }
        if (k == 1[?]) {
            movewith = i;
            i = parent(i);
        } else {
            if (k == 0) {
                L__M(##Go,1,i);
            }
            rtrue;
        }
    }
    thedir = noun.w_to;
    if (ZRegion(thedir) == 2) {
        thedir = RunRoutines(noun,w_to);
    }
    j = i.thedir;
    k = ZRegion(j);
    if (k == 3[s_obj?]) {
        print (string) j;
        new_line;
        rfalse;
    }
    if (k == 2[?]) {
        j = RunRoutines(i,thedir);
        if (j == 1[?]) {
            rtrue;
        }
    }
    if (k == 0 || j == 0) {
        if (i.cant_go ~= nothing) {
            PrintOrRun(i,cant_go);
        }
        rfalse;
    }
    if (j has door) {
        if (j has concealed) {
            return L__M(##Go,2);
        }
        if (j hasnt open) {
            if (noun == u_obj) {
                return L__M(##Go,3,j);
            }
            if (noun == d_obj) {
                return L__M(##Go,4,j);
            }
            return L__M(##Go,5,j);
        }
        if (ZRegion(j.n_to) == 2) {
            j = RunRoutines(j,n_to);
        } else {
            j = j.n_to;
        }
        if (j == 0) {
            return L__M(##Go,6,j);
        }
        if (j == 1[?]) {
            rtrue;
        }
    }
    if (movewith == 0) {
        move player to j;
    } else {
        move movewith to j;
    }
    df = OffersLight(j);
    if (df ~= 0) {
        location = j;
        lightflag = true;
    } else {
        if (location == thedark) {
            DarkToDark();
        }
        real_location = j;
        location = thedark;
        lightflag = false;
    }
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    LookSub(true);
    rtrue;
];

[ SayWhatsOn descon j f ;       
    if (descon == parent(player)) {
        rfalse;
    }
    j = child(descon);
  .labelXXX;
    if (j ~= nothing) {
        if (j hasnt concealed && j hasnt scenery) {
            f = 1;
        }
        j = sibling(j);
        jump labelXXX;
    }
    if (f == 0) {
        rfalse;
    }
    L__M(##Look,4,descon);
    rtrue;
];

[ Locale descin text1 text2 o p k j flag f2 ;   
    o = child(descin);
  .labelXXX;
    if (o ~= nothing) {
        give o ~workflag;
        o = sibling(o);
        jump labelXXX;
    }
    k = 0;
    o = child(descin);
  .labelXXX;
    if (o ~= nothing) {
        if (o hasnt concealed && o ~= parent(player)) {
            if (o hasnt scenery) {
                give o workflag;
                ++k;
                p = initial;
                f2 = 0;
                if (o has door && o hasnt open) {
                    p = s_to;
                    f2 = 1;
                }
                if (o has switchable && o hasnt on) {
                    p = s_to;
                    f2 = 1;
                }
                if (o has container && o hasnt open && o.&s_to ~= 0) {
                    p = s_to;
                    f2 = 1;
                }
                if (o hasnt moved || o.describe ~= NULL || f2 == 1) {
                    if (o.describe ~= NULL && RunRoutines(o,describe) ~= 0) {
                        flag = 1;
                        give o ~workflag;
                        --k;
                    } else {
                        j = o.p;
                        if (j ~= 0) {
                            new_line;
                            PrintOrRun(o,p);
                            flag = 1;
                            give o ~workflag;
                            --k;
                            if (o has supporter && child(o) ~= nothing) {
                                SayWhatsOn(o);
                            }
                        }
                    }
                }
            } else if (o has supporter && child(o) ~= nothing) {
                SayWhatsOn(o);
            }
        }
        o = sibling(o);
        jump labelXXX;
    }
    if (k == 0) {
        return 0;
    }
    if (text1 ~= 0) {
        new_line;
        if (flag == 1) {
            text1 = text2;
        }
        print (string) text1, " ";
        WriteListFrom(child(descin),8 + 512 + 16 + 128 + 64 + 2048);
        return k;
    }
    if (flag == 1) {
        L__M(##Look,5,descin);
    } else {
        L__M(##Look,6,descin);
    }
    rtrue;
];

[ LMode1Sub ;   
    lookmode = 1;
    print "CURSES";
    L__M(##Brief);
    rtrue;
];

[ LMode2Sub ;   
    lookmode = 2;
    print "CURSES";
    L__M(##Verbose);
    rtrue;
];

[ LMode3Sub ;   
    lookmode = 3;
    print "CURSES";
    L__M(##Superbrief);
    rtrue;
];

[ NoteArrival descin ;  
    descin = location;
    if (descin ~= lastdesc) {
        if (descin.initial ~= nothing) {
            PrintOrRun(descin,initial);
        }
        SetHimHer();
        MoveFloatingObjects();
        lastdesc = descin;
    }
    rtrue;
];

[ ScoreArrival ;        
    if (location hasnt visited) {
        give location visited;
        if (location has scored) {
            score = score + 5;
            places_score = places_score + 5;
        }
    }
    rtrue;
];

[ LookSub allow_abbrev env local3 ;     
    if (parent(player) == nothing) {
        "** Error: player has no location **";
    }
    NoteArrival();
    new_line;
    style bold;
    PrintShortName(location);
    style roman;
    env = parent(player);
    if (location ~= thedark && env ~= location) {
        if (env has supporter) {
            print " (";
            L__M(##Look,1);
            print " ";
        } else {
            print " (";
            L__M(##Look,2);
            print " ";
        }
        Defart(env);
        print ")";
        local3 = env;
    }
    if (print_player_flag == true) {
        print " (";
        L__M(##Look,3);
        print " ", (name) player, ")";
    }
    new_line;
    if (lookmode < 3 && (allow_abbrev ~= true || lookmode == 2 || location hasnt visited)) {
        if (location.describe ~= NULL) {
            RunRoutines(location,describe);
        } else if (location.description == nothing) {
            print "** Room undescribed! **^";
        } else {
            PrintOrRun(location,description);
        }
    }
    if (local3 ~= location) {
        Locale(location);
    }
    Locale(local3);
    Stub9();
    ScoreArrival();
    verb = ##Look;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    rtrue;
];


[ ExamineSub i ;        
    if (location == thedark) {
        return L__M(##Read,1);
    }
    i = noun.description;
    if (i == nothing) {
        if (noun has container) {
            R_Process(##Search,noun);
            rtrue;
        }
        if (noun has switchable) {
            L__M(##Read,3,noun);
            rfalse;
        }
        return L__M(##Read,2,noun);
    }
    PrintOrRun(noun,description);
    if (noun has switchable) {
        L__M(##Read,3,noun);
    }
    if (BeforeRoutines() == true) {
        rtrue;
    }
    rtrue;
];

[ LookUnderSub ;        
    if (location == thedark) {
        return L__M(##LookUnder,1);
    }
    L__M(##LookUnder,2);
    rtrue;
];

[ SearchSub i f ;       
    if (location == thedark) {
        return L__M(##Search,1);
    }
    i = child(noun);
  .labelXXX;
    if (i ~= 0) {
        if (i hasnt concealed) {
            f = 1[?];
        }
        i = sibling(i);
        jump labelXXX;
    }
    if (noun has supporter) {
        if (f == 0) {
            return L__M(##Search,2,noun);
        }
        return L__M(##Search,3,noun);
    }
    if (noun hasnt container) {
        return L__M(##Search,4);
    }
    if (noun hasnt transparent && noun hasnt open) {
        return L__M(##Search,5);
    }
    if (BeforeRoutines() == true) {
        rtrue;
    }
    generic_globvar = 0;
    if (child(noun) ~= nothing) {
      .labelXXX;
        ++generic_globvar;
        @get_sibling SP -> SP ?labelXXX;
    }
    @add SP generic_globvar -> SP;
    @store 1 SP;
    if (f == 0) {
        return L__M(##Search,6,noun);
    }
    L__M(##Search,7,noun);
    rtrue;
];

[ UnlockSub ;   
    if (noun hasnt lockable) {
        return L__M(##Unlock,1);
    }
    if (noun hasnt locked) {
        return L__M(##Unlock,2);
    }
    if (noun.e_to ~= second) {
        return L__M(##Unlock,3);
    }
    give noun ~locked;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Unlock,4,noun);
    rtrue;
];

[ LockSub ;     
    if (noun hasnt lockable) {
        return L__M(##Lock,1);
    }
    if (noun has locked) {
        return L__M(##Lock,2);
    }
    if (noun has open) {
        return L__M(##Lock,3);
    }
    if (noun.e_to ~= second) {
        return L__M(##Lock,4);
    }
    give noun locked;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Lock,5,noun);
    rtrue;
];


[ SwitchOnSub ; 
    if (noun hasnt switchable) {
        return L__M(##SwitchOn,1);
    }
    if (noun has on) {
        return L__M(##SwitchOn,2);
    }
    give noun on;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##SwitchOn,3,noun);
    rtrue;
];

[ SwitchOffSub ;        
    if (noun hasnt switchable) {
        return L__M(##SwitchOff,1);
    }
    if (noun hasnt on) {
        return L__M(##SwitchOff,2);
    }
    give noun ~on;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##SwitchOff,3,noun);
    rtrue;
];

[ OpenSub ;     
    if (noun hasnt openable) {
        return L__M(##Open,1);
    }
    if (noun has locked) {
        return L__M(##Open,2);
    }
    if (noun has open) {
        return L__M(##Open,3);
    }
    give noun open;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    if (noun has container && noun hasnt transparent && child(noun) ~= nothing) {
        return L__M(##Open,4,noun);
    }
    L__M(##Open,5,noun);
    rtrue;
];

[ CloseSub ;    
    if (noun hasnt openable) {
        return L__M(##Close,1);
    }
    if (noun hasnt open) {
        return L__M(##Close,2);
    }
    give noun ~open;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Close,3,noun);
    rtrue;
];

[ DisrobeSub ;  
    if (noun hasnt worn) {
        return L__M(##Disrobe,1);
    }
    give noun ~worn;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Disrobe,2,noun);
    rtrue;
];

[ WearSub ;     
    if (noun hasnt clothing) {
        return L__M(##Wear,1);
    }
    if (parent(noun) ~= player) {
        return L__M(##Wear,2);
    }
    if (noun has worn) {
        return L__M(##Wear,3);
    }
    give noun worn;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Wear,4,noun);
    rtrue;
];

[ EatSub ;      
    if (noun hasnt edible) {
        return L__M(##Eat,1);
    }
    remove noun;
    if (BeforeRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Eat,2,noun);
    rtrue;
];


[ YesSub ;      
    L__M(##Yes);
    rtrue;
];

[ NoSub ;       
    L__M(##No);
    rtrue;
];

[ BurnSub ;     
    L__M(##Burn);
    rtrue;
];

[ PraySub ;     
    L__M(##Pray);
    rtrue;
];

[ WakeSub ;     
    L__M(##Wake);
    rtrue;
];

[ WakeOtherSub ;        
    if (RunLife(noun,##WakeOther) ~= 0) {
        rfalse;
    }
    L__M(##WakeOther);
    rtrue;
];

[ ThinkSub ;    
    L__M(##Think);
    rtrue;
];

[ SmellSub ;    
    L__M(##Smell);
    rtrue;
];

[ ListenSub ;   
    L__M(##Listen);
    rtrue;
];

[ TasteSub ;    
    L__M(##Taste);
    rtrue;
];

[ CutSub ;      
    L__M(##Cut);
    rtrue;
];

[ JumpOverSub ; 
    L__M(##JumpOver);
    rtrue;
];


[ RepairSub ;   
    L__M(##Repair);
    rtrue;
];

[ DrinkSub ;    
    L__M(##Drink);
    rtrue;
];

[ SwimSub ;     
    L__M(##Swim);
    rtrue;
];

[ SwingSub ;    
    L__M(##Swing);
    rtrue;
];

[ BlowSub ;     
    L__M(##Blow);
    rtrue;
];

[ RubSub ;      
    L__M(##Rub);
    rtrue;
];

[ SetSub ;      
    L__M(##Set);
    rtrue;
];

[ SetToSub ;    
    L__M(##SetTo);
    rtrue;
];

[ WaveHandsSub ;        
    L__M(##WaveHands);
    rtrue;
];


[ BuySub ;      
    L__M(##Buy);
    rtrue;
];

[ SingSub ;     
    L__M(##Sing);
    rtrue;
];

[ ClimbSub ;    
    L__M(##Climb);
    rtrue;
];

[ SleepSub ;    
    L__M(##Sleep);
    rtrue;
];

[ ConsultSub ;  
    L__M(##Consult,1,noun);
    rtrue;
];

[ TouchSub ;    
    if (noun == player) {
        return L__M(##Touch,3);
    }
    if (noun has animate) {
        return L__M(##Touch,1);
    }
    L__M(##Touch,2);
    rtrue;
];

[ PullSub ;     
    if (noun has static) {
        return L__M(##Pull,1);
    }
    if (noun has scenery) {
        return L__M(##Pull,2);
    }
    if (noun has animate) {
        return L__M(##Pull,4);
    }
    L__M(##Pull,3);
    rtrue;
];

[ PushSub ;     
    if (noun has static) {
        return L__M(##Push,1);
    }
    if (noun has scenery) {
        return L__M(##Push,2);
    }
    if (noun has animate) {
        return L__M(##Pull,4);
    }
    L__M(##Push,3);
    rtrue;
];

[ TurnSub ;     
    if (noun has static) {
        return L__M(##Turn,1);
    }
    if (noun has scenery) {
        return L__M(##Turn,2);
    }
    if (noun has animate) {
        return L__M(##Pull,4);
    }
    L__M(##Turn,3);
    rtrue;
];

[ WaitSub ;     
    if (BeforeRoutines() == true) {
        rtrue;
    }
    L__M(##Wait);
    rtrue;
];

[ PushDirSub ;  
    L__M(##PushDir,1);
    rtrue;
];

[ AllowPushDir i ;      
    if (parent(second) ~= compass) {
        return L__M(##PushDir,2);
    }
    if (second == u_obj or d_obj) {
        return L__M(##PushDir,3);
    }
    BeforeRoutines();
    i = noun;
    move i to player;
    R_Process(##Go,second);
    if (location == thedark) {
        move i to real_location;
    } else {
        move i to location;
    }
    rtrue;
];

[ SqueezeSub ;  
    if (noun has animate) {
        return L__M(##Squeeze,1);
    }
    L__M(##Squeeze,2);
    rtrue;
];

[ ThrowAtSub ;  
    if (second > 1) {
        verb = ##ThrownAt;
        if (RunRoutines(second,before) ~= 0) {
            verb = ##ThrowAt;
            rtrue;
        }
        verb = ##ThrowAt;
    }
    if (second hasnt animate) {
        return L__M(##ThrowAt,1);
    }
    if (RunLife(second,##ThrowAt) ~= 0) {
        rfalse;
    }
    L__M(##ThrowAt,2);
    rtrue;
];

[ AttackSub ;   
    if (noun has animate && RunLife(noun,##Attack) ~= 0) {
        rfalse;
    }
    L__M(##Attack);
    rtrue;
];

[ KissSub ;     
    if (RunLife(noun,##Kiss) ~= 0) {
        rfalse;
    }
    if (noun == player) {
        return L__M(##Touch,3);
    }
    L__M(##Kiss);
    rtrue;
];

[ AnswerSub ;   
    if (RunLife(second,##Answer) ~= 0) {
        rfalse;
    }
    L__M(##Answer);
    rtrue;
];

[ TellSub ;     
    if (noun == player) {
        return L__M(##Tell);
    }
    if (RunLife(noun,##Tell) ~= 0) {
        rfalse;
    }
    L__M(##Tell,2);
    rtrue;
];

[ AskSub ;      
    if (RunLife(noun,##Ask) ~= 0) {
        rfalse;
    }
    L__M(##Ask);
    rtrue;
];

[ AskForSub ;   
    if (noun == player) {
        R_Process(##Inv);
        rtrue;
    }
    L__M(##Order,1,noun);
    rtrue;
];

[ L__M act n x1 s ;     
    s = action;
    action = act;
    if (n == 0) {
        n = 1;
    }
    L___M(n,x1);
    action = s;
    rtrue;
];

[ L___M n x1 s ;        
    s = verb;
    lm_n = n;
    lm_o = x1;
    verb = action;
    if (RunRoutines(LibraryMessages,before) ~= 0) {
        verb = s;
        rfalse;
    }
    verb = s;
    if (action == ##Prompt) {
        print "^>";
        rtrue;
    }
    if (action == ##Miscellany) {
        if (n == 1) {
            "(considering the first sixteen objects only)^";
        }
        if (n == 2) {
            "Nothing to do!";
        }
        if (n == 3) {
            print " You have died ";
            rtrue;
        }
        if (n == 4) {
            print " You have won ";
            rtrue;
        }
        if (n == 5) {
            print "^Would you like to RESTART, RESTORE a saved game";
            if (0 == 0) {
                print ", give the FULL score for that game";
            }
            if (deadflag == WON && 0 == 0) {
                print ", see some suggestions for AMUSING things to do";
            }
            " or QUIT?";
        }
        if (n == 6) {
            "[Your interpreter does not provide ~undo~. Sorry!]";
        }
        if (n == 7) {
            "~Undo~ failed. [Not all interpreters provide it.]";
        }
        if (n == 8) {
            "Please give one of the answers above.";
        }
        if (n == 9) {
            "^It is now pitch dark in here!";
        }
        if (n == 10) {
            "I beg your pardon?";
        }
        if (n == 11) {
            "[You can't ~undo~ what hasn't been done!]";
        }
        if (n == 12) {
            "[Can't ~undo~ twice in succession. Sorry!]";
        }
        if (n == 13) {
            "[Previous turn undone.]";
        }
        if (n == 14) {
            "Sorry, that can't be corrected.";
        }
        if (n == 15) {
            "Think nothing of it.";
        }
        if (n == 16) {
            "~Oops~ can only correct a single word.";
        }
        rfalse;
    }
    if (action == ##Order) {
        CDefart(x1);
        " has better things to do.";
    }
    if (action == ##Quit) {
        if (n == 1) {
            print "Please answer yes or no.";
            rtrue;
        }
        print "Are you sure you want to quit? ";
        rtrue;
    }
    if (action == ##Restart) {
        if (n == 1) {
            print "Are you sure you want to restart? ";
            rtrue;
        }
        "Failed.";
    }
    if (action == ##Restore) {
        if (n == 1) {
            "Restore failed.";
        }
        "Ok.";
    }
    if (action == ##Save) {
        if (n == 1) {
            "Save failed.";
        }
        "Ok.";
    }
    if (action == ##Verify) {
        if (n == 1) {
            "The game file has verified as intact.";
        }
        "The game file did not verify properly, and may be corrupted (or you may be running it on a very primitive interpreter which is unable properly to perform the test).";
    }
    if (action == ##ScriptOn) {
        if (n == 1) {
            "Transcripting is already on.";
        }
        "Start of a transcript of";
    }
    if (action == ##ScriptOff) {
        if (n == 1) {
            "Transcripting is already off.";
        }
        "^End of transcript.";
    }
    if (action == ##NotifyOn) {
        "Score notification on.";
    }
    if (action == ##NotifyOff) {
        "Score notification off.";
    }
    if (action == ##Places) {
        print "You have visited: ";
        rtrue;
    }
    if (action == ##Objects) {
        if (n == 1) {
            "Objects you have handled:^";
        }
        "None.";
    }
    if (action == ##Score) {
        if (deadflag == 0) {
            print "You have so far scored ";
        } else {
            print "In that game you scored ";
        }
        print score, " out of a possible ", 550, ", in ", turns, " turn";
        if (turns > 1) {
            print "s";
        }
        rtrue;
    }
    if (action == ##FullScore) {
        if (n == 1) {
            if (deadflag == 0) {
                print "The score is ";
            } else {
                print "The score was ";
            }
            "made up as follows:^";
        }
        if (n == 2) {
            "finding sundry items";
        }
        if (n == 3) {
            "visiting various places";
        }
        "total (out of ", 550, ")";
    }
    if (action == ##Inv) {
        if (n == 1) {
            "You are carrying nothing.";
        }
        print "You are carrying";
        rtrue;
    }
    if (action == ##Take) {
        if (n == 1) {
            "Taken.";
        }
        if (n == 2) {
            "You are always self-possessed.";
        }
        if (n == 3) {
            print "I don't suppose ";
            Defart(x1);
            " would care for that.";
        }
        if (n == 4) {
            print "You'd have to get ";
            if (x1 has supporter) {
                print "off ";
            } else {
                print "out of ";
            }
            Defart(x1);
            " first.";
        }
        if (n == 5) {
            "You already have that.";
        }
        if (n == 6) {
            print "That seems to belong to ";
            Defart(x1);
            ".";
        }
        if (n == 7) {
            print "That seems to be a part of ";
            Defart(x1);
            ".";
        }
        if (n == 8) {
            "That isn't available.";
        }
        if (n == 9) {
            CDefart(x1);
            " is not open.";
        }
        if (n == 10) {
            "That's hardly portable.";
        }
        if (n == 11) {
            "That's fixed in place.";
        }
        if (n == 12) {
            "You're carrying too many things already.";
        }
        print "(putting ";
        Defart(x1);
        print " into ";
        Defart(canvas_rucksack);
        " to make room)";
    }
    if (action == ##Drop) {
        if (n == 1) {
            "Already on the floor.";
        }
        if (n == 2) {
            "You haven't got that.";
        }
        if (n == 3) {
            print "(first taking ";
            Defart(x1);
            " off)";
        }
        "Dropped.";
    }
    if (action == ##Remove) {
        if (n == 1) {
            "It is unfortunately closed.";
        }
        if (n == 2) {
            "But it isn't there now.";
        }
        "Removed.";
    }
    if (action == ##PutOn) {
        if (n == 1) {
            print "You need to be holding ";
            Defart(x1);
            " before you can put it on top of something else.";
        }
        if (n == 2) {
            "You can't put something on top of itself.";
        }
        if (n == 3) {
            print "Putting things on ";
            Defart(x1);
            " would achieve nothing.";
        }
        if (n == 4) {
            "You lack the dexterity.";
        }
        if (n == 5) {
            "(first taking it off)^";
        }
        if (n == 6) {
            print "There is no more room on ";
            Defart(x1);
            ".";
        }
        if (n == 7) {
            "Done.";
        }
        print "You put ";
        Defart(x1);
        print " on ";
        Defart(second);
        ".";
    }
    if (action == ##Insert) {
        if (n == 1) {
            "You need to be holding it before you can put it into something else.";
        }
        if (n == 2) {
            "That can't contain things.";
        }
        if (n == 3) {
            "Alas, it is closed.";
        }
        if (n == 4) {
            "You'll need to take it off first.";
        }
        if (n == 5) {
            "You can't put something inside itself.";
        }
        if (n == 6) {
            "(first taking it off)^";
        }
        if (n == 7) {
            print "There is no more room in ";
            Defart(x1);
            ".";
        }
        if (n == 8) {
            "Done.";
        }
        print "You put ";
        Defart(x1);
        print " into ";
        Defart(second);
        ".";
    }
    if (action == ##Transfer) {
        if (n == 1) {
            "That isn't in your possession.";
        }
        "First pick that up.";
    }
    if (action == ##EmptyT) {
        if (n == 1) {
            CDefart(x1);
            " can't contain things.";
        }
        if (n == 2) {
            CDefart(x1);
            " is closed.";
        }
        CDefart(x1);
        " is empty already.";
    }
    if (action == ##Give) {
        if (n == 1) {
            print "You aren't holding ";
            Defart(x1);
            ".";
        }
        if (n == 2) {
            print "You juggle ";
            Defart(x1);
            " for a while, but don't achieve much.";
        }
        CDefart(x1);
        " doesn't seem interested.";
    }
    if (action == ##Show) {
        if (n == 1) {
            print "You aren't holding ";
            Defart(x1);
            ".";
        }
        CDefart(x1);
        " is unimpressed.";
    }
    if (action == ##Enter) {
        if (n == 1) {
            print "But you're already ";
            if (x1 has supporter) {
                print "on ";
            } else {
                print "in ";
            }
            Defart(x1);
            ".";
        }
        if (n == 2) {
            "That's not something you can enter.";
        }
        if (n == 3) {
            print "You can't get into the closed ";
            PrintShortName(x1);
            ".";
        }
        if (n == 4) {
            "You can only get into something on the floor.";
        }
        print "You get ";
        if (x1 has supporter) {
            print "onto ";
        } else {
            print "into ";
        }
        Defart(x1);
        ".";
    }
    if (action == ##TakeOff) {
        print "But you aren't on ";
        Defart(x1);
        " at the moment.";
    }
    if (action == ##Exit) {
        if (n == 1) {
            "But you aren't in anything at the moment.";
        }
        if (n == 2) {
            print "You can't get out of the closed ";
            PrintShortName(x1);
            ".";
        }
        print "You get ";
        if (x1 has supporter) {
            print "off ";
        } else {
            print "out of ";
        }
        Defart(x1);
        ".";
    }
    if (action == ##VagueGo) {
        "You'll have to say which compass direction to go in.";
    }
    if (action == ##Go) {
        if (n == 1) {
            print "You'll have to get ";
            if (x1 has supporter) {
                print "off ";
            } else {
                print "out of ";
            }
            Defart(x1);
            " first.";
        }
        if (n == 2) {
            "You can't go that way.";
        }
        if (n == 3) {
            print "You are unable to climb ";
            Defart(x1);
            ".";
        }
        if (n == 4) {
            print "You are unable to descend ";
            Defart(x1);
            ".";
        }
        if (n == 5) {
            print "You can't, since ";
            Defart(x1);
            " is in the way.";
        }
        print "You can't, since ";
        Defart(x1);
        " leads nowhere.";
    }
    if (action == ##Brief) {
        " is now in its normal ~brief~ printing mode, which gives long descriptions of places never before visited and short descriptions otherwise.";
    }
    if (action == ##Verbose) {
        " is now in its ~verbose~ mode, which always gives long descriptions of locations (even if you've been there before).";
    }
    if (action == ##Superbrief) {
        " is now in its ~superbrief~ mode, which always gives short descriptions of locations (even if you haven't been there before).";
    }
    if (action == ##Look) {
        if (n == 1) {
            print "on";
            rfalse;
        }
        if (n == 2) {
            print "in";
            rfalse;
        }
        if (n == 3) {
            print "as";
            rfalse;
        }
        if (n == 4) {
            print "^On ";
            Defart(x1);
            WriteListFrom(child(x1),8 + 16 + 128 + 64 + 1024 + 2048);
            ".";
        }
        if (x1 ~= location) {
            if (x1 has supporter) {
                print "^On ";
            } else {
                print "^In ";
            }
            Defart(x1);
            print " you";
        } else {
            print "^You";
        }
        print " can ";
        if (n == 5) {
            print "also ";
        }
        print "see ";
        WriteListFrom(child(x1),8 + 512 + 16 + 128 + 64 + 2048);
        if (x1 ~= location) {
            ".";
        }
        " here.";
    }
    if (action == ##Read) {
        if (n == 1) {
            "Darkness, noun. An absence of light to see by.";
        }
        if (n == 2) {
            print "You see nothing special about ";
            Defart(x1);
            ".";
        }
        CDefart(x1);
        print " is currently switched ";
        if (x1 has on) {
            "on.";
        } else {
            "off.";
        }
        rfalse;
    }
    if (action == ##LookUnder) {
        if (n == 1) {
            "But it's dark.";
        }
        "You find nothing of interest.";
    }
    if (action == ##Search) {
        if (n == 1) {
            "But it's dark.";
        }
        if (n == 2) {
            print "There is nothing on ";
            Defart(x1);
            ".";
        }
        if (n == 3) {
            print "On ";
            Defart(x1);
            WriteListFrom(child(x1),64 + 8 + 1024 + 2048);
            ".";
        }
        if (n == 4) {
            "You find nothing of interest.";
        }
        if (n == 5) {
            "You can't see inside, since it is closed.";
        }
        if (n == 6) {
            CDefart(x1);
            " is empty.";
        }
        print "In ";
        Defart(x1);
        WriteListFrom(child(x1),64 + 8 + 1024 + 2048);
        ".";
    }
    if (action == ##Unlock) {
        if (n == 1) {
            "That doesn't seem to be something you can unlock.";
        }
        if (n == 2) {
            "It's unlocked at the moment.";
        }
        if (n == 3) {
            "That doesn't seem to fit the lock.";
        }
        print "You unlock ";
        Defart(x1);
        ".";
    }
    if (action == ##Lock) {
        if (n == 1) {
            "That doesn't seem to be something you can lock.";
        }
        if (n == 2) {
            "It's locked at the moment.";
        }
        if (n == 3) {
            "First you'll have to close it.";
        }
        if (n == 4) {
            "That doesn't seem to fit the lock.";
        }
        print "You lock ";
        Defart(x1);
        ".";
    }
    if (action == ##SwitchOn) {
        if (n == 1) {
            "That's not something you can switch.";
        }
        if (n == 2) {
            "That's already on.";
        }
        print "You switch ";
        Defart(x1);
        " on.";
    }
    if (action == ##SwitchOff) {
        if (n == 1) {
            "That's not something you can switch.";
        }
        if (n == 2) {
            "That's already off.";
        }
        print "You switch ";
        Defart(x1);
        " off.";
    }
    if (action == ##Open) {
        if (n == 1) {
            "That's not something you can open.";
        }
        if (n == 2) {
            "It seems to be locked.";
        }
        if (n == 3) {
            "It's already open.";
        }
        if (n == 4) {
            print "You open ";
            Defart(x1);
            print ", revealing ";
            if (WriteListFrom(child(x1),8 + 64 + 2048) == 0) {
                "nothing.";
            }
            ".";
        }
        print "You open ";
        Defart(x1);
        ".";
    }
    if (action == ##Close) {
        if (n == 1) {
            "That's not something you can close.";
        }
        if (n == 2) {
            "It's already closed.";
        }
        print "You close ";
        Defart(x1);
        ".";
    }
    if (action == ##Disrobe) {
        if (n == 1) {
            "You're not wearing that.";
        }
        print "You take off ";
        Defart(x1);
        ".";
    }
    if (action == ##Wear) {
        if (n == 1) {
            "You can't wear that!";
        }
        if (n == 2) {
            "You're not holding that!";
        }
        if (n == 3) {
            "You're already wearing that!";
        }
        print "You put on ";
        Defart(x1);
        ".";
    }
    if (action == ##Eat) {
        if (n == 1) {
            "That's plainly inedible.";
        }
        print "You eat ";
        Defart(x1);
        ". Not bad.";
    }
    if (action == ##Yes or ##No) {
        "That was a rhetorical question.";
    }
    if (action == ##Burn) {
        "This dangerous act would achieve little.";
    }
    if (action == ##Pray) {
        "Nothing practical results from your prayer.";
    }
    if (action == ##Wake) {
        "The dreadful truth is, this is not a dream.";
    }
    if (action == ##WakeOther) {
        "That seems unnecessary.";
    }
    if (action == ##Kiss) {
        "Keep your mind on the game.";
    }
    if (action == ##Think) {
        "What a good idea.";
    }
    if (action == ##Smell) {
        "You smell nothing unexpected.";
    }
    if (action == ##Listen) {
        "You hear nothing unexpected.";
    }
    if (action == ##Taste) {
        "You taste nothing unexpected.";
    }
    if (action == ##Touch) {
        if (n == 1) {
            "Keep your hands to yourself!";
        }
        if (n == 3) {
            "If you think that'll help.";
        }
        "You feel nothing unexpected.";
    }
    if (action == ##Dig) {
        "Digging would achieve nothing here.";
    }
    if (action == ##Cut) {
        "Cutting that up would achieve little.";
    }
    if (action == ##Jump) {
        "You jump on the spot, fruitlessly.";
    }
    if (action == ##JumpOver or ##Repair) {
        "You would achieve nothing by this.";
    }
    if (action == ##Drink) {
        "There's nothing suitable to drink here.";
    }
    if (action == ##Fill) {
        "But there's no water here to carry.";
    }
    if (action == ##Sorry) {
        "Oh, don't apologise.";
    }
    if (action == ##Strong) {
        "Real adventurers do not use such language.";
    }
    if (action == ##Mild) {
        "Quite.";
    }
    if (action == ##Attack) {
        "Violence isn't the answer to this one.";
    }
    if (action == ##Swim) {
        "There's not enough water to swim in.";
    }
    if (action == ##Swing) {
        "There's nothing sensible to swing here.";
    }
    if (action == ##Blow) {
        "You can't usefully blow that.";
    }
    if (action == ##Rub) {
        "You achieve nothing by this.";
    }
    if (action == ##Set) {
        "No, you can't set that.";
    }
    if (action == ##SetTo) {
        "No, you can't set that to anything.";
    }
    if (action == ##WaveHands) {
        "You wave, feeling foolish.";
    }
    if (action == ##Wave) {
        if (n == 1) {
            "But you aren't holding that.";
        }
        print "You look ridiculous waving ";
        Defart(x1);
        ".";
    }
    if (action == ##Pull or ##Push or ##Turn) {
        if (n == 1) {
            "It is fixed in place.";
        }
        if (n == 2) {
            "You are unable to.";
        }
        if (n == 4) {
            "That would be less than courteous.";
        }
        "Nothing obvious happens.";
    }
    if (action == ##PushDir) {
        if (n == 1) {
            "Is that the best you can think of?";
        }
        if (n == 2) {
            "That's not a direction.";
        }
        "Not that way you can't.";
    }
    if (action == ##Squeeze) {
        if (n == 1) {
            "Keep your hands to yourself.";
        }
        "You achieve nothing by this.";
    }
    if (action == ##ThrowAt) {
        if (n == 1) {
            "Futile.";
        }
        "You lack the nerve when it comes to the crucial moment.";
    }
    if (action == ##Tell) {
        if (n == 1) {
            "You talk to yourself a while.";
        }
        "This provokes no reaction.";
    }
    if (action == ##Answer or ##Ask) {
        "There is no reply.";
    }
    if (action == ##Buy) {
        "Nothing is on sale.";
    }
    if (action == ##Sing) {
        "Your singing is abominable.";
    }
    if (action == ##Climb) {
        "I don't think much is to be achieved by that.";
    }
    if (action == ##Wait) {
        "Time passes.";
    }
    if (action == ##Sleep) {
        "You aren't feeling especially drowsy.";
    }
    if (action == ##Consult) {
        print "You discover nothing of interest in ";
        Defart(x1);
        ".";
    }
    rtrue;
];

[ Initialise; ; 
    StartSplash();
    location = Attic;
    move crumpled_piece_of_paper to player;
    move electric_torch to player;
    move chocolate_biscuit to player;
    StartDaemon(electric_torch);
    InsertCardIntoDeck(Drowned_Sailor_card);
    InsertCardIntoDeck(Fool_card);
    InsertCardIntoDeck(Death_card);
    StrongboxX = random(18) - 9;
    StrongboxY = random(18) - 9;
    "^^^^It's become a matter of pride now not to give up. That tourist map of Paris must be up here somewhere in all this clutter, even if it has been five years since your last trip. And it's your own fault. It looks as if your great-grandfather was the last person to tidy up these lofts...^";
];

[ GamePreRoutine ;      
    if (verb == ##Go && carbolic_soap hasnt concealed) {
        trigger_quotation(13);
        "You're going nowhere until you make amends for that nasty bad language.";
    }
    if (gas_mask has worn) {
        if (verb == ##Smell) {
            "With the gas mask on all you can smell is old cork and rubber.";
        }
        if (verb == ##Eat) {
            "Not with a gas mask on!";
        }
        if (verb == ##Order or ##Answer or ##Ask) {
            "Your speech is muffled into silence by the gas mask.";
        }
    }
    rfalse;
];

[ DeathMessage ;        
    if (deadflag == FAILED) {
        print "You have missed the point entirely";
    }
    if (deadflag == DESTROYED_UNIVERSE) {
        print "You have disembodied the entire universe";
    }
    if (deadflag == AUSTRALIA) {
        print "You have been transported to Australia";
    }
    if (deadflag == PARADOX) {
        print "You have been annihilated by a temporal paradox";
    }
    if (deadflag == MYTH) {
        print "You have become a constellation";
    }
    if (deadflag == PRISON) {
        print "You have been imprisoned as a terrorist";
    }
    if (deadflag == CHECKMATED) {
        print "You have been checkmated";
    }
    if (deadflag == SPOOKED) {
        print "You have been spooked";
    }
    rtrue;
];

[ PrintRank s ndx ;     
    print ", giving you the rank of ";
    s = score;
    if (s ~= 65437 && task_done->11 ~= 0) {
        s = s - 50;
    }
    ndx = 1;
  .labelXXX;
    if (ndx <= rank_levels-->0 * 2) {
        if (s >= rank_levels-->ndx) {
            print (string) rank_levels-->(ndx + 1);
            new_line;
            rtrue;
        }
        ndx = ndx + 2;
        jump labelXXX;
    }
    rtrue;
];

[ PrintTaskName n ;     
    if (n == SCORE_HAMBURG) {
        "reading postcard";
    }
    if (n == SCORE_TORCH) {
        "recharging torch";
    }
    if (n == SCORE_JOSHUA) {
        "exorcism";
    }
    if (n == SCORE_SECRETDOOR) {
        "opening secret door";
    }
    if (n == SCORE_DEMIJOHN) {
        "opening demijohn";
    }
    if (n == SCORE_WAITER) {
        "using dumbwaiter";
    }
    if (n == SCORE_WAND) {
        "charging a rod";
    }
    if (n == SCORE_AIMWAND) {
        "firing a rod";
    }
    if (n == SCORE_WIRELESS) {
        "exposing radio";
    }
    if (n == SCORE_DAISY) {
        "sporting a daisy chain";
    }
    if (n == SCORE_CHOCOLATE) {
        "placating Aunt Jemima";
    }
    if (n == SCORE_ANDROMEDA) {
        "rescuing Andromeda";
    }
    if (n == SCORE_BATTERY) {
        "uncovering battery";
    }
    if (n == SCORE_PLUMBING) {
        "mending the plumbing";
    }
    if (n == SCORE_SMELL) {
        "scenting a passage";
    }
    if (n == SCORE_REFLECTING) {
        "reflecting";
    }
    if (n == SCORE_HENRIPOST) {
        "solving the grid";
    }
    if (n == SCORE_ORB) {
        "winning the orb";
    }
    if (n == SCORE_MAP) {
        "buying map of Paris";
    }
    if (n == SCORE_ARC) {
        "filling the arc";
    }
    if (n == SCORE_WELL) {
        "getting into the well";
    }
    if (n == SCORE_MASCOT) {
        "acquiring the mascot";
    }
    if (n == SCORE_BISCUIT) {
        "eating between meals";
    }
    if (n == SCORE_SMOKE) {
        "smoke detecting";
    }
    if (n == SCORE_SHIP) {
        "putting a ship in a bottle";
    }
    if (n == SCORE_FLAG) {
        "parachuting on deck";
    }
    if (n == SCORE_SLEEP) {
        "sleeping in Alison's bed";
    }
    if (n == SCORE_SECRET_PASS) {
        "opening sandstone crevice";
    }
    if (n == SCORE_ROD_IDENT) {
        "identifying a rod";
    }
    if (n == SCORE_WATCH) {
        "dislodging the watch";
    }
    if (n == SCORE_HYPNOSIS) {
        "hypnosis";
    }
    if (n == SCORE_SECURITY) {
        "passing security";
    }
    if (n == SCORE_TEMPLE) {
        "restoring the Temple";
    }
    if (n == SCORE_HOMER) {
        "answering Homer";
    }
    if (n == SCORE_ORACLE) {
        "summoning the oracle";
    }
    if (n == SCORE_STRONGBOX) {
        "unearthing strongbox";
    }
    if (n == SCORE_AUSTIN) {
        "startling Austin";
    }
    if (n == SCORE_WASH) {
        "washing away the stone";
    }
    if (n == SCORE_LIBRARY) {
        "provoking the librarians";
    }
    if (n == SCORE_SPHINX) {
        "twisting the sphinx's nose";
    }
    if (n == SCORE_QUARTERSTAFF) {
        "depositing the quarterstaff";
    }
    if (n == SCORE_AFTERLIFE) {
        "rising in the afterlife";
    }
    if (n == SCORE_KNIGHT) {
        "reviving the knight";
    }
    if (n == SCORE_KNIGHT_ENCOURAGE) {
        "encouraging the knight";
    }
    if (n == SCORE_HIGHROD) {
        "choosing a High Rod";
    }
    "** Nameless task **";
];

[ FullScoreSub ndx score_var ;  
    ScoreSub();
    if (score == 0) {
        rfalse;
    }
    new_line;
    L__M(##FullScore,1);
    ndx = 0;
  .labelXXX;
    if (ndx < 45) {
        if (task_done->ndx == 1[?]) {
            if (ndx == 21) {
                PANum(65486);
                score_var = score_var - 50;
            } else {
                PANum(task_scores->ndx);
                score_var = score_var + task_scores->ndx;
            }
            PrintTaskName(ndx);
        }
        ++ndx;
        jump labelXXX;
    }
    if (rod_score ~= 0) {
        PANum(rod_score);
        print "discovering rods^";
    }
    if (things_score ~= 0) {
        PANum(things_score);
        L__M(##FullScore,2);
    }
    if (places_score ~= 0) {
        PANum(places_score);
        L__M(##FullScore,3);
    }
    if (good_try_bonus ~= 0) {
        PANum(5);
        print "bonus for a good try^";
        score_var = score_var + 5;
    }
    score_var = score_var + rod_score + things_score + places_score;
    if (score == 65437) {
        score_var = 0 - score_var - 99;
        PANum(score_var);
        print "destroying universe^";
    }
    new_line;
    PANum(score);
    L__M(##FullScore,4);
    if (deadflag == WON && task_done->11 == 0) {
        "^Sadly, you missed out on the 50-point bonus for rescuing Andromeda.";
    }
    rtrue;
];

[ GoodTry ;     
    if (one_time_try_bonus == true) {
        rtrue;
    }
    one_time_try_bonus = true;
    rewdraw_statusline = true;
    StartTimer(Old_Winery,4);
    score = score + 5;
    good_try_bonus = 1;
    "^A shame to see such a good try unrewarded... oh, go on, have an extra five points.";
];

[ GoodTryRevoked ;      
    if (good_try_bonus == 1) {
        score = score - 5;
        good_try_bonus = 0;
        "^Under the circumstances, the 5-point bonus is forfeit.";
    }
    rtrue;
];

[ SetHimHer who ;       
    who = location;
    if (who == thedark) {
        who = real_location;
    }
    if (who.section == 0) {
        "** Room has no zone **";
    }
    game_section = who.section;
    if (who == Potting_Room) {
        herobj = Jemima;
    }
    if (who == Consulting_Room) {
        herobj = Madame_Sosostris;
    }
    if (who == Chatelet_les_Halles) {
        himobj = surly_shopkeeper;
    }
    if (who == Battlements) {
        himobj = Sir_Joshua_Meldrewe;
    }
    if (who == On_board_the_Phlebas) {
        himobj = hollow_man;
    }
    if (who == Eraina_Taverna) {
        himobj = bartender;
    }
    if (who == Rough_Tent) {
        himobj = unconscious_Saxon_spy;
    }
    if (who == Hellish_Place) {
        himobj = demon;
    }
    if (who == Heavenly_Place) {
        herobj = angel;
    }
    if (who == Cave_Mouth) {
        herobj = Oracle;
    }
    if (who == Inner_Sanctum) {
        himobj = Homer;
    }
    if (who == Warehouses_and_Port) {
        himobj = gambling_sailor;
    }
    if (who == Behind_Summer_House) {
        himobj = irate_squirrel_friend;
    }
    if (who == Hollow) {
        herobj = corn_crake;
    }
    if (who == Stone_Cross) {
        himobj = Old_Evans;
    }
    if (who == Ancient_Consulting_Room) {
        herobj = Ancient_Madame_Sosostris;
    }
    if (who == Reading_Corridor) {
        himobj = Callimachus;
    }
    if (who == Librarians_Office) {
        himobj = Apollonius;
    }
    if (who == Lost_inside_the_Palace) {
        himobj = slave;
    }
    rtrue;
];

[ DarkToDark ;  
    deadflag = DIED;
    if (game_section ~= T_MODERN) {
        "As you step falteringly through the darkness, the air falls ice-cold, whispering in secret languages. Suddenly a great bear rears up before you, savagely sweeping its paw!";
    }
    deadflag = FAILED;
    print "As you unwisely blunder about in the dark, you ";
    if (location == Priests_Hole) {
        "slip down a side passage of the chimney, further and further, blindly landing in a cloud of soot in the fireplace of the lounge downstairs. Fortunately your family is on hand to clean you up and put you back to work packing.";
    }
    if (location >= 123) {
        "miss your footing, trip over and bang your head... Some time later you wake up in hospital, very confused and not on holiday. Fortunately Aunt Jemima comes to visit you every afternoon with plenty of things for you to do...";
    }
    "put a foot wrong and crash through a thin plaster roof into one of the upstairs bedrooms, happily landing on the bed. In later years it becomes a family joke that you demolished half the house for a tatty old tourist map.";
];

[ Amusing ;     
    Stub11();
    rewdraw_statusline = true;
    rtrue;
];

[ ChooseObjects o i ;   
    if (i < 2) {
        rfalse;
    }
    if (action_to_be == ##Strike && o has rod_attr) {
        return 2;
    }
    return 1;
];

[ ConsultDefault o ;    
    if (Meldrewes_History in o) {
        return Meldrewes_History;
    }
    if (classical_dictionary in o) {
        return classical_dictionary;
    }
    if (ancient_prayer_book in o) {
        return ancient_prayer_book;
    }
    if (tourist_map in o) {
        return tourist_map;
    }
    return nothing;
];

[ LookUpSub o n ;       
    n = TryNumber(consult_from);
    if (n >= 0 && (tourist_map in player || tourist_map in location)) {
        o = tourist_map;
    }
    if (n >= 0 && (ancient_prayer_book in player || ancient_prayer_book in location)) {
        o = ancient_prayer_book;
    }
    if (o == nothing) {
        o = ConsultDefault(player);
    }
    if (o == nothing) {
        o = ConsultDefault(location);
    }
    if (o == nothing) {
        "I can't see what you wish to consult.";
    }
    print "(consulting ";
    Defart(o);
    print ")^";
    R_Process(##Consult,o);
    rtrue;
];

[ TimeSub ;     
    WhereInGame();
    new_line;
    rtrue;
];

[ WhereInGame ; 
    if (location == Inside_the_Orb) {
        print "Inside the golden orb.";
        rfalse;
    }
    if (game_section == T_MODERN) {
        print "This is the afternoon of June 3rd, 1993, and you are in Meldrew Hall.";
    }
    if (game_section == T_UNREAL) {
        print "It is early morning on October 5th, 1922, and you are in the Unreal City.";
    }
    if (game_section == T_HAMBURG) {
        print "It is nearly midnight on October 31st, 1988, and you are in a museum in Hamburg.";
    }
    if (game_section == T_TAROT) {
        print "You are passing among the strange, unearthly world of the Tarot box.";
    }
    if (game_section == T_GARDEN) {
        print "It is the afternoon of June 3rd, 1993, and you are in the gardens.";
    }
    if (game_section == T_GARDEN_PAST) {
        print "It is about noon on March 14th, 1808, and you are in the gardens.";
    }
    if (game_section == T_ANCIENT_BRITAIN) {
        print "It is some time in the sixth century A.D., and you are in the Master Game.";
    }
    if (game_section == T_DREAMING or T_EGYPT_DREAMING) {
        print "Time seems to have no meaning, and you are dreaming.";
    }
    if (game_section == T_CATACOMBS) {
        print "It is the afternoon of June 3rd, 1993, and you are in the catacombs beneath the gardens.";
    }
    if (game_section == T_ALEXANDRIA) {
        print "It is some time in the winter of 275 B.C., the reign of Ptolemy II, and you are in ancient Alexandria.";
    }
    if (game_section == T_NE_OF_HOME) {
        print "It is the afternoon of June 3rd, 1993, and you are northeast of Meldrew Hall.";
    }
    if (game_section == T_SPIRIT_WORLD) {
        print "You are in the Spirit World, centuries ahead of your sleeping body.";
    }
    if (game_section == T_AFTERLIFE) {
        print "In the great Monopoly-board Jail of the afterlife, you are ~Just Visiting~.";
    }
    rtrue;
];

[ RestoreSub ;  
    rewdraw_statusline = true;
    @restore -> generic_globvar;
    if (generic_globvar ~= 2[?]) {
        "Failed.";
    }
    new_line;
    LookSub();
    rtrue;
];

[ SaveSub ;     
    rewdraw_statusline = true;
    if (location == Heavenly_Place) {
        "The angel looks at you reproachfully.";
    }
    if (location == Hellish_Place) {
        "The demon looks at you viciously.";
    }
    @save -> generic_globvar;
    if (generic_globvar == 0) {
        "Failed.";
    }
    print "Ok.^";
    rtrue;
];

[ JumpSub ;     
    if (Austin in location) {
        if (game_section == T_ALEXANDRIA) {
            "Austin is quite unruffled.";
        }
        print "For some reason, Austin is startled and springs for his life ";
        trigger_quotation(7);
        if (location == Souvenirs_Room && charcoal_sketch in slide_projector && south_wall hasnt concealed) {
            move Austin to Causeway;
            Achieved(SCORE_AUSTIN);
            "right up through the south wall and into Alexandria!";
        }
        AustinMovements(true);
        rfalse;
    }
    L__M(##Jump);
    rtrue;
];

[ SorrySub ;    
    if (carbolic_soap has concealed) {
        "Oh, don't apologise.";
    }
    "Sorry isn't good enough!";
];

[ StrongSub ;   
    move carbolic_soap to player;
    give carbolic_soap ~concealed;
    "Now, that sort of language is an absolute disgrace, and you're going to have to pay the price for it.";
];

[ WashSub ;     
    if (noun ~= carbolic_soap) {
        "That's not something you can wash with.";
    }
    if (carbolic_soap notin player) {
        "You've no soap.";
    }
    remove carbolic_soap;
    give carbolic_soap concealed;
    "Ugh, it tastes absolutely ghastly. But you feel better for it.";
];

[ MildSub ;     
    "It's good that you can express your frustration in such a mild way.";
];

[ KillSub ;     
    if (noun ~= hard_wooden_ball || second ~= croquet_mallet) {
        R_Process(##Attack,noun);
        rtrue;
    }
    if (parent(hard_wooden_ball) ~= location) {
        "The ball is not on the ground.";
    }
    trigger_quotation(15);
    print "You strike the ball with the mallet, and a pleasing cracking sound.^";
    if (location == Lawn_Ornaments) {
        "^The ball ricochets around the ornaments as on a pinball table.";
    }
    if (location ~= Croquet_Lawn || Croquet_Lawn.nw_to ~= nothing) {
        rfalse;
    }
    print "^The ball runs smoothly across the lawn";
    if (dug_hole in Croquet_Lawn) {
        move hard_wooden_ball to dug_hole;
        " and falls in the hole.";
    }
    remove hard_wooden_ball;
    Croquet_Lawn.nw_to = Behind_Summer_House;
    Lawn_Ornaments.cant_go = "There are paths only west and northwest.";
    Mosaic.e_to = Behind_Summer_House;
    ", along to the northwestern hedge and into an irate squirrel. In a sudden rustle he leaps away, knocking aside a rotten branch and uncovering a tiny gap through the hedge.";
];

[ PrettySub ;   
    pretty_mode = true;
    trigger_quotation(5);
    rewdraw_statusline = true;
    "~Curses~ is now in its (supposedly) ~pretty~ mode.";
];

[ PlainSub ;    
    pretty_mode = false;
    rewdraw_statusline = true;
    "~Curses~ is now in its ~plain~ printing mode.";
];

[ HintsSub ;    
    "There are hints built into this game, but you will have to find out for yourself how to get them.";
];

[ PaceSub ;     
    if (yard_dir <= 0) {
        yard_dir = e_obj;
    }
    PaceMovement(1,yard_dir);
    rtrue;
];

[ PaceDirSub ;  
    PaceMovement(croquet_var,yard_dir);
    rtrue;
];

[ PaceMovement i d ydelta xdelta x y ;  
    if (d == nothing) {
        d = e_obj;
    }
    if (d == invalidObj65535) {
        DigX = 0;
        DigY = 0;
        R_Process(##Look);
        rtrue;
    }
    if (d == invalidObj65534) {
        DigX = OldDigX;
        DigY = OldDigY;
        R_Process(##Look);
        rtrue;
    }
    if (location ~= Croquet_Lawn) {
        "You pace up and down, Holmes-fashion.";
    }
    if (d == nothing) {
        "Perhaps you should say which way to pace.";
    }
    if (parent(d) ~= compass) {
        "What?";
    }
    if (d == n_obj) {
        xdelta = 1;
    }
    if (d == s_obj) {
        xdelta = 65535;
    }
    if (d == e_obj) {
        ydelta = 1;
    }
    if (d == w_obj) {
        ydelta = 65535;
    }
    if (d == ne_obj) {
        ydelta = 1;
        xdelta = 1;
    }
    if (d == nw_obj) {
        ydelta = 65535;
        xdelta = 1;
    }
    if (d == se_obj) {
        ydelta = 1;
        xdelta = 65535;
    }
    if (d == sw_obj) {
        ydelta = 65535;
        xdelta = 65535;
    }
    if (ydelta == 0 && xdelta == 0) {
        "Hardly!";
    }
    x = DigX + ydelta * i;
    y = DigY + xdelta * i;
    if (x >= 13 || x <= 65523 || y >= 13 || y <= 65523) {
        "That would go past the edge of the lawn.";
    }
    DigX = x;
    DigY = y;
    R_Process(##Look);
    rtrue;
];

[ ExamineInSub ;        
    if (second ~= long_vanity_mirror or nothing) {
        "The point of which escapes me.";
    }
    if (noun == player) {
        "In the mirror is one of the most strikingly attractive people you have ever seen in all your born days.";
    }
    if (noun == model_of_ugly_animal) {
        print "In the mirror is a model of a mischievous-looking monkey, which wriggles as it comes alive!";
        give model_of_ugly_animal general;
        MonkeyAlive();
        rtrue;
    }
    if (CheckMirror(noun) == true) {
        print "Curiously, ";
        Defart(noun);
        " it casts no reflection in the mirror.";
    }
    print "In the mirror is the reflection of ";
    Defart(noun);
    ".";
];

[ DigWithSub ;  
    if (noun ~= spade) {
        "Not really a suitable implement.";
    }
    DigSub();
    rtrue;
];

[ DigSub ;      
    if (spade notin player) {
        "You have nothing really suitable to hand.";
    }
    if (location == Vegetable_Garden or Maze_Foundations) {
        "You succeed only in turning the earth further.";
    }
    if (location == Mosaic) {
        "Archaeology is not for the amateur!";
    }
    if (location == Beside_the_Drive) {
        "The gravel is thin and lies on concrete.";
    }
    if (location == Up_the_Plane_Tree) {
        "Surreal!";
    }
    if (location ~= Croquet_Lawn) {
        "The ground is unsuitable.";
    }
    if (DigX == 0 && DigY == 0) {
        "You surely don't want to dig here, right in the middle of such a fine lawn. The peg would fall out, and that would never do.";
    }
    if (DigX == OldDigX && DigY == OldDigY) {
        "There is already a hole on this exact spot of the lawn.";
    }
    OldDigX = DigX;
    OldDigY = DigY;
    print "You dig an energetic little hole in the superb turf";
    if (dug_hole in Croquet_Lawn) {
        print ", filling your last one up with the earth uncovered";
      .labelXXX;
        if (child(dug_hole) ~= nothing) {
            remove child(dug_hole);
            dig_cnt = 2;
            jump labelXXX;
        }
    }
    if (DigX == StrongboxX && DigY == StrongboxY && strongbox hasnt moved) {
        print ", until your spade bumps into something solid";
        move strongbox to dug_hole;
        Achieved(SCORE_STRONGBOX);
    } else if (dig_cnt == 1) {
        dig_cnt = 0;
        print ", failing to find whatever it was you buried";
    }
    move dug_hole to Croquet_Lawn;
    if (dig_cnt == 2) {
        dig_cnt = 1;
    }
    ".";
];

[ FillSub ;     
    if (location == Croquet_Lawn) {
        if (dug_hole notin Croquet_Lawn || noun ~= dug_hole) {
            "What?";
        }
      .labelXXX;
        if (child(dug_hole) ~= nothing) {
            remove child(dug_hole);
            jump labelXXX;
        }
        remove dug_hole;
        "You fill in the hole, restoring the turf.";
    }
    if (location == Down_by_River or Garden_Stream or Stream or Sea_Shore) {
        "Don't go carting water about, for heaven's sake, it'll only make a mess of your clothes and all your spare clothes are packed.";
    }
    "Try ~get all~ and then ~put all in...~.";
];

[ BeepSub ;     
    "Are you feeling quite right?";
];

[ DanceSub ;    
    CDefart(noun);
    " does not wish to dance with you.";
];

[ RipSub ;      
    "That sort of wilful damage to property is exactly what's wrong with the world today. And another thing, the influence of so-called rock and roll music on society has in my view, and I may be old-fashioned, but... [etc]";
];

[ RipDownSub ;  
    R_Process(##Rip);
    rtrue;
];

[ XyzzySub ;    
    "For a moment you can almost hear a hoarse voice say something to you. But it passes.";
];

[ LagachSub ;   
    "You feel inexplicably powerful, but nothing happens. Perhaps you should have addressed yourself more precisely.";
];

[ ShoutSub ;    
    "Try ~help~ for details of how to speak to people.";
];

[ ShantihSub ;  
    "For a moment you can almost hear thunder, as though it were saying something. But the moment passes.";
];

[ WaveSub r ;   
    if (noun notin player) {
        "But you aren't holding it.";
    }
    if (noun has hidden_rod) {
        if (daisy_chain in player && daisy_chain has worn && daisy_chain.number == 1) {
            score = score + 6;
            rod_score = rod_score + 6;
            print "Light pulses around the daisy chain, then leaps out to engulf ";
            Defart(noun);
            print " which melts into ";
            remove noun;
            r = noun.rod_assoc;
            itobj = r;
            give r moved;
            give r unidentifed_rod;
            move r to player;
            Indefart(r);
            "!";
        }
        if (yellow_daisy in player && yellow_daisy has worn) {
            score = score + 6;
            rod_score = rod_score + 6;
            print "Light pulses from the daisy behind your ear, leaping out to engulf ";
            Defart(noun);
            print " which melts into ";
            remove noun;
            r = noun.rod_assoc;
            itobj = r;
            give r moved;
            move r to player;
            if (r has rod_attr) {
                Defart(r);
            } else {
                Indefart(r);
            }
            "!";
        }
    }
    if (noun has rod_attr) {
        "That seems to be not quite how they work...";
    }
    if (noun has worn) {
        "You can't wave what you're wearing.";
    }
    print "You look ridiculous waving ";
    Defart(noun);
    ".";
];

[ StrikeSub ;   
    if (noun notin player) {
        "But you aren't holding it.";
    }
    if (noun hasnt rod_attr) {
        print "You ineffectually bash ";
        Defart(noun);
        " on the ground.";
    }
    if (noun has charged) {
        deadflag = DIED;
        "The already-charged rod explodes with cataclysmic violence, burying everything nearby in rubble!";
    }
    give noun charged;
    Achieved(SCORE_WAND);
    if (BeforeRoutines() == true) {
        rtrue;
    }
    "The rod charges with etherial power, drawn up from the earth through ley lines...";
];

[ PointAtSub ;  
    print "You point at ";
    Defart(noun);
    ".";
];

[ PointVagueSub ;       
    if (noun in compass && adamantine_knight in location) {
        KnightReacts();
        rfalse;
    }
    if (noun has rod_attr) {
        "Please point it at something.";
    }
    "A useless gesture.";
];

[ PointSub r ;  
    if (noun notin player) {
        "But you aren't holding it.";
    }
    if (second in player) {
        "It's too fiddly pointing it at something you're holding.";
    }
    if (noun hasnt rod_attr) {
        "Ok. (Why?)";
    }
    if (noun hasnt charged) {
        "Nothing happens.";
    }
    Achieved(SCORE_AIMWAND);
    r = noun.rod_action;
    if (r == $ffff) {
        "** No rod routine **";
    }
    give noun ~charged;
    generic_globvar = r();
    rtrue;
];

[ PlayCroquetSub ;      
    "You'll have to be a little more explicit.";
];

[ DiagnoseSub ; 
    "Hang on a moment... yes, you're still breathing. Keep it up!";
];

[ LeanSub ;     
    if (location ~= Folly) {
        "That won't achieve anything very much.";
    }
    if (second ~= Folly_tower) {
        "That isn't in conspicuous need of support.";
    }
    if (noun ~= old_timber_spar) {
        "That isn't a particularly good support.";
    }
    move old_timber_spar to Folly;
    old_timber_spar.initial = "The timber prop leans against the tottering Folly, supporting it.";
    give old_timber_spar ~moved;
    bean_pole.number = 0;
    give old_timber_spar general;
    give bean_pole ~general;
    "You lean the timber prop against the Folly tower, supporting it. (Better just hope you won't be needing the prop for anything else!)";
];

[ PropWithSub o ;       
    o = noun;
    noun = second;
    second = o;
    LeanSub();
    rtrue;
];

[ MilkSub ;     
    if (noun == goat or herd_of_goats) {
        "Pour encourager les udders... But milking goats is no job for an amateur.";
    }
    "What?";
];

[ HypnotizeSub ;        
    if (second ~= nothing or gold_watch_on_a_chain) {
        "You don't seem to have a suitable focus.";
    }
    if (gold_watch_on_a_chain notin player) {
        "Unaided, you are unable to make any impression.";
    }
    print "You set the gold watch swinging, back and forth, spinning the light. ";
    if (noun == Old_Evans) {
        give Old_Evans general;
        "Old Evans, who is nine-tenths hypnotised most of the time anyway, succumbs easily.";
    }
    if (noun == player) {
        R_Process(##Sleep);
        rtrue;
    }
    print "But ";
    Defart(noun);
    " seems wilful enough to resist hypnosis.";
];

[ AnoppeSub ;   
    if (location ~= Lost_inside_the_Palace || Lost_inside_the_Palace hasnt general) {
        "Nothing happens.";
    }
    SlaveFindsYou();
    rtrue;
];

[ SailSub ;     
    if (player notin skiff) {
        "You are not in any suitable means of transport.";
    }
    if (skiff in Warehouses_and_Port || skiff in Garden_Stream) {
        if (skiff in Warehouses_and_Port) {
            move skiff to Garden_Stream;
            location = Garden_Stream;
        } else {
            move skiff to Warehouses_and_Port;
            location = Warehouses_and_Port;
        }
        print "The skiff gathers wind from somewhere, which whistles past you until your eyes are blurred and watery. When you look around, you find that you are moored once again...^";
        R_Process(##Look);
        rtrue;
    }
    if (skiff has general) {
        "That seems to be happening whether you like it or not.";
    }
    give skiff general;
    move skiff to Harbour_Mouth;
    location = Harbour_Mouth;
    print "You set sail, and a light breeze propels your skiff...^";
    R_Process(##Look);
    rtrue;
];

[ AnointSub ;   
    "You have no oil.";
];

[ KnockSub ;    
    if (noun hasnt door) {
        print "(If you insist.)  ";
    }
    "There is no reply.";
];

[ WishSub ;     
    if (chicken_wishbone notin player) {
        "You make a wish.";
    }
    "The wishbone has already been pulled, and you have the part which lost.";
];

[ InscribeSub ; 
    "Graffiti is uncouth.";
];

[ InscribeOnSub ;       
    if (second has unidentifed_rod) {
        "The silver plaque is extremely strong, and resists all attempts to mark it.";
    }
    InscribeSub();
    rtrue;
];

[ LieSub ;      
    "Whatever happened to truthfulness...";
];

[ LieDownSub ;  
    if (location == Servants_Room) {
        R_Process(##Enter,servants_bed);
        rtrue;
    }
    if (location == Alisons_Writing_Room) {
        R_Process(##Enter,comfortable_bed);
        rtrue;
    }
    "You lie down on the floor for a while and then get up again, feeling foolish.";
];

[ RamSub ;      
    if (game_section == T_MODERN) {
        "For heaven's sake, this is your own house.";
    }
    if (location == Coven_Cell) {
        "No, this is a goat. A ~ram~ is a kind of sheep.";
    }
    "Please don't ram anything. This computer only has limited RAM.";
];

[ GambleSub ;   
    "How, exactly?";
];

[ CloseWithSub ;        
    R_Process(##PutOn,second,noun);
    rtrue;
];

[ StackSub ;    
    R_Process(##Drop,noun);
    rtrue;
];

[ TurnWithSub ; 
    if (second ~= steel_wrench) {
        CDefart(second);
        " is unsuitable for turning things.";
    }
    if (location ~= Library_Storage) {
        print "(The wrench seems unnecessary, so you use bare hands.)^";
    }
    R_Process(##Turn,noun);
    rtrue;
];

[ StartSub ;    
    "You'll have to say exactly how to do that.";
];

[ IsDirection ; 
    if (noun in compass) {
        rtrue;
    }
    rfalse;
];

[ ConTopicJ w ; 
    consult_from = wn;
  .labelXXX;
    w = NextWordStopped();
    if (w ~= 'invalidDictWord65535' && (w ~= 'to' || action_to_be ~= ##Answer)) jump labelXXX;
    --wn;
    consult_words = wn - consult_from;
    if (consult_words == 0) {
        return 65535;
    }
    if (action_to_be == ##Ask or ##Answer or ##Tell) {
        w = wn;
        wn = consult_from;
        parsed_number = NextWord();
        if (parsed_number == 40278 && consult_words > 1) {
            parsed_number = NextWord();
        }
        wn = w;
        return 1;
    }
    return 0;
];

[ ConTopic w ;  
    consult_from = wn;
  .labelXXX;
    w = NextWordStopped();
    if (w ~= 'in' or 'invalidDictWord65535') jump labelXXX;
    if (w == 'invalidDictWord65535') {
        return 65535;
    }
    --wn;
    consult_words = wn - consult_from;
    if (consult_words == 0) {
        return 65535;
    }
    return 0;
];

[ Stub10 ;      
    rfalse;
];

[ Stub9 ;       
    rfalse;
];

[ Stub8 ;       
    rfalse;
];

[ Stub7 ;       
    rfalse;
];

[ Stub6 ;       
    rfalse;
];

[ Stub5 i ;     
    i = 0;
    rfalse;
];

[ Stub4 i ;     
    i = 0;
    rfalse;
];

[ Stub3 i ;     
    i = 0;
    rfalse;
];

[ Stub2 i ;     
    i = 0;
    rfalse;
];

[ Stub1 i j ;   
    i = 0;
    j = 0;
    rfalse;
];

[ NegativeOne ; 
    return 65535;
];

[ ConTopicI w ; 
    consult_from = wn;
  .labelXXX;
    w = NextWordStopped();
    if (w ~= 'on' or 'invalidDictWord65535') jump labelXXX;
    if (w == 'invalidDictWord65535') {
        return 65535;
    }
    --wn;
    consult_words = wn - consult_from;
    if (consult_words == 0) {
        return 65535;
    }
    return 0;
];

[ AnotherWord w ;       
    w = NextWordStopped();
    --wn;
    return w;
];

[ PaceOrPaces d ;       
    if (d == 'pace' or 'step' or 'stride') {
        return 1;
    }
    if (d == 'paces' or 'steps' or 'strides') {
        return 2;
    }
    rfalse;
];

[ SomeParse w n i ;     
    i = wn;
    w = AnotherWord();
    if (w == 'by' or 'for') {
        ++wn;
        w = AnotherWord();
    }
    if (w == 'a//' or 'single') {
        ++wn;
        w = AnotherWord();
        if (PaceOrPaces(w) ~= 1) {
            wn = i;
            rfalse;
        }
        ++wn;
        return 1;
    }
    if (PaceOrPaces(w) == 1) {
        ++wn;
        return 1;
    }
    n = TryNumber(wn);
    if (n < 0) {
        wn = i;
        rfalse;
    }
    ++wn;
    w = AnotherWord();
    if (PaceOrPaces(w) == 1 && n == 1 || (PaceOrPaces(w) == 2 && n > 1)) {
        ++wn;
    }
    return n;
];

[ CroquetMove w i flag j d ;    
    w = AnotherWord();
    if (w == 'forward' or 'forwards') {
        ++wn;
        return yard_dir;
    }
    if (w == 'back' or 'backward' or 'backwards') {
        ++wn;
        w = AnotherWord();
        flag = 1;
    }
    if (w == 'to') {
        ++wn;
        w = AnotherWord();
    }
    if (w == 'the') {
        ++wn;
        w = AnotherWord();
    }
    if (w == 'peg' or 'middle' or 'centre' or 'hoop' or 'hoops' or 'center') {
        ++wn;
        return 65535;
    }
    if (w == 'hole' && dug_hole in Croquet_Lawn) {
        ++wn;
        return 65534;
    }
    i = wn;
    if (w ~= 'invalidDictWord65535') {
        j = NounDomain(compass,0,0);
    } else {
        j = 65535;
    }
    if (j <= top_object && j > 0) {
        d = j;
    } else {
        wn = i;
        d = yard_dir;
        if (d <= 0) {
            d = e_obj;
        } else if (flag == 1) {
            if (yard_dir == n_obj) {
                d = s_obj;
            }
            if (yard_dir == s_obj) {
                d = n_obj;
            }
            if (yard_dir == e_obj) {
                d = w_obj;
            }
            if (yard_dir == w_obj) {
                d = e_obj;
            }
            if (yard_dir == ne_obj) {
                d = sw_obj;
            }
            if (yard_dir == nw_obj) {
                d = se_obj;
            }
            if (yard_dir == sw_obj) {
                d = ne_obj;
            }
            if (yard_dir == se_obj) {
                d = nw_obj;
            }
        }
    }
    return d;
];

[ CroquetFunc i j ;     
    i = SomeParse();
    if (i == 0) {
        if (AnotherWord() == 65535) {
            return 65535;
        }
        j = CroquetMove();
        if (AnotherWord() == 65535) {
            i = 1;
        } else {
            i = SomeParse();
        }
        if (i == 0) {
            return 65535;
        }
    } else {
        j = CroquetMove();
    }
    croquet_var = i;
    yard_dir = j;
    return 0;
];

[ AnotherCroquetFunc i j ;      
    i = SomeParse();
    if (i == 0) {
        return 65535;
    }
    j = CroquetMove();
    croquet_var = i;
    yard_dir = j;
    return 0;
];

[ readchar s i j k ;    
    j = wn * 4 + 1;
    k = parse->j;
    s = k + 24021;
    i = parse->(j - 1);
    if (i ~= true) {
        return 65535;
    }
    j = 65535;
    if (s->0 >= 97 && s->0 <= 122) {
        j = s->0 - 97 + 1;
    }
    if (s->0 >= 65 && s->0 <= 90) {
        j = s->0 - 65 + 1;
    }
    if (j == 65535) {
        return 65535;
    }
    parsed_number = j;
    ++wn;
    return 1;
];

[ PageScreen s more c ; 
    if (more == true) {
        print "(Press H for more, or SPACE to return.)^^";
    }
    print (string) s;
    new_line;
    new_line;
    @read_char 1 0 0 -> c;
    if (c == 'H' or 'h') {
        rfalse;
    }
    rtrue;
];

[ MoreAmusements ;      
    if (menu_item == 1) {
        if (PageScreen("Drop the robot mouse where Austin can get at it",true) == 1) {
            return 2;
        }
        if (PageScreen("Shut Austin out of the attic with the trap door") == 1) {
            return 2;
        }
        if (PageScreen("Ram or knock on various doors") == 1) {
            return 2;
        }
        if (PageScreen("Cast all the rods on yourself") == 1) {
            return 2;
        }
        if (PageScreen("Ask the demon and angel about Heaven and Hell") == 1) {
            return 2;
        }
        if (PageScreen("Eat a genuine Ekmek special (look it up in the dictionary for details)") == 1) {
            return 2;
        }
        "Write your own Inform adventure, and so revenge yourself on the author";
    }
    if (menu_item == 2) {
        "Callimachus (c. 300-240 BC), a former schoolteacher in Alexandria, produced the first library catalogue: a 120-part organised history of literature to date (almost all lost now, like much of its subject matter). He was favoured at court and celebrated for his epigrams (about 60 of which survive in the ~Greek Anthology~) but denounced by critics for being unable to write epics, which he detested (~big book, big bore~). Apollonius, the head librarian c. 260-247, was a former pupil with exactly opposite views, who brought out a 6000-line epic on the Argonauts, whereupon the quarrel grew so personal and bitter that Apollonius was driven into retirement.";
    }
    if (menu_item == 3) {
        "Sleep cold at someone's ^Door as, shivering, ^I lie tonight at ^Yours. The neighbours weep ^To see me here, but ^Who will weep for you, ^Crouched on a doorstep ^When the grey hairs come? ^^ -- translation by Edward Lucie-Smith";
    }
    if (menu_item == 4) {
        if (PageScreen("Other anagrams of ~Marie Swelldon~, found by Michael Kinyon, include...",true) == 1) {
            return 2;
        }
        if (PageScreen("Demeanor Wills") == 1) {
            return 2;
        }
        if (PageScreen("Domineer Walls") == 1) {
            return 2;
        }
        if (PageScreen("Amino Dwellers") == 1) {
            return 2;
        }
        if (PageScreen("Enrolled Swami") == 1) {
            return 2;
        }
        if (PageScreen("Lemonade Swirl") == 1) {
            return 2;
        }
        if (PageScreen("Mellowed Rains") == 1) {
            return 2;
        }
        if (PageScreen("Dowel Minerals") == 1) {
            return 2;
        }
        if (PageScreen("Seminole Drawl") == 1) {
            return 2;
        }
        if (PageScreen("Allowed Miners") == 1) {
            return 2;
        }
        if (PageScreen("Almoner Wields") == 1) {
            return 2;
        }
        if (PageScreen("Mellows Rained") == 1) {
            return 2;
        }
        if (PageScreen("Mineral Slowed") == 1) {
            return 2;
        }
        if (PageScreen("Moraine Dwells") == 1) {
            return 2;
        }
        if (PageScreen("Mellow Sardine") == 1) {
            return 2;
        }
        if (PageScreen("Sawmill Redone") == 1) {
            return 2;
        }
        if (PageScreen("Soldier Lawmen") == 1) {
            return 2;
        }
        if (PageScreen("Swindle Morale") == 1) {
            return 2;
        }
        "Swollen Admire";
    }
    if (menu_item == 5) {
        "To those who wrote to suggest ~wistaria~ be spelt ~wisteria~: ^The genus is named after the American anatomist Caspar Wistar (1761-1818), so ~wistaria~ is correct, but the mistake was introduced by Thomas Nuttall, who originally christened the family. Ironically, American dictionaries side with Nuttall and English ones with Wistar, as far as I can tell.";
    }
    if (menu_item == 6) {
        if (PageScreen("The 1970s robot mouse is capable of speech recognition.",true) == 1) {
            return 2;
        }
        if (PageScreen("Mentioning a bridge game (between Sir Joshua Meldrewe and the Prince of Wales) which took place a century before the invention of bridge. (In this release, they play piquet.)") == 1) {
            return 2;
        }
        if (PageScreen("Locating Alexandria in ~Upper Egypt~. Actually it's in Lower Egypt - the Nile flows from south to north.") == 1) {
            return 2;
        }
        if (PageScreen("The ~brass~ key is no longer really brass (examine it!) since brass is unmagnetic.") == 1) {
            return 2;
        }
        if (PageScreen("The lighthouse in the fifth century BC, the period of city states, is named after the Pharos, yet to be built in Alexandria during the Hellenic era. (Quinquiremes are contemporary with the frieze, though.)") == 1) {
            return 2;
        }
        "Not really a mistake, just the pace of history: the English pub licensing laws which close the village pub in the afternoon have, since June 1993, been repealed.";
    }
    if (menu_item == 7) {
        "There are two ancient languages: a hieroglyphic and a demotic script, the important clue being the Rosetta stone to compare the two. ^^The hieroglyphics are loosely based on the beautiful system devised by Michael Berlyn and Patricia Fogleman for their excellent game, ~Infidel~, though I have taken care not to reveal any of their answers. ^^The demotic script (written right to left) is my own invention, but the numbers are Etruscan. (And are just about the only Etruscan words deciphered - they were found on a gambler's die.)";
    }
    rtrue;
];

[ EndMenuDisplay ;      
    DoMenu("^^     Frivolous things to do^     About Callimachus and Apollonius^     An epigram by Callimachus^     Salmon Wielder^     Wistaria or wisteria?^     Great Curses mistakes^     The ancient languages^",EndMenu,MoreAmusements);
    rtrue;
];

[ EndMenu ;     
    if (menu_item == 0) {
        submenu_header = "For your amusement";
        submenu_number = 9;
        return 7;
    }
    if (menu_item == 1) {
        submenu_header = "Frivolous things to do";
        submenu_number = 11;
    }
    if (menu_item == 2) {
        submenu_header = "About Callimachus and Apollonius";
        submenu_number = 16;
    }
    if (menu_item == 3) {
        submenu_header = "An epigram by Callimachus";
        submenu_number = 12;
    }
    if (menu_item == 4) {
        submenu_header = "Salmon Wielder";
        submenu_number = 7;
    }
    if (menu_item == 5) {
        submenu_header = "Wistaria or wisteria?";
        submenu_number = 10;
    }
    if (menu_item == 6) {
        submenu_header = "Great Curses mistakes";
        submenu_number = 10;
    }
    if (menu_item == 7) {
        submenu_header = "The ancient languages";
        submenu_number = 10;
    }
    rtrue;
];

[ AmusementMenu ;       
    if (menu_item == 1) {
        if (PageScreen("Giving Aunt Jemima the wrapped parcel;",true) == 1) {
            return 2;
        }
        if (PageScreen("Or the chocolate biscuit;") == 1) {
            return 2;
        }
        if (PageScreen("Or kissing her;") == 1) {
            return 2;
        }
        if (PageScreen("Attracting Bateau Phlebas by waving the poster (which can be torn down);") == 1) {
            return 2;
        }
        if (PageScreen("Casting the Rod of Fire at the medicine bottle to try and open it (as advised by demon);") == 1) {
            return 2;
        }
        if (PageScreen("Trying the postcard in the slide projector;") == 1) {
            return 2;
        }
        if (PageScreen("Or the Alexandrian sketch when it's still framed;") == 1) {
            return 2;
        }
        "Feeding Austin the chicken wishbone.";
    }
    if (menu_item == 2) {
        if (PageScreen("Eighty-one. The inspiration for the radio station came about when the author was driving at midnight through Oxfordshire and the local station played, in succession, the Moonlight Sonata, the Four Seasons, You Take My Breath Away and Gold. So the radio plays the 80 most hackneyed radio tunes the author could think of.",true) == 1) {
            return 2;
        }
        "For the eighty-first, the Sibelius violin concerto, see the Inform technical manual.";
    }
    if (menu_item == 3) {
        if (PageScreen("Not counting everyday death, winning or the various ways of almost but not quite coming to an end...",true) == 1) {
            return 2;
        }
        if (PageScreen("Missing the point entirely") == 1) {
            return 2;
        }
        if (PageScreen("Being spooked") == 1) {
            return 2;
        }
        if (PageScreen("In checkmate") == 1) {
            return 2;
        }
        if (PageScreen("Being transported to Australia") == 1) {
            return 2;
        }
        if (PageScreen("Facing a prison term as a terrorist") == 1) {
            return 2;
        }
        if (PageScreen("Being annihilated by a temporal paradox") == 1) {
            return 2;
        }
        if (PageScreen("Becoming a constellation") == 1) {
            return 2;
        }
        "Disembodying the entire universe";
    }
    if (menu_item == 4) {
        if (PageScreen("If magic, the daisy chain rustles (according to inventories) when you are carrying something which could turn into a rod if waved.",true) == 1) {
            return 2;
        }
        if (PageScreen("Likewise, the yellow daisy (from Roman Britain) twitches.") == 1) {
            return 2;
        }
        "The vanity mirror does not reflect rods or things which become rods (unless you're so vain as to polish it, after which it reflects everything).";
    }
    if (menu_item == 5) {
        "Apart from the projector beam's effects, looking into the ball shows one of twelve little scenes, corresponding to the twelve main areas of the game.";
    }
    if (menu_item == 6) {
        "The angel and the demon bear a surprising resemblance to them. ^^Sadly, Donald Sutherland died a few days ago (as I write this). I'm slightly sorry now to have typecast him.";
    }
    if (menu_item == 7) {
        if (PageScreen("Not only the title, but the plan and a good deal of the incidental symbolism of the Unreal City were taken from early poems of T. S. Eliot (which owed a bit to Baudelaire), and I recommend them (apart from the great interest of the poems themselves) to any who think such elucidation worth the trouble.",true) == 1) {
            return 2;
        }
        if (PageScreen("The handkerchief is not Jemima's but belongs to J. Alfred Prufrock (though cf. ~The Waste Land~ l. 178).") == 1) {
            return 2;
        }
        "The graffiti behind the poster is the closing words of ~The Waste Land~, which the Thunder said. ~Shantih~ is not, as one inspired player guessed, meant as an anagram of ~has hint~.";
    }
    if (menu_item == 8) {
        "59. Nine can be carried, plus another 21 trumps and 29 plainer cards in the pack. I have obviously departed from the exact constitution of the Tarot pack (with which I am not familiar) to suit my own convenience.";
    }
    if (menu_item == 9) {
        if (PageScreen("By dropping it down the empty dumbwaiter shaft;",true) == 1) {
            return 2;
        }
        if (PageScreen("Putting it at the foot of the shaft, and dropping the dumbwaiter on it;") == 1) {
            return 2;
        }
        if (PageScreen("Running over it in the garden roller;") == 1) {
            return 2;
        }
        if (PageScreen("Dropping it from the top of the beanstalk;") == 1) {
            return 2;
        }
        if (PageScreen("Or from the top of the mast of the Lady Magdalena;") == 1) {
            return 2;
        }
        if (PageScreen("Aunt Jemima can open it...") == 1) {
            return 2;
        }
        "...and so can the jaws of Dobbin (Doktor Stein's goat).";
    }
    if (menu_item == 10) {
        "Annoyance of the player: it's the biggest red herring in the game. It scores -50, the demon advises you to hang onto it at all times - and it was cursed.";
    }
    rtrue;
];

[ TriviaMenu ;  
    DoMenu("^^     1. What are the ~good but wrong guesses~?^     2. How many songs does the radio play?^     3. In what *** ways *** can the game end?^     4. What are the secret ways to detect a Rod?^     5. What can you see in the crystal ball?^     6. Where are Dame Judi Dench and Donald Sutherland?^     7. Explain the handkerchief initials and the graffiti.^     8. How many tarot cards are there altogether?^     9. How can the medicine bottle be opened?^     10. What is the mascot for in the premonition?^",TriviaQuestion,AmusementMenu);
    rtrue;
];

[ TriviaQuestion ;      
    if (menu_item == 0) {
        submenu_header = "Trivia questions";
        submenu_number = 8;
        return 10;
    }
    if (menu_item == 1) {
        submenu_header = "1. What are the ~good but wrong guesses~?";
        submenu_number = 20;
    }
    if (menu_item == 2) {
        submenu_header = "2. How many songs does the radio play?";
        submenu_number = 19;
    }
    if (menu_item == 3) {
        submenu_header = "3. In what *** ways *** can the game end?";
        submenu_number = 20;
    }
    if (menu_item == 4) {
        submenu_header = "4. What are the secret ways to detect a Rod?";
        submenu_number = 22;
    }
    if (menu_item == 5) {
        submenu_header = "5. What can you see in the crystal ball?";
        submenu_number = 20;
    }
    if (menu_item == 6) {
        submenu_header = "6. Where are Dame Judi Dench and Donald Sutherland?";
        submenu_number = 25;
    }
    if (menu_item == 7) {
        submenu_header = "7. Explain the handkerchief initials and the graffiti.";
        submenu_number = 27;
    }
    if (menu_item == 8) {
        submenu_header = "8. How many tarot cards are there altogether?";
        submenu_number = 22;
    }
    if (menu_item == 9) {
        submenu_header = "9. How can the medicine bottle be opened?";
        submenu_number = 20;
    }
    if (menu_item == 10) {
        submenu_header = "10. What is the mascot for in the premonition?";
        submenu_number = 23;
    }
    rtrue;
];

[ WhichMenu ;   
    if (menu_item == 1) {
        EndMenuDisplay();
        return 2;
    }
    if (menu_item == 2) {
        TriviaMenu();
        return 2;
    }
    return 2;
];

[ Stub11 ;      
    DoMenu("^^     For your amusement^     Trivia questions^",HintSubmenu,WhichMenu);
    rtrue;
];

[ HintSubmenu ; 
    if (menu_item == 0) {
        submenu_header = "Amusements";
        submenu_number = 5;
        return 2;
    }
    if (menu_item == 1) {
        submenu_header = "For your amusement";
        submenu_number = 9;
    }
    if (menu_item == 2) {
        submenu_header = "Trivia questions";
        submenu_number = 8;
    }
    rtrue;
];

[ StartSplash i ;       
    @erase_window 65535;
    print "^^^^^^^^^^^^^";
    i = 0->33;
    if (i == 0) {
        i = 80;
    }
    i = (i - 50) / 2;
    style bold;
    0-->8 = 2 | 0-->8;
    generic_globvar = i;
    if (generic_globvar >= 1) {
      .labelXXX;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump labelXXX;
    }
    print "               Welcome to CURSES^";
    style roman;
    print "^^";
    generic_globvar = i;
    if (generic_globvar >= 1) {
      .labelXXX;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump labelXXX;
    }
    print "         [Please press SPACE to begin.]^";
    0-->8 = 65533 & 0-->8;
    i = random(3);
    if (i == 1) {
        quote_line-->0 = "Nine times she waved the fluttering wimple round,";
        quote_line-->1 = "And made a little plot of magic ground.";
        quote_line-->2 = "And in that daisied circle, as men say,";
        quote_line-->3 = "Is Merlin prisoner till the judgement day...";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Matthew Arnold, Tristram and Iseult III (1852)";
        generic_globvar = quote_display(6,49,quote_line);
    }
    if (i == 2) {
        quote_line-->0 = "Curses are like young chickens,";
        quote_line-->1 = "they always come home to roost.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Robert Southey (1774-1843),";
        quote_line-->4 = "   ~The Curse of Kehama~";
        generic_globvar = quote_display(5,31,quote_line);
    }
    if (i == 3) {
        quote_line-->0 = "Let Rome in Tiber melt, and the wide arch";
        quote_line-->1 = "Of the ranged empire fall! Here is my space.";
        quote_line-->2 = "Kingdoms are clay.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Shakespeare, ~Antony and Cleopatra~ I:1";
        generic_globvar = quote_display(5,44,quote_line);
    }
  .labelXXX;
    @read_char 1 0 0 -> i;
    if (i ~= 32 or 10 or 13) jump labelXXX;
    @erase_window 65535;
    rtrue;
];

[ Sub12 ;       
    rtrue;
];

[ DrawStatusLine columns c2 ;   
    columns = 0->33;
    if (columns == 0) {
        columns = 80;
    }
    0-->8 = 2 | 0-->8;
    if (pretty_mode == true) {
        @split_window 2;
    } else {
        @split_window 1;
    }
    @buffer_mode false;
    @set_window 1;
    style reverse;
    if (current_game_sec ~= location.section) {
        rewdraw_statusline = true;
    }
    current_game_sec = location.section;
    if (deadflag > 0 || undone_flag == 1) {
        rewdraw_statusline = true;
    }
    if (rewdraw_statusline == true) {
        @set_cursor 1 1;
        generic_globvar = columns;
        if (generic_globvar >= 1) {
          .labelXXX;
            print ' ';
            generic_globvar = generic_globvar - 1;
            if (generic_globvar ~= 0) jump labelXXX;
        }
        if (pretty_mode == true) {
            @set_cursor 2 1;
            generic_globvar = columns;
            if (generic_globvar >= 1) {
              .labelXXX;
                print ' ';
                generic_globvar = generic_globvar - 1;
                if (generic_globvar ~= 0) jump labelXXX;
            }
        }
    }
    if (rewdraw_statusline == true || short_loc_var ~= location) {
        @set_cursor 1 2;
        before_short_desc = true;
        PrintShortName(location);
        before_short_desc = false;
        generic_globvar = 20[rod_of_infinity?];
        if (generic_globvar >= 1) {
          .labelXXX;
            print ' ';
            generic_globvar = generic_globvar - 1;
            if (generic_globvar ~= 0) jump labelXXX;
        }
        short_loc_var = location;
        rewdraw_statusline = true;
    }
    if (pretty_mode == false) {
        c2 = columns - 15;
        @set_cursor 1 c2;
        save_score = score;
        print score, "/", turns, "   ";
    } else {
        if (rewdraw_statusline == true) {
            c2 = columns - 35;
            @set_cursor 1 c2;
            if (deadflag > 0) {
                print "Final score: ";
            } else {
                print "Score: ";
            }
        } else {
            c2 = columns - 28;
            @set_cursor 1 c2;
        }
        if (rewdraw_statusline == true || save_score ~= score) {
            print score;
            if (deadflag > 0) {
                print "/550";
            }
        }
        @set_cursor 2 c2;
        if (rewdraw_statusline == true) {
            print "Turns: ";
        }
        print turns;
        if (rewdraw_statusline == true || save_game_sec ~= game_section) {
            game_section = location.section;
            c2 = columns - 20;
            @set_cursor 2 c2;
            if (game_section == T_MODERN) {
                print "    June 3rd, 1993";
            }
            if (game_section == T_UNREAL) {
                print " October 5th, 1922";
            }
            if (game_section == T_HAMBURG) {
                print "October 31st, 1988";
            }
            if (game_section == T_GARDEN) {
                print "    June 3rd, 1993";
            }
            if (game_section == T_GARDEN_PAST) {
                print "  March 14th, 1808";
            }
            if (game_section == T_ANCIENT_BRITAIN) {
                print "  Sixth century AD";
            }
            if (game_section == T_CATACOMBS) {
                print "    June 3rd, 1993";
            }
            if (game_section == T_ALEXANDRIA) {
                print "  Winter of 275 BC";
            }
            if (game_section == T_NE_OF_HOME) {
                print "    June 3rd, 1993";
            }
            if (game_section == T_EGYPT_DREAMING or T_SPIRIT_WORLD or T_TAROT or T_AFTERLIFE) {
                print "                  ";
            }
            @set_cursor 2 2;
            if (game_section == T_MODERN) {
                print "(in Meldrew Hall)       ";
            }
            if (game_section == T_UNREAL) {
                print "(in the Unreal City)    ";
            }
            if (game_section == T_HAMBURG) {
                print "(Hamburg by night)      ";
            }
            if (game_section == T_TAROT) {
                print "(in the Tarot box)      ";
            }
            if (game_section == T_GARDEN) {
                print "(in the gardens)        ";
            }
            if (game_section == T_GARDEN_PAST) {
                print "(in the gardens)        ";
            }
            if (game_section == T_ANCIENT_BRITAIN) {
                print "(in the Master Game)    ";
            }
            if (game_section == T_DREAMING or T_EGYPT_DREAMING) {
                print "(dreaming?)             ";
            }
            if (game_section == T_CATACOMBS) {
                print "(in the catacombs)      ";
            }
            if (game_section == T_ALEXANDRIA) {
                print "(in Alexandria)         ";
            }
            if (game_section == T_NE_OF_HOME) {
                print "(northeast of the House)";
            }
            if (game_section == T_SPIRIT_WORLD or T_AFTERLIFE) {
                print "                        ";
            }
        }
    }
    style roman;
    @buffer_mode true;
    @set_cursor 1 1;
    @set_window 0;
    0-->8 = 65533 & 0-->8;
    rewdraw_statusline = false;
    if (quote_selection ~= 65535) {
        display_quote(quote_selection);
        quote_selection = 65535;
    }
    rtrue;
];

[ quote_display lines margin lines2 columns center cursor i l ; 
    @split_window (lines + 6);
    @set_window 1;
    columns = 0->33;
    if (columns == 0) {
        columns = 80;
    }
    center = (columns - margin) / 2;
    style reverse;
    columns = center - 2;
    cursor = 5;
    i = 0;
    @set_cursor 4 columns;
    generic_globvar = margin + 4;
    if (generic_globvar >= 1) {
      .labelXXX;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump labelXXX;
    }
  .labelXXX;
    @set_cursor cursor columns;
    generic_globvar = margin + 4;
    if (generic_globvar >= 1) {
      .labelXXX;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump labelXXX;
    }
    @set_cursor cursor center;
    l = lines2-->i;
    if (l ~= 0) {
        print (string) l;
    }
    ++cursor;
    ++i;
    if (i ~= lines) jump labelXXX;
    @set_cursor cursor columns;
    generic_globvar = margin + 4;
    if (generic_globvar >= 1) {
      .labelXXX;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump labelXXX;
    }
    @buffer_mode true;
    style roman;
    @set_window 0;
    @split_window 1;
    @output_stream 65535;
    print "[ ";
    i = 0;
  .labelXXX;
    columns = lines2-->i;
    if (columns ~= 0) {
        print (string) columns;
    }
    ++i;
    if (i == lines) {
        print "]^^";
    } else {
        print "^  ";
        jump labelXXX;
    }
    @output_stream 1;
    rtrue;
];


