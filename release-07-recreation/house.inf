Global WeedkillerX;
Global WeedkillerY;

Constant XXXX 49;
Constant c___ 48;

Global Mouse_x;
Global Mouse_y;

Array garden_array -> 
    XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX 
    c___ c___ c___ c___ c___ XXXX c___ c___ XXXX 
    XXXX XXXX c___ XXXX c___ c___ XXXX c___ XXXX 
    XXXX c___ c___ c___ XXXX c___ c___ c___ XXXX 
    XXXX XXXX c___ XXXX XXXX XXXX XXXX XXXX XXXX 
    XXXX c___ c___ c___ c___ c___ XXXX c___ XXXX
    XXXX XXXX XXXX XXXX c___ XXXX XXXX XXXX XXXX;

Array mouse_maze -> 
    XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX 
    XXXX XXXX XXXX c___ c___ XXXX c___ c___ XXXX
    XXXX XXXX XXXX XXXX c___ c___ XXXX c___ XXXX
    XXXX XXXX XXXX XXXX XXXX c___ c___ c___ c___
    XXXX XXXX XXXX XXXX c___ c___ XXXX XXXX XXXX
    XXXX XXXX XXXX XXXX XXXX c___ c___ XXXX XXXX
    XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX;

[ OneTimeBonusScore ;
    if (Old_Winery has general) {
        rtrue;
    }
    give Old_Winery general;
    StartTimer(Old_Winery,4);   ! not popped
    score = score + 5;
    good_try_bonus = true;
    "^A shame to see such a good try unrewarded... oh, go on, have an extra five points.";
];

Object  Attic "Attic"
  with  name 'beams' 'wiring' 'floor' 'floorboard',
        description "The attics, full of low beams and awkward angles, 
            begin here in a relatively tidy area which extends north,
            south and east. The wooden floorboards seem fairly sound, just
            as well considering how heavy all these teachests are. But the
            old wiring went years ago, and there's no electric light.",
        n_to  Old_Winery,
        s_to  Old_Furniture,
        e_to  Servants_Room,
        d_to  hinged_trapdoor,
  has   ;

Object  -> hinged_trapdoor "hinged trapdoor"
  with  name 'hinged' 'trap' 'door' 'trapdoor',
        when_open "A hinged trapdoor in the floor stands open, and 
            light streams in from below.",
        after [;
            Open: 
                give self light;
                rfalse;
            Close:
                give self ~light;
                give antique_jewellery_box ~concealed;
                "You close the trapdoor, surprised to see that something 
                    shiny was obscured by it.";
        ],
        door_dir d_to,
        door_to House,
        when_closed "There is a closed trapdoor in the middle of the floor.",
  has   light door open openable static;

Object  -> teachests "teachests"
  with  name 'tea' 'chests' 'teachests',
        description "Open-topped. You could easily look inside, 
         if so minded.",
        before [;
            Search:
                print "That was the first place you tried, hours and hours ago now";
                if( Meldrews_History has concealed ) {
                    print ", and there's nothing there but that boring old book. 
                        You pick it up anyway, bored as you are";
                    give Meldrews_History ~concealed;
                    move Meldrews_History to player;
                }
                ".";
        ],
        article "some",
  has   container open scenery pluralname;

Object -> -> Meldrews_History "History of the Meldrews (vol. II)"
  with  name 'book' 'history',
        description "It was to have been the Honourable Peter 
          Meldrew's life's work, a two-volume edition giving the
          definitive family history. Unfortunately, although he
          claimed to have hunted for evidence to the ends of the
          earth, he never could find a detail he wanted for volume
          I, and it was never published. Somehow, this typifies
          your family, and consulting this worthy book about your
          ancestors makes you realise what an uncanny knack they
          had for never quite achieving anything.^^Unless, of
          course, you count having an awful lot of children. So
          many Meldrews are listed here that you'll have to look
          them up individually.",
        article "the",
        devil_hint "What a boring old book!  There's nobody worth looking up.",
        before [ word word2;
            Consult:
                wn = consult_from;
                word = NextWord();
                word2 = NextWord();
                if( word == 'me' || word == 'myself' || word == 'self' )
                    "^Perhaps you may one day earn a place in vol. III.";
                switch( word ) {
                    'joshua':
                        "^Oh dear, the deeply regrettable Sir Joshua Meldrewe (1710-1776). 
                         Member of the Dilletanti Society and the
                         Hell-Fire Club, and a politician (chancellor
                         of the exchequer 1762-3; ~probably the least
                         competent minister ever to hold that office~ -
                         Oxford History of England, vol. xii).^^", "His
                         father disinherited him for wildly excessive
                         living (he almost invariably wore jewelled
                         buttons worth at least a thousand pounds)
                         and for marrying a lady of easy virtue while
                         on the run from a prison in France, where
                         he was sentenced to be beheaded. In order to
                         stop his sister getting the fortune, he went
                         back to Italy and advertised for a pregnant
                         bride to provide a male heir. This nefarious
                         plot was foiled when he choked to death on a
                         chicken-bone.^^It is said that he stole the
                         money anyway near the end, and certainly some
                         gold went missing. (He also managed to get the
                         family stripped of its baronetcy by cheating
                         at bridge with the Prince of Wales.)";
                    'alison':
                        "^Under the pseudonym Marie Swelldon, your ancestress 
                         Alison (1871-1930) wrote several mildly
                         successful romances. She obsessively collected
                         lucky charms, and advertised in newspapers for
                         double-headed coins and the like (although she
                         never traced a rumoured find of a five-leafed
                         clover, somewhere in County Donegall).^^In
                         order to write in tranquillity and to avoid her
                         husband, it was she who installed the fake wall
                         at the far south end of the attic east wing,
                         and each afternoon she would sneak upstairs to
                         push it aside.";
                    'capability':
                        "^~Capability~ Meldrew (1761-1817) became a mildly 
                         celebrated landscape gardener, starting a
                         brief fashion for crypts and memorials as
                         garden ornaments (he claimed it was closer
                         to nature). Very little of his work now
                         survives. His real name, incidentally, was
                         Willard.";
                    'roger':
                        "^Roger (1846-1913), the elder of a pair of twins, 
                         was very Victorian indeed, especially in his
                         disapproval of his beautiful young wife's
                         literary career. He thought her romances so
                         immoral that he refused to allow the family name
                         to appear on them. A prominent local vestryman,
                         his own writing was confined to a great many
                         monographs on the problems of municipal drainage,
                         but he died before his grand National Sewerage
                         Plan was complete.";
                    'ebenezer':
                        "^It seems Ebenezer (1846-1908), the younger of 
                         a pair of twins, threw up a promising career in
                         the East India Company one day, took a packet
                         steamer to Cape Colony and simply marched off
                         into the bush on a quest to find a legendary
                         river. His maps were used for several years
                         after, and a province was named after him
                         for a while, but the locals call it something
                         else now.";
                    'isaac':
                        "^Mad Isaac (1705-1792) went in for mystic 
                         experiments of all kinds, and was a noted
                         antiquarian. He believed that the Meldrew family
                         had an ancestral curse, dooming each member to
                         undertake a futile quest. The only way to break
                         the curse, he thought, was for one of them to
                         actually succeed... unfortunately he died in
                         peculiar circumstances before finding out how.^",
                         "^Then again, he also believed that King Arthur's
                         wizard Merlin was buried not in a Tintagel cave,
                         as is usually claimed, but somewhere in the
                         back garden (near where the motorway is now),
                         and that the moon is a giant pair of black and
                         white discs towed through the night sky by a
                         team of angels.";
                    'jemima': "^She's far too recent to be included.";
                    'peter': "^Modestly, the author (died 1940 or so?) missed himself out.";

                }
                "^Annoyingly there's no index (there was going to be a 
                 consolidated one in vol. I) and you can't find what you want.";
        ],
  has   concealed proper;

Object  -> antique_jewellery_box "antique jewellery box"
  with  name 'antique' 'jewellery' 'box',
        description "A graceful lady's box, bearing the initials A. M. 
            and engraved with a drawing of what seems to be a rabbit's foot.",
        article "an",
        initial "In one corner is a jewellery box, which had previously 
            been hidden by the open trapdoor.",
        with_key delicate_gold_key,
        angel_hint "Try investigating the world of the romantic novel, 
            out on the balconies of life.",
  has   concealed container transparent openable lockable locked;

Object -> -> four_leafed_clover "four-leafed clover"
  with  name 'four' 'leafed' 'clover',
        description "The fabulously lucky plant has a long stalk.",
        rod_assoc rod_of_luck,
        angel_hint "Not much use as it is, is it?",
  has   hidden_rod;

Rod     rod_of_luck "Rod of Luck"    ! 20 / 0x14
  with  name 'rod' 'of' 'luck',
        rod_action [;
            if( second ~= player )
                "Nothing obvious happens.";
            if( big_electricians_switch has on )
                "You feel no different. Perhaps there's no such thing as luck.";
            give rod_of_luck general;
            "You feel optimistic and lucky. Mind you, you feel that most times.";
        ],
        angel_hint "Well, if there's such a thing as luck, maybe this would help.",
;

Object  House "House"
  with  after [ obj;
            obj = tourist_map_of_Paris;
            obj = parent(obj);
            if( obj == player ) {
                deadflag = WON;
                "You have succeeded in shaking off the Curse of the Meldrews: 
                 for the first time in sixty generations, a Meldrew
                 has found the useless object he was doomed to seek!
                 Unfortunately on the way to the airport you realise that
                 you left the map on the kitchen table in all the rush,
                 but never mind, you're on holiday now.";
            }
            deadflag = FAILED;
            "Yes, probably just as well to give up looking, and heaven knows 
             there's enough packing to do, what with the rest of the
             family in uproar. Oh well.";
        ],
  has   light;

Object  Old_Winery "Old Winery"
  with  name 'banister' 'rail' 'crack' 'paraph',
        description "This small cavity at the north end of the attic once 
            housed all manner of home-made wine paraphernalia, now
            lost and unlamented. Steps, provided with a good strong
            banister rail, lead down and to the west, and the banister
            rail continues along a passage east.",
        each_turn [;
            if( self has general )
                rfalse;
            print "^As you disturb the still air, the attic key, which was 
                balanced on top of the demijohn, slips onto the floor and
                disappears into a crack in the floorboards. Your spirits
                sink as it does, rattling down some distance. How on
                earth are you going to get it back?^";
            give Old_Winery general;
        ],
        s_to Attic,
        e_to Storage_Room,
        w_to Conservatory,
        d_to Conservatory,
        time_left 0,
        time_out [;
            good_try_bonus = false;
            score = score - 5;
            "^Sorry. Thinking about it again, the score only gets in a muddle this way, 
             so the bonus points had better go after all.";
        ],
  has   ;

Object  -> demijohn "labelled glass demijohn"
  with  name 'demijohn' 'glass' 'bottle' 'label',
            description "Faded ink on the label reads: Elderberry '63.",
        before [;
            Open:
                if( old_gardeners__gloves hasnt worn )
                    "Your hands slip on the screw-top of the demijohn and 
                     can't get a grip.";
                rfalse;
        ],
        after [;
            Open: 
                Achieved(SCORE_DEMIJOHN);
                rfalse;
        ],
  has   container openable static transparent;

Object  -> -> nasty_battery "nasty-looking red battery"
  with  name 'nasty' 'red' 'battery',
        description "On the side is the word ~Achtung~.",
        devil_hint "It's provided for your torch, and not for anything else.",
  has   ;

Object  -> -> tourist_map "tourist map"
  with  name 'hamburg' 'tourist' 'map',
        description "The good news is that it has excellent grid references, 
            which are easy to look up. The bad news is that it is a map of 
            central Hamburg.",
        before [ wn word addr;
            Consult:
                wn = consult_from;
                word = NextWord();
                addr = TryNumber(wn);
                if( addr == 1420 ) {
                    print "^At that exact grid reference is Meldreustrasse, a 
                        minor back street which houses a museum of
                        arcana.^^Suddenly you remember!  You visited the
                        place once, and the curator Doktor Stein showed
                        you round... and he hypnotised you into a swirl
                        of unconsciousness...^^";
                    StartTimer(Museum_of_Arcana, 6);
                    move self to location;
                    game_section = HAMBURG;
                    PlayerTo(Museum_of_Arcana, 2);
                    rtrue;
                }
                "Just some anonymous streets. The detail of this map is so tiny that 
                 unless you have the exact four-digit grid reference for what you
                 want, you'll never find it.";
        ],
        devil_hint "Purely decorative.",
  has   ;

Object  Conservatory "Aunt Jemima's Lair"
  with  description [;
            print "This used to be called the Conservatory, before Aunt Jemima took it over to potter about with plants, painting and indeed (on occasion) pottery. She has filled the place with objets trouves and bric-a-brac, and hung up a home-made calendar of watercolours. Even the old airing cupboard to the south is cluttered.^^An open doorway leads back southwest onto the upstairs landing, and you can hear the chaotic noise of suitcases being manhandled about - good thing nobody's seen you. A narrow staircase leads up and to the east into the attic.^^Jemima herself seems to be in the potting room to the west.^";
            if( antiquated_wireless in Conservatory && antiquated_wireless has general )
                "^Execrable music drifts in from the conservatory.^";
            rtrue;
        ],
        s_to Airing_Cupboard,
        e_to Old_Winery,
        w_to Potting_Room,
        sw_to House,
        u_to Old_Winery,
  has   light;

Object  -> calendar "calendar"
  with  name 'calendar' 'page' 'pages',
        before [ i;
            i = self.number;
            Examine:
                switch( i ) {
                    1: print "January";
                    2: print "February";
                    3: print "March";
                    4: print "April";
                    5: print "May";
                    6: print "June";
                    7: print "July";
                    8: print "August";
                    9: print "September";
                   10: print "October";
                   11: print "November";
                   12: print "December";
                }
                print " and a watercolour painting of some ";
                DescFlower(i);
                " daisies.";
            Turn:
                i++;
                if( i == 12 )
                    i = 0;
                self.number = i;
                Achieved(SCORE_CALENDAR);
                print "You turn over to ";
                << Examine self >>;
        ],
        number 5,
  has   scenery;

Object  Airing_Cupboard "Airing Cupboard"
  with  name 'coffee' 'mugs' 'sculpture' 'racks',
        description "A space about six feet square. The old drying racks 
            now contain odd ceramic sculptures almost but not quite
            unrecognisable as coffee mugs. One corner is filled with an
            enormous pile of tie-dyed sheets, from Aunt Jemima's infamous
            Sixties Revival period of last October.",
        n_to Conservatory,
        cant_go "The only way to go from here is back north.",
  has   light;

Object  -> pile_of_sheets "pile of sheets"
  with  name 'pile' 'of' 'sheets',
        before [;
            Search:
                if( antiquated_wireless has concealed ) {
                    give antiquated_wireless ~concealed;
                    Achieved(SCORE_WIRELESS); 
                    "Not as many sheets as you thought - they were on top of a large black 
                     wireless, now exposed to the light for the first time in months.";
                }
                "No, you're only getting your hands stained looking.";
        ],
  has   scenery pluralname;

Object  -> antiquated_wireless "antiquated wireless"
  with  name 'switch' 'cabinet' 'radio' 'wireless',
        description "It rolls on casters, and has a bakelite on/off switch.",
        article "an",
        initial "To one side is a heavy cabinet on casters containing an 
            antiquated wireless, the kind with glowing valves inside. On
            the top is a bakelite on-off switch.",
        before [;
            Push: "It moves easily on the casters.";
            PushDir:
                if( location == Airing_Cupboard || (location == Conservatory && second == s_obj) ) {
                    print "It moves easily on the casters.^";

                    AllowPushDir();
                    rtrue;
                }
                if( location == Conservatory ) {
                    if( second == e_obj )
                        "Not upstairs you can't.";
                    if( second == w_obj ) {
                        deadflag = FAILED;
                        "Aunt Jemima spends the next four hours explaining to you exactly 
                         why she put the radio into storage. The reason
                         is awfully convoluted and due to her firm
                         conviction that magnetic fields influence the
                         growth of plants. By that time you have to
                         leave for the airport...";
                    }
                }
                rfalse;
            Take: "It's too heavy to lift off the casters.";
        ],
        after [;
            SwitchOn:
                StartTimer(self, 5);
                "Nothing happens.";
            SwitchOff:
                ! Bug here: needs StopTimer
                give self ~general;
                "Thank heaven for that.";
        ],
        time_left 0,
        time_out [ env;
            give antiquated_wireless general;
            env = parent(self);
            if( location == env )
                "^The radio valves glow, and execrable so-called easy 
                    listening music fills the air with a sort of bland
                    aural candy-floss.^";
            if( location == Potting_Room && env == Conservatory )
                print "^Execrable music begins to sound from the conservatory, 
                    and Aunt Jemima hums vacantly.^";
        ],
        describe "To one side is a heavy cabinet on casters containing an 
            antiquated wireless, the kind with valves inside. On the
            top is a bakelite on-off switch.",
        each_turn [;
            if( location ~= parent(self) || self hasnt general )
                rfalse;
            print "^The radio plays a ";
            switch( random(10) ) {
                1: print "synthesized";
                2: print "light orchestra";
                3: print "choral";
                4: print "snare drum and strings";
                5: print "country-and-western";
                6: print "one-finger piano";
                7: print "Welsh coal-miners' Eisteddfod choir";
                8: print "Hammond organ";
                9: "easy-listening";
                10: "~lite-n-mellow~";
            }
            switch( random(5) ) {
                1: print " version of ";
                2: print " rendition of ";
                3: print " travesty of ";
                4: print " arrangement of ";
                5: print " transcription of ";
            }
            switch( random(70) ) {
                 1: "Queen's ~I Want To Break Free~.";
                 2: "Bach's ~Air on a G-string~.";
                 3: "Mozart's ~Musical Joke~.";
                 4: "Stockhausen's ~Piano Pieces I-IX~.";
                 5: "Beethoven's ~Moonlight Sonata~.";
                 6: "Summer from Vivaldi's ~Four Seasons~.";
                 7: "the especially slow movement of Gorecki's ~Symphony no. 3~.";
                 8: "Spandau Ballet's ~Gold~.";
                 9: "Duran Duran's ~Is There Something I Should Know?~.";
                10: "Derek and the Dominos' ~Layla~.";
                11: "Don Maclean's ~American Pie~.";
                12: "Chopin's ~Nocturne no. 1~.";
                13: "something by Jean-Michel Jarre.";
                14: "the Beatles' ~Yellow Submarine~.";
                15: "the Beatles' ~She Loves You~.";
                16: "the Beatles' ~Hey Jude~.";
                17: "the Beatles' ~Lucy in the Sky with Diamonds~.";
                18: "Queen's ~Bohemian Rhapsody~.";
                19: "the Beatles' ~Magical Mystery Tour~.";
                20: "the Beatles' ~I Am The Walrus~.";
                21: "Bill Haley's ~Rock Around the Clock~.";
                22: "the old Elvis Presley number ~Jailhouse Rock~.";
                23: "the old Elvis Presley number ~Blue Suede Shoes~.";
                24: "ELO's ~Mr Blue Sky~.";
                25: "Sky's arrangement of Bach's Toccata in D minor for organ.";
                26: "ABC's ~The Look of Love~.";
                27: "the Beach Boys' ~Californian Girls~.";
                28: "the Stranglers' ~Golden Brown~.";
                29: "Genesis' ~That's All~.";
                30: "Grieg's piano concerto.";
                31: "Bruce Springsteen's ~Born in the USA~.";
                32: "Beethoven's Symphony no. 5.";
                33: "Beethoven's ~Emperor~ piano concerto.";
                34: "Mozart's ~Elvira Madigan~ concerto.";
                35: "Bach's Brandenburg Concerto no. 5.";
                36: "Deep Purple's ~Smoke On The Water~.";
                37: "Faure's Requiem.";
                38: "Tchaikovsky's ~1812 Overture~.";
                39: "the Dying Swan from Saint-Saens' ~Carnival of the Animals~.";
                40: "the ~O Fortuna~ from Carl Orff's ~Carmina Burana~.";
                41: "Led Zeppelin's ~Stairway to Heaven~.";
                42: "the Bugs Bunny theme tune.";
                43: "Strauss' ~Blue Danube~ waltz.";
                44: "the Star Wars theme tune.";
                45: "the Star Trek theme tune.";
                46: "the Dallas theme tune.";
                47: "Wagner's ~Ride of the Valkyries~ overture.";
                48: "Dire Straits' ~Money For Nothing~.";
                49: "Dire Straits' ~Brothers In Arms~.";
                50: "Dire Straits' ~Tunnel Of Love~.";
                51: "Wham's ~Wake Me Up Before You Go-Go~.";
                52: "something abysmal by Leo Sayer.";
                53: "Lionel Richie's ~Hello~.";
                54: "Hot Chocolate's ~Happy Birthday~.";
                55: "Abba's ~Mama Mia~.";
                56: "Abba's ~Knowing Me, Knowing You~.";
                57: "Barry Manilow's ~I Write The Songs~.";
                58: "Ian Dury and the Blockheads' ~Hit Me With Your Rhythm Stick~.";
                59: "Ravel's ~Bolero~.";
                60: "~Nessun Dorma~, as sung simultaneously by Pavarotti, Carreras and Dolly Parton.";
                61: "Michael Jackson's ~Thriller~.";
                62: "Michael Jackson's ~Billy Jean~.";
                63: "Michael Jackson's ~Beat It~.";
                64: "Kylie Minogue's ~I Should Be So Lucky~.";
                65: "the Eurovision Song Contest's finest five minutes, ~Diggy-Loo Diggy-Lay (Life Is Going My Way)~.";
                66: "Dexy's Midnight Runners' ~Come on Eileen~.";
                67: "Steppenwolf's ~Born to be Wild~.";
                68: "John Cage's tuneful ~Four minutes and thirty-three seconds~.";
                69: "Toto's ~The Eye of the Tiger~.";
                70: "Cindi Lauper's ~Girls Just Wanna Have Fun~.";
            }
        ],
        number 0,
  has   concealed static switchable;

Object  Potting_Room "Potting Room"
  with  name 'plants' 'flower' 'seeds' 'trowel',
        description "This light room is full of pot plants, flowers, seeds, 
            ornamental trowels and other miscellaneous garden implements.",
        after [;
            Look:
                if( antiquated_wireless has general && antiquated_wireless in Conservatory )
                    print "^Execrable music drifts in from the conservatory.^";
                rfalse;
        ],
        e_to Conservatory,
        cant_go "The only exit is back east to the conservatory.",
  has   light;

Object  -> old_gardeners__gloves "old gardeners' gloves"
  with  name 'garden' 'gloves',
        article "some",
        initial "A pair of yellow rubber gloves hangs from a hook on one wall.",
        before [;
            Take:
                if( self has moved || antiquated_wireless has general )
                    rfalse;
                deadflag = FAILED;
                "Aunt Jemima suddenly hears you, spins round to see you 
                 filching her gloves and screeches with irritation, 
                 eventually summoning the entire family. You volunteer to
                 shift some suitcases about just to get away from her.";
        ],

        devil_hint "Good for nothing. Why would you want gloves on?",
  has   clothing scored;

Object  -> Jemima "Jemima"
  with  name 'aunt' 'jemima',
        description "She's been fiddling about with those cut flowers all 
            afternoon. And she's a bit upset at being left alone in the
            house while you're off on holiday, so best not to get on
            her bad side. You really ought to make it up to her somehow.",
        article "Aunt",
        initial "Aunt Jemima, who has for years collected varieties of daisy, 
            is engaged in her regular annual pastime of deciding which
            species make the best chains.",
        time_left 0,
        time_out [;
            move daisy_chain to self;
        ],
        each_turn [;
            if( daisy_chain in self && location == Potting_Room ) {
                move daisy_chain to player;
                give daisy_chain worn;
                "^~There we are!  All done now.~  Jemima hangs a daisy chain 
                 around your neck, then frowns and adjusts your hair in an 
                 exceedingly annoying way.^";
            }
        ],
        life [ c;
            Give:
                if( noun == box_of_chocolates ) {
                    remove box_of_chocolates;
                    Achieved(SCORE_CHOCOLATE);
                    give self general;
                    "Aunt Jemima pounces on the chocolates, wolfs down a strawberry cream and 
                     persuades you to have an unappetising toffee
                     cracknell. ~Now~, she says, ~Your turn for a daisy
                     chain!~^^You try to look pleased.^^~Let's see,
                     the others have had theirs... I have only a few
                     colours left. What would you like?~";
                }
                print "A peace offering is a nice idea, but somehow ", (the) noun;
                if( noun == gift_wrapped_parcel ) {
                    print " lacks style... after all, it isn't Christmas.^";
                    OneTimeBonusScore();
                    rtrue;
                }
                " seems inappropriate.";
            Kiss:
                print "She is slightly mollified, but only slightly.^";
                OneTimeBonusScore();
                rtrue;
            Attack:
                "Well, she's annoying, but that's family for you.";
            ThrowAt:
                "Well, quite. Best to just grit your teeth and put up with her though.";
            Answer:
                if( gas_mask has worn )
                    "Not through a gas mask you can't.";
                if( self hasnt general )
                    "She pretends not to have heard, a favourite ploy of hers when sulking.";
                give self ~general;
                c = 0;
                switch( noun ) {
                    'yellow': c = 1;
                    'blue': c = 2;
                    'red': c = 3;
                    'white': c = 4;
                    'green': c = 5;
                    'orange': c = 6;
                }
                if( c == 0 ) {
                    c = 5;
                    print "~Nothing like that left. Just plain old daisies for you then dear!~^^";
                } else
                    print "~Right you are then, I'm sure I have some which are just right.~^^";
                StartTimer(self, 10);
                daisy_chain.number = c;
                "After a moment she notices you're still here. ~Come back later, 
                 it'll be done soon.~ You groan inwardly but force a
                 sickly smile. Should have eaten the chocolates myself,
                 you find yourself thinking.";
        ],
  has   animate proper;

[ DescFlower n;
    switch( n ) {
         1: print "speckled Jemima's Pride";
         2: print "yellowish Merlyn's Hat";
         3: print "blue-tinted bell";
         4: print "heavy-headed Dorset Pride";
         5: print "reddish meadow-heart";
         6: print "wild white common";
         7: print "green-edged hedgerow";
         8: print "plain Russian Steppe";
         9: print "tall-stemmed Breton";
        10: print "orange meadow";
        11: print "short-leaved Meldrew";
        12: print "tiny bonsai";
    }
];
Object daisy_chain "daisy chain"
  with  name 'daisy' 'chain' 'daisychain',
        before [ n;
            Examine:
                n = self.number;
                print_ret "A delicate, pretty chain of ", DescFlower(self), 
                    " daisies.";
            Drop:
                remove self;
                "The daisychain falls to pieces in your hands!";
        ],
        number 11,
        devil_hint "Dangerous to wear. But at least any sort of daisies will 
            do.",
        short_name [ o i;
            if( self hasnt worn )
                rfalse;
            i = false;
            objectloop( o in player )
                if( o has hidden_rod )
                    i = true;
            print "daisy chain";
            if( i )
                print " (which rustles as if with a magical wind)";
            rtrue;
        ],
  has   clothing;


Object crumpled_piece_of_paper "crumpled piece of paper"
  with  name 'crumpled' 'paper',
        description "   Things to do:^   1. Find map^   2. Phone airport to 
            check parking^   3. Health forms...^and so on. Let's face it, 
            1. is more enticing than the rest put together.",
        devil_hint "Immensely useful, that.",
  has   moved;

Object electric_torch "electric torch"
  with  name 'electric' 'torch' 'compartment',
        description "The torch has a battery compartment which can be 
            reached by opening it up.",
        article "an",
        before [;
            SwitchOn, SwitchOff: "There's no switch, just a battery compartment.";
            Receive:
                if( child(self) )
                    "There's a battery in already.";
                if( noun ~= new_battery && noun ~= old_smudged_battery && noun ~= nasty_battery )
                    "Not surprisingly, it won't fit in the battery compartment.";
                rfalse;
        ],
        after [ o n;
            o = child(self);
            Open:
                give electric_torch ~light;
                if( o == old_smudged_battery )
                    StopDaemon(o);
                if( self has light ) 
                    "The torch goes out as you open the battery compartment.^";
                if (electric_torch hasnt light)
                    "You open the battery compartment of the torch.^";
            Close:
                print "You close the battery compartment of the torch";
                if( o == new_battery )
                    Achieved(SCORE_TORCH);
                else { 
                    if( o == nasty_battery ) {
                        deadflag = FAILED;
                        ", and it explodes with light, becomes hot enough to melt, 
                         falls to the floor, catches fire and burns down
                         most of the attic...^^It may be some consolation
                         that since you spend your holiday in the local
                         hospital burns unit, you are never inconvenienced
                         much by not finding the map.";
                    }
                    if( o ~= old_smudged_battery )
                        rfalse;
                }
                n = o.time_left;
                if( n == 0 )
                    ", but the battery must be dead because nothing happens.";
                if( o == old_smudged_battery )
                    StartDaemon(o);
                give electric_torch light;
                if( n > 5 )
                    ", and it lights up brightly.";
                ", and it lights up feebly.";
        ],
        devil_hint "Pity you can't change the batteries.",
  has   light moved container openable;

Object -> old_smudged_battery "old smudged battery"
  with  name 'old' 'smudge' 'battery',
        article "an",
        time_left 200,
        daemon [ i;
            if( parent(self) ~= electric_torch )
                rfalse;
            i = self.time_left;
            if( i == 0 ) {
                StopDaemon(self);
                rfalse;
            }
            i--;
            if( i == 2 )
                "^The torch flickers ominously.";
            if( i == 0 ) {
                give electric_torch ~light;
                "^The torch finally dies out.";
            }
        ],
  has   ;

Object chocolate_biscuit "chocolate biscuit"
  with  name 'chocolate' 'biscuit',
        description "Oatmeal covered with plain chocolate, since you ask.",
        devil_hint "I bet you didn't know that chocolate biscuit manufacturers
            are damned in perpetuity?  I'm afraid the chapters about that
            in the Old Testaments were lost, though, and now no-one can
            remember why.",
        after [;
            Eat: Achieved(SCORE_BISCUIT); rfalse;
        ],
  has   moved edible;

Object Servants_Room "Servant's Room"
  with  description "Once upon a time, servants in great houses lived in 
            awful little crevices and excuses for rooms like this
            one. They must have been in permanent danger of suffocation,
            for there are no windows and only a doorway to the west. A bed
            is still kept here, and the sight of it brings on drowsiness
            in all this warm stuffy air. All you want to do is curl up
            and sleep.",
        before [;
            Sleep:
                if( parent(player) ~= servants_bed )
                    rfalse;
                if( servants_bed has general )
                    "You doze awhile, but that's all.";
                print "You sleep unexpectedly deeply, but just as you think you 
                    are starting to wake up, you experience a sudden...^";
                give servants_bed general;
                while( child(player) )
                    move child(player) to temp_location;
                game_section = DREAMING;
                PlayerTo(Premonition, 2);
                rtrue;
        ],
        w_to Attic,
  has   ;

Object  -> servants_bed "servant's bed"
  with  name 'servant' 'bed',
  has   open enterable scenery supporter;

Object  -> old_striped_scarf "old striped scarf"
  with  name 'old' 'scarf',
        description "Made by Dunn and Co., naturally, with four stripes: royal blue, 
            emerald, dark grey and scarlet.",
        article "an",
        initial "An old striped scarf is hung up behind the doorway.",
        devil_hint "The very height of fashion, if you ignore the colours and wear it regardless.",
  has   clothing;

Object  -> temp_location ""
  has   concealed scenery;      ! My addition for moving things when sleeping in the bed

Object  Old_Furniture "Old Furniture"
  with  name 'armchair' 'umbrella' 'table',
        description "Scruffy old furniture is piled up here: armchairs with 
            springs coming out, umbrella stands, a badly scratched
            cupboard, a table with one leg missing... You try to remember
            why you keep all this rubbish, and fail. Anyway the attic
            continues to the southeast.",
        n_to Attic,
        se_to Over_the_East_Wing,
  has   ;

Object  -> furniture "furniture"
  with  name 'furniture',
        description "Nothing there, but that cupboard looks interesting.",
  has   scenery;

Object  -> scratched_cupboard "scratched cupboard"
  with  name 'scratch' 'cupboard',
  has   container transparent open openable scenery;

Object  -> -> gift_wrapped_parcel "gift-wrapped parcel"
  with  name 'gift' 'parcel',
        before [;
            Open:
                remove self;
                move postcard to player;
                move box_of_chocolates to player; 
                move wrapping_paper to player;
                "You tear open the parcel to find a box of chocolates and a card.";
        ],
        devil_hint "Shame the wrapping paper won't come off.",
  has   ;

Object  -> -> medicine_bottle "guaranteed-unbreakable medicine bottle with a child-proof lock" 
  with  name 'medicine' 'bottle',
        before [;
            Attack:
                "You become extremely violent in your attempt, but the glass resists all attacks. 
                    Whatever would it take to break the dratted thing?";
            Open:
                if( self hasnt locked ) rfalse;
                "You try absolutely everything. Pushing the top down, turning it, pulling it, 
                 putting it on the floor and jumping up and down on it, everything. It is resolutely 
                 adult-proof. Whatever would it take to break the dratted thing?";
        ],
        devil_hint "These bottles can even survive long drops, so perhaps you should try fire.",
  has   container openable locked;

Object  -> -> -> red_tablet "red tablet"
  with  name 'red' 'pill' 'tablet',
        after [;
            Eat:
                give player ~general;
                "It tastes alarmingly of chocolate.";
        ],
        devil_hint "This drug is for fun, it isn't an antidote. And it tastes gorgeous...",
  has   edible scored;

Object  Over_the_East_Wing "Over the East Wing"
  with  name 'steps',
        description "The air is dusty and warm, almost making you choke in this rather 
            empty area. The attic turns from northwest to east, and
            there is also a tight doorway leading west. A short flight
            of wooden steps leads down and to the south.",
        s_to Disused_Observatory,
        e_to East_Annexe,
        w_to Dark_Room,
        nw_to Old_Furniture,
        d_to Disused_Observatory,
  has   ;

Object Dark_Room "Dark Room"
  with  description [;
            print "This is a roughly-furnished photographer's dark room, used by your 
                grandfather years ago. There's nothing much here now, since
                you threw the chemicals out in case the children found them";
            if( self has light )
                print ".^^The room is filled with an eerie, reddish light. You feel 
                 gloomy and can't help thinking about aviation accident statistics";
            ".";
        ],
        e_to Over_the_East_Wing,
        cant_go "The only doorway is back east.",
  has   ;

Object  -> hanging_cord "hanging cord"
  with  name 'hanging' 'cord',
        description "It is attached to the ceiling.",
        initial "You bump your head on the cord hanging from the ceiling, for the umpteenth time.",
        before [;
            Pull:
                print "Click!  ";
            if( self has light ) {
                give Dark_Room ~light;
                "The lamp goes out.";
            }
            give Dark_Room light;
            "A developing lamp comes on, emitting an eerie red light.";
        ],
  has   static;

Object -> sepia_photograph "sepia photograph"
  with  name 'sepia' 'photo' 'photograph' 'roger',
        description "The photograph is one of the very early ones which looks 
            as if it was taken in the dark because the chemicals have
            gradually oxidised. The poor man in the frame (Mr Roger
            Meldrew, Esquire) looks as if he was propped up by a big
            clamp to hold him still for five minutes, and that's because
            he was.",
        article "the old",
        initial "Mounted on a plaque is an old sepia photograph of a man.",
  has   static;

Object  -> flash "photographer's flash"
  with  name 'photograph' 'flash' 'compartment',
        description "It has an openable compartment on the side to hold a battery and a timer mechanism.",
        initial "A rather more modern photographer's flash lies on a shelf to one side.",
        angel_hint "When you can get this working, perhaps you should take it somewhere prominent.",
        before [ a b;
            Receive:
                if( self hasnt open )
                    rfalse;
                a = child(self);
                if( a )
                    b = sibling(a);
                if( a * b ~= 0 )
                    "The flash is full already.";
                if( noun ~= new_battery && noun ~= old_smudged_battery && noun ~= nasty_battery && noun ~= timer_detonater )
                    "Only batteries and timers will fit in.";
                if( a == new_battery || a == old_smudged_battery || a == nasty_battery ) {
                    if( noun == timer_detonater )
                        rfalse;
                    "There is already a battery inside, and there's only room now for a timer.";
                }
                rfalse;
        ],
  has   container transparent openable;

Object  East_Annexe "East Annexe"
  with  name 'gap' 'tiles' 'roof',
        description "This tight annexe at the eastern end of the house is piled up 
            with old loft insulation rolls, left over from the last
            time the job was done (whenever that was). A gap between the
            tiles of the roof (which you really must mend before winter)
            lets a little natural light in, but the attics to the west
            and south are dark.",
        after [;
            if( old_smudged_battery.time_left > 3 ) {
                StopTimer(old_smudged_battery);
                StartTimer(old_smudged_battery, 3);
            }
            rfalse;
        ],
        n_to cupboard_door,
        s_to Dead_End,
        w_to Over_the_East_Wing,
  has   light;


Object  -> insulation_rolls "insulation rolls"
  with  name 'insulation' 'rolls' 'roll',
        article "some",
        before [;
            Search:
                if( old_gardeners__gloves hasnt worn ) ! potential bug if gloves have been moved (like shaft, ghost)
                    "A rash act. The itchy fibres of the insulation soon deter you.";
                if( new_battery in self ) {
                    move new_battery to East_Annexe;
                    Achieved(SCORE_BATTERY);
                    "You uncover a shiny new battery. It must have been dropped by 
                     accident when the loft insulation was being done.";
                }
                "Nothing else there, unfortunately.";
        ],
  has   scenery pluralname;

Object  -> -> new_battery "new-looking battery"
  with  name 'new' 'battery',
        time_left 200,
        devil_hint "That is a difficult puzzle, yes.",
  has   ;

Object  -> cupboard_door "cupboard door"
  with  name 'cupboard' 'door',
        when_open "In the north wall is an open cupboard door, large enough to step inside.",
        door_dir n_to,
        door_to Inside_Cupboard,
        when_closed "In the north wall is an intriguing closed cupboard door.",
        with_key small_brass_key,
  has   door openable static lockable;

Object Storage_Room "Storage Room"
  with  description "A disused storage room off the winery. In one wall is an opening 
            onto an ominous dark shaft, and beside it is a big
            Victorian-steam-engine style wheel with a handle on.",
        w_to Old_Winery,
        cant_go "The only doorway is back west to the winery.",
  has   ;

[ WheelBefore obj;
    if( action == ##Turn) {
        obj = parent(player);
        if( obj == dumbwaiter ) "If you could only reach the wheel from here...";
        if( noun has on ) "It won't turn. Perhaps it's broken, or perhaps only rusty.";
        print "It spins round smoothly, and the dumbwaiter is hoisted ";
        obj = dumbwaiter;
        obj = parent(obj);
        if( obj == location ) print "away out of sight.";
        if (obj ~= location)  print "into view.";
        if (obj == Storage_Room) move dumbwaiter to Cellars;
        if (obj == Dark_Shaft) move dumbwaiter to location;
        if (obj == Cellars) move dumbwaiter to Storage_Room;
        new_line;
        rtrue;
    }
    rfalse;
];

Object  -> wheel2 "wheel"
  with  name 'wheel' 'handle' 'catch' 'safety',
        description "There is a concealed safety catch (poorly) hidden on the wheel.",
        before WheelBefore,
  has   scenery switchable on;

Object  -> dumbwaiter "dumbwaiter"
  with  name 'dumb' 'waiter' 'dumbwaiter',
        article "the old",
        initial "Inside the dark shaft is the old dumbwaiter.",
  has   container open enterable static;

Object  -> -> pulley_ropes "pulley ropes"
  with  name 'pulley' 'rope' 'ropes',
        article "the",
        initial "The dumbwaiter hangs on strong pulley ropes which stretch up and down from here.",
        before [ env dst;
            Pull:
                env = parent(player);
                if( env ~= dumbwaiter ) "You can't reach them!";
                Achieved(SCORE_WAITER);
                if( location == Storage_Room ) {
                    dst = Cellars;
                    print "You begin moving, and then plummet, but friction gradually slows you down and 
                        you land without too much of a thump...^";
                }
                if( location == Dark_Shaft ) {
                    dst = Storage_Room;
                    print "You heave yourself up to the attic again...^";
                }
                if( location == Cellars ) {
                    dst = Dark_Shaft;
                    print "You heave yourself half-way up, and then need to stop for a rest.^";
                }
                env = dumbwaiter;
                remove env;
                move env to dst;
                location = dst;
                << Look >>;
            Climb:
                "If only you didn't suffer from such dreadful vertigo...";
        ],
  has   static;

Object  -> -> chicken_wishbone "chicken wishbone"
  with  name 'wish' 'bone' 'wishbone' 'chicken',
        description "The half which didn't get the wish, actually.",
        devil_hint "It isn't even mentioned in any of the books I've read.",
  has   ;

Object -> dark_shaft_obj2 "dark shaft"
  with  name 'shaft' 'dark',
        description "Uninviting.",
        after [;
            Receive:
                move noun to dumbwaiter;
                if( parent(dumbwaiter) == location )
                    "Put on the dumbwaiter.";
                if( noun == medicine_bottle ) {
                    give noun ~locked open;
                    "It disappears into the darkness, and there is a slight cracking noise.";
                }
                "It disappears into the darkness.";
        ],
        before [;
            Enter:
                if( dumbwaiter in location )
                    << Enter dumbwaiter >>;
                "But you suffer from vertigo. Even the thought of the plane journey tomorrow is nerve-wracking.";
        ],
  has   container transparent open scenery;

Object  Dead_End "Dead End"
  with  name 'soot' 'chimney' 'sweeping' 'gear',
        description "The winding attic comes to a dead end here, and 
            particularly dirty it is too, what with soot everywhere from
            the broken old chimney-sweeping gear.",
        n_to East_Annexe,
        s_to secret_door,
  has   ;

Object  -> canvas_rucksack "canvas rucksack"
  with  name 'canvas' 'rucksack' 'sack',
        description "On second thoughts, now you look at more closely, it seems to be the 
            rucksack you bought to go to Paris with five years ago.",
        initial "Great Scott!  That old canvas rucksack must be the very one your famous 
            ancestor, the African explorer Ebenezer Meldrew, brought back from the Zambeze Expedition of 1882!",
        devil_hint "It might be handy, if only it could carry anything.",
  has   clothing container transparent open openable;

Object -> secret_door "secret door"
  with  name 'secret' 'door',
        when_open "A secret door stands open in the south wall!",
        door_dir s_to,
        door_to Alisons_Writing_Room,
        when_closed "The secret door is closed.",
  has   concealed door open openable static;

Object  -> s_wall "south wall"
  with  name 's//' 'south' 'wall',
        before [;
            Push:
                if( location == Dead_End && secret_door has concealed ) {
                    give secret_door ~concealed;
                    Achieved(SCORE_SECRETDOOR);
                    "A secret door springs open!";
                }
                rfalse;
            Enter:
        ],
        description [;
            if( secret_door has concealed )
                rfalse;
            if( secret_door has open )
                "There is a secret door in it, standing open.";
            "There is a partly concealed secret door in it, which would be easy to open.";
        ],
  has   scenery;

Object  Inside_Cupboard "Inside Cupboard" 
  with  description "This is a surprisingly spacious cupboard, which you can't 
            recall ever visiting before today. You really ought to use
            this convenient empty room for something...",
        s_to East_Annexe,
        w_to big_iron_fireplace,
        u_to cranked_skylight,
  has   ;

Object  -> painting_of_Mad_Isaac_Meldrewe "painting of Mad Isaac Meldrewe" 
  with  name 'painting' 'of' 'mad' 'isaac',
        description "It used to hang in the downstairs landing, and the red, deranged eyes 
            annoyed everybody who passed. Then Aunt Jemima picked up the
            ridiculous idea that it was by Sir Joshua Reynolds and had
            it valued. Happily it wasn't and, to cut a long story long,
            it ended up here.",
        initial "A large painting of Mad Isaac Meldrewe, your eighteenth-century ancestor, is 
            propped up against the west wall.",
        after [;
            Take:
                if( big_iron_fireplace has concealed ) {
                    give big_iron_fireplace ~concealed;
                    "Taken. (There's a fireplace behind it, by the way.)";
                }
                rfalse;
        ],
        devil_hint "Carry this with you everywhere you go.",
  has   ;

Object  -> big_iron_fireplace "big iron fireplace"
  with  name 'iron' 'fireplace' 'chimney',
        initial "There is a big iron fireplace in the west wall.",
        door_dir w_to,
        door_to Chimney,
        after [;
            Receive:
                move noun to Priests_Hole;
                if( sooty_old_stick hasnt moved ) {
                    give sooty_old_stick moved;
                    move sooty_old_stick to Priests_Hole;
                }
                "It rattles out of sight down the chimney.";
        ],
  has   concealed door container open static;

Object  -> cranked_skylight "cranked skylight"
  with  name 'crank' 'skylight' 'handle',
        description "It was painted out black during the first wave of Zeppelin 
            air raids in World War One. This is completely irrelevant, but you did ask.",
        when_open "The skylight above is open, and the sky does indeed light the room.",
        before [;
            Turn:
                print "With a horrid creaking noise, the crank ";
                if( Inside_Cupboard has light ) {
                    give Inside_Cupboard ~light ~open;
                    "shuts down the skylight.";
                }
                give Inside_Cupboard light;
                give self open;
                "winds open the skylight, flooding the room with sunshine.";
            Close, Open: "How, exactly?";
        ],
        door_dir u_to,
        door_to Roof,
        when_closed "Above you is a blacked-out skylight with a crank handle.",
  has   door static;

Object  -> gas_mask "gas mask"
  with  name 'gas' 'mask' 'gasmask',
        after [;
            Wear: "After a brief ecstasy of fumbling, you pull it on. It smells unpleasantly of 
                World War II leftover cork.";
        ],
        react_before [;
            Answer: 
                if( self has worn )
                    "Not through a gas mask you can't.";
                rfalse;
        ],
        devil_hint "The cork filters have gone. It's useless now.",
  has   clothing;

Object  Roof "Roof"
  with  name 'roof' 'balcony',
        description "This is a recessed area of the roof, open to the skies but 
            screened from below. There used to be a flagpole here,
            but not any more. An open skylight leads down, and a fairly
            safe catwalk leads northwest. However, the red-tiled roof is
            vertiginous and you have vertigo, which makes it especially
            annoying that there's an odd little balcony too far away to
            the south.",
        nw_to Battlements,
        d_to Inside_Cupboard,
        cant_go "William Wordsworth once described poetry as emotion recollected in tranquillity. 
            If so, hospitals must be full of people turning out verses
            about what it was like to fall off the roof of a high
            building. Perhaps it might be better not to join them.",
  has   light;

Object  Battlements "Battlements"
  with  name 'battlements' 'crenellated',
        description "The old crenellated battlements of the house. An Englishman's home is, of 
            course, his castle, but Meldrew Hall never saw much
            fighting and these military-looking features were just a
            seventeenth-century fashion. They also weren't intended
            for standing on, and the only safe way to proceed is back
            southeast.^^It is peculiarly cold here.",
        se_to Roof,
        cant_go "The rooftop is far too dangerous in that direction.",
  has   light;

Object  -> iron_key "gothic-looking iron key"
  with  name 'gothic' 'iron' 'key',
        before [;
            Take:
                if( self has general )
                    rfalse;
                give Sir_Joshua_Meldrewe ~concealed;
                move self to Sir_Joshua_Meldrewe;
                Sir_Joshua_Meldrewe.number = 5;
                "As you reach for the key, a swirling mist condenses about it, into a ghostly 
                 head which opens its mouth and eats up the key!  The rest
                 of the ghostly body solidifies about the head and rises
                 to swagger before you.";
        ],
        devil_hint "Unfortunately, what you need this for is a very long way away.",
  has   scored;

Object  -> Sir_Joshua_Meldrewe "Sir Joshua Meldrewe"
  with  name 'ghost' 'sir' 'joshua',
        description "He is dressed in a grey shadow of Georgian finery.",
        number 5,
        life [;
            Attack: "Ectoplasm is as nice to touch as its reputation suggests.";
            Give, ThrowAt:
                ! bug compatable--this doesn't check if static, scenery, or the ghost itself!!
                remove noun;
                if( noun == chicken_wishbone ) {
                    move iron_key to Priests_Hole;
                    give iron_key general;
                    give self concealed;
                    Achieved(SCORE_JOSHUA);
                    "The ghost swallows the wishbone, grinning nastily. Then a 
                     look of consternation spreads across his face. He
                     begins to choke and as he fades away, his arms
                     flailing wildly, he lets go of the key, which sails
                     through the air onto the roof and (against all odds)
                     falls neatly down a chimney.";
                }
                print_ret "The ghost swallows ", (the) noun, " whole and grins!";
        ],
        each_turn [ ;
            if( self has concealed )
                rfalse;
            self.number--;
            switch( self.number ) {
                4: "^The ghost laughs in a gurgling kind of way, as it were 
                    always coughing and spluttering.";
                3: "^The ghost begins to speak:^^                       My 
                    hour is almost come^   When I to sulph'rous and tormenting 
                    flames^   Must render up myself...^^Can this possibly be 
                    the infamous Sir Joshua Meldrewe?";
                2: "^~But not yet it hasn't, mark my word. And there's the 
                    burden of my inheritance, little wart!  Get thee
                    from my sight ere I slice thee as befits a hog!~";
                1: "^~I prithee once more, begone!~";
                0: 
                    deadflag = FAILED;
                    "^The ghost swoops around and through you, making you scream 
                     with panic. Somehow you manage to run back to safety,
                     where your family (who never believe a word of it)
                     give you plenty of tea and occupy you with holiday
                     arrangements. As for you, you are so traumatised
                     that you never venture into the attic again.";
            }
        ],
  has   concealed animate proper;

Object  Chimney "Chimney"
  with  description "The chimney is cramped, sooty, unpleasant and has no floor to speak of, 
            so you are held up only by jamming your feet against the walls. To the east, through 
            the fireplace, is the cupboard.",
        before [ o;
            Go:
                if( noun == d_obj ) {
                    objectloop( o in player )
                        if( o hasnt worn )
                            "It's too narrow a squeeze for you at present.";
                    print "You squeeze awkwardly down the chimney. Lucky your best clothes are all packed, 
                        because you're getting filthy.^";
                    rfalse;
                }
            default: "There's not enough room in this confined space to do anything much!";
        ],
        e_to Inside_Cupboard,
        d_to Priests_Hole,
        cant_go "Not a chance!",
  has   ;

Object  -> sooty_old_stick "sooty old stick"
  with  name 'sooty' 'stick',
        initial "Wedged loosely in beside you is a sooty old stick.",
        rod_assoc rod_of_fire,
        devil_hint "It's exactly what it seems.",
  has   hidden_rod;

[ FireRodAction  ;
    if( second == player ) {
        deadflag = DIED;
        "Oh dear. Like Mad Isaac before you, you have spontaneously combusted!";
    }
    if( second has animate )
        "For heaven's sake, you're only looking for an out-of-date map. Murder does seem a little extreme.";
    if( second == wall_of_thorns_object ) {
        if( wall_of_thorns_object has open )
            "The wall wriggles in discomfort, but manages to avoid further devastation.";
        give wall_of_thorns_object open;
        "Fire leaps out from the rod into the heart of the thorn wall, which screams 
         out as it burns, revealing a great hole through the wild
         flames. You catch a tantalising glimpse of a great Temple, before
         the wall heals back. But it is unable to recover entirely,
         and a charred gap is left to the south. You could probably
         squeeze through it.";
    }
    if( second has scenery || second has static ) {
        deadflag = DIED;
        "You start a great conflagration, and then perish in it!";
    }
    
    if( second == medicine_bottle ) {
        OneTimeBonusScore();
        "The melting point of this glass is very high, and amazingly it withstands the bolt of fire.";
    }
    remove second;
    print "A bolt of fire leaps from the rod and consumes ", (the) second, " utterly!";
];

Rod     rod_of_fire "Rod of Fire"
  with  name 'rod' 'of' 'fire',
        rod_action FireRodAction,
        angel_hint "This is rather dangerous, I'm afraid. Use only on vegetative matter.",
;

Object  Priests_Hole "Priest's Hole"
  with  name 'cross' 'padded' 'chute' 'crawl',
        description "Good heavens, so the house has a priest hole after all!  It was always a 
            family legend but nobody seemed to know quite where it
            was. Apart from a cross painted on one wall and a padded
            floor (to absorb the noise), this spartan cranny is
            featureless. Nevertheless there is a spooky air of the
            supernatural about... A narrow crawl leads up into the
            chimney.",
        u_to [;
            if( child(player) )
                "It's too narrow a squeeze for you at present.";
            print "You squeeze awkwardly back up the chimney.^";
            return Chimney;
        ],
        d_to [;
            if( hatch has open )
                print "You zoom rapidly down the chute, but decelerate just in time and land in a dark corner of...^";
            return hatch;
        ],
  has   scored;

Object  -> hatch "hatch"
  with  name 'hatch' 'door',
        description "Perhaps the attic key might unlock it?  It does look modern compared to everything else here.",
        when_open "An open hatch-door in the floor reveals a chute leading down into darkness.",
        door_dir d_to,
        door_to Cellar_West,
        when_closed "Low down on one wall is little hatch door, which if it were open would be large enough to enter.",
        with_key small_brass_key,
  has   door openable static lockable locked;

Object  -> ancient_prayer_book "ancient prayer book"
  with  name 'diary' 'ancient' 'prayer' 'book',
        description "Despite appearances, this is not a prayer book after all but is Mad Isaac's 
            diary of supernatural investigations!  The script is cursive
            and cursory as he rambles on through all those theories
            about the Curse. There's so much of it that you'd better
            just look up particular years.",
        initial "The dust and grime on the floor almost obscures an ancient prayer book.",
        before [ wn word year;
            Consult:
                wn = consult_from;
                word = NextWord();
                year = TryNumber(wn);
                if( year < 1725 || year > 1792 )
                    "He didn't seem to be experimenting in those days.";
                if( year == 1792 )
                    "In 1792, the last year of his life, ol' red-eyes becomes
                     very excited about his new discovery. This time he
                     claims that Merlyn bounde uppe the mystic estate
                     (by this he means the back garden - Isaac never did
                     have any sense of proportion) wyth great Roddes of
                     Power. These are dangerous and sometimes useful for
                     themselves, but are really part of a great key... the
                     usual nonsense. Of course you never actually
                     see these rods, because they disguise themselves
                     until waved by someone wearing Merlyn's hat.^^",
                     "The funny thing is that Isaac died (legend has
                     it, by spontaneous combustion) only a week after
                     this breakthrough, preventing him from sending yet
                     another paper to the Royal Society. But since Merlyn
                     supposedly lived in about the sixth century A.D.,
                     there can't be a lot left of his hat, so the matter
                     may be academic.";
                print "In the year ", (number) year, ", Isaac was mainly concerned with ";
                switch( year % 6 ) {
                    0: "alchemy";
                    1: "caustical opticks.";
                    2: "concave mirrors.";
                    3: "the edibility of reptiles.";
                    4: "the spleens of flightless birds.";
                    5: "melting points of metals.";
                }
        ],
        devil_hint "The really good research was in his earlier years.",
  has   ;


Object Dark_Shaft "Dark Shaft"
  with  description [;
            print "Halfway up, or else halfway down, and a dreary place it is too: 
                nothing but a dark corridor leading north.";
            if( parent(dumbwaiter) ~= self ) {
                "^^Since the dumbwaiter isn't here, the best you can do is clamber 
                 down the shaft to the cellars.";
            }
            new_line;
            rtrue;
        ],
        before [;
            Go:
                if( noun == d_obj && parent(dumbwaiter) == self )
                    "Since the dumbwaiter is here, why not travel in that instead.";
                rfalse;
        ],
        n_to Dark_Passage,
        d_to Cellars,
  has   ;

Object Dark_Passage "Dark Passage"
  with  name 'coal' 'dust',
        description "A passage which slants very slightly down to the south, which is full of coal 
            dust, to which you are unfortunately allergic. Not somewhere to linger.",
        before [;
            if( gas_mask has worn )
                rfalse;   ! potential bug if gas mask not in possession of player
            Go: rfalse;
            default: "The coal dust makes you cough and splutter, and your eyes stream. You are unable to concentrate on doing anything here.";
        ],
        n_to metal_door,
        s_to Dark_Shaft,
        number 2,
  has   ;

Object -> metal_door "metal door"
  with  name 'metal' 'door',
        initial "At the north end is a metal door, standing open.",
        after [;
            Unlock: give coal_bunker ~locked;
            Lock: give coal_bunker locked;
            Open: give coal_bunker open;
            Close: give coal_bunker ~open;
        ],
        door_dir n_to,
        door_to [;
            game_section = GARDEN;
            print "Your eyes blink with the sunlight as you emerge.^";
            return Garden_Stream;
        ],
        describe "At the north end is a closed metal door.",
        with_key small_brass_key,
  has   door openable static lockable locked;

Object  Cellars "Cellars"
  with  description "Cobwebbed old cellars. There is nothing to see except an opening in 
            one wall onto a dark shaft, and a big Victorian-steam-engine
            style wheel beside it with a handle on. The cellar continues
            west and south.",
        s_to Cellars_South,
        w_to Cellar_West,
  has   ;

Object  -> wheel "wheel"
  with  name 'wheel' 'handle' 'safety' 'catch',
        description "There is a concealed safety catch on the wheel axle.",
        before WheelBefore,
  has   scenery switchable on;

Object  -> dark_shaft_obj "dark shaft"
  with  name 'shaft' 'dark',
        description "Uninviting.",
        before [;
            Enter:
                if( parent(dumbwaiter) == location )
                    <<Enter dumbwaiter>>;
                "No, don't. There's nothing there and it's nasty and dirty. Bring the dumbwaiter down instead.";
        ],
  has   container transparent open enterable scenery;

Object  -> old_timber_prop "old timber prop"
  with  name 'prop' 'timber',
        article "an",
        rod_assoc rod_of_returning,
        devil_hint "A plain old piece of timber.",
  has   hidden_rod;

[ transport_player dest ;
    if( second ~= player )
        "Nothing obvious happens.";

    print "You are engulfed in a cloud of spinning white lights, like insects. 
        When the swarm clears, you find yourself transported...^";

    if( game_section == ANCIENT_BRITAIN ) {
        dest = Infinity_Symbol;
        remove rod_of_returning2;
    }
    if( game_section ~= ANCIENT_BRITAIN ) {
        switch( random(4) ) {
            1: dest = Attic;
            2: dest = Old_Furniture;
            3: dest = Old_Winery;
            4: dest = Over_the_East_Wing;
        }
        if( deterministic_transport == true )
            dest = Attic;
    }
    game_section = MODERN;
    PlayerTo(dest, 2);
    rtrue;
];

Object -> robot_mouse "robot mouse"
  with  name 'robot' 'mouse',
        description "Remember the late 1970s, when a craze for home-made robots swept 
            the home computing world?  No, perhaps not, but here is a
            left-over from it anyway. The mouse is quite large (almost
            a foot wide and tall), and has a big smile painted on its
            metal chassis.",
        initial "In one corner is a dust-covered robot mouse.",
        devil_hint "It can't even follow orders.",
        orders [ dst p;
            Go:
                dst = nothing;
                p = parent(self);
                if( p ~= Cellars_South && p ~= Cellar_West && p ~= Cellars )
                    "The mouse wheels spin, but can't get a good enough grip to move.";
                if( noun == ne_obj || noun == se_obj || noun == sw_obj || noun == nw_obj || noun == d_obj || noun == u_obj )
                    "The mouse bleeps with annoyance.";
                if( location == Cellars_South ) {
                    switch( noun ) {
                        n_obj: dst = Cellars;
                        w_obj: 
                            Mouse_x = 8;
                            Mouse_y = 3;
                            dst = hole_in_the_wall;
                    }
                } else if( location == Cellar_West && noun == e_obj ) {
                    dst = Cellars;
                } else if( location == Cellars ) {
                    switch( noun ) {
                        w_obj: dst = Cellar_West;
                        s_obj: dst = Cellars_South;
                    }
                }
                if( dst == nothing )
                    "The mouse emits a low-pitched bleep.";
                move self to dst;
                if( dst == hole_in_the_wall )
                    "The mouse just squeezes through the hole, and disappears from view. Unfortunately you can't very easily talk to it now...";
                else
                    "The mouse runs off as ordered.";
            default:
                "The mouse emits a querulous, unhappy bleep.";
        ],
  has   talkable;

Rod     rod_of_returning "Rod of Returning"
  with  name 'rod' 'of' 'returning',
        rod_action transport_player,
        devil_hint "Well, that's not very useful, is it?  I'd go on strike if I were you.";

Object  Cellars_South "Cellars South"
  with  description "The bricking-up of this cellar seems incomplete, 
            because there is a hole about ten or eleven inches across in
            the west wall. You peer at this with interest but nothing
            is within reach inside, and it is far too small for you to
            wriggle through. The cellars go back north, and so, it would
            appear, do you.",
        n_to Cellars,
  has   ;

[ MouseMove2 x y pos ;
    if( x < 0 || x > 8 || y < 0 || y > 6 )
        rfalse;
    pos = mouse_maze->(9 * y + x);
    if( pos == 48 )
        rfalse;
    if (pos == 49)
        rtrue;
    rtrue;
];

Object  -> hole_in_the_wall "hole in the wall"
  with  name 'hole' 'mousehole',
        orders [ x1 y1;
            if( robot_mouse notin self )
                rfalse;
            Go:
                if( Mouse_x == 8 && Mouse_y == 3 && noun == e_obj ) {
                    move robot_mouse to Cellars_South;
                    print "The mouse runs back out of the hole, looking dustier but none the worse for its adventure";
                    if( parent(small_brass_key) ~= robot_mouse )
                        ".";
                    move small_brass_key to Cellars_South;
                    ", and then almost looks proud as a magnet cuts out and something metal drops off the underside of the mouse onto the floor. The lost key is found!";
                } else if( noun == n_obj ) {
                    x1 = Mouse_x;
                    y1 = Mouse_y - 1;
                } else if( noun == e_obj ) {
                    x1 = Mouse_x + 1;
                    y1 = Mouse_y;
                } else if( noun == s_obj ) {
                    x1 = Mouse_x;
                    y1 = Mouse_y + 1;
                } else if( noun == w_obj ) {
                    x1 = Mouse_x - 1;
                    y1 = Mouse_y;
                }
                if( MouseMove2(x1,y1) == true )
                    "From somewhere inside the hole, you hear a disconsolate bleep.";

                Mouse_x = x1;
                Mouse_y = y1;
            if( Mouse_x == 4 && Mouse_y == 1 ) {
                if( parent(small_brass_key) == hole_in_the_wall) {
                    move small_brass_key to robot_mouse;
                    "From somewhere inside the hole, you hear the spinning of tiny 
                     wheels, followed by an excitable high-pitched beep and a dull 
                     clanging noise.";
                }
            }
            "From somewhere inside the hole, you hear tiny wheels spin.";

            default: "The mouse emits a querulous, unhappy bleep.";
        ],
  has   scenery talkable;

Object  -> -> small_brass_key "small brass key"
  with  name 'small' 'brass' 'attic' 'key',
        initial "Lying where the mouse dropped it is a small brass key.",
        devil_hint "It isn't the attic key, I fear.",
  has   ;

Object Cellar_West "Cellar West"
  with  description "The west end of a disused and shadowy old cellar. It 
            used to be a wine cellar, but was bricked up when you were
            a child - you never did find out why. Perhaps the golden,
            jewelled staircase leading down into smoky mists to the
            south might be something to do with it.",
        s_to Hellish_Place,
        e_to Cellars,
        nw_to Gothic_door,
        d_to Hellish_Place,
  has   ;

Object -> Gothic_door "Gothic door"
  with  name 'gothic' 'iron' 'door',
        initial "In the northwest wall the iron door stands open.",
        door_dir nw_to,
        door_to Infinity_Symbol,
        describe "In the northwest wall is a heavy, imposing Gothic iron door.",
        with_key iron_key,
  has   door openable static lockable locked;

Object Infinity_Symbol "Infinity Symbol"
  with  name 'marble' 'disc' 'webs' 'icicle',
        description "An eerie, dark cave carved from crystal icicles of rock 
            and strewn with great spiders' webs hung from the ragged
            stone, inhabited only by dead white insects. A narrow
            crevice opens out to an iron doorway and the warmth of the
            house.^^The rough stone floor levels out to a perfectly
            round, smooth white marble disc about five yards across,
            inscribed with a black lemniscus (or infinity) symbol.^^You
            shiver with foreboding, but inexplicably feel that the map
            you're looking for must be somewhere near here.",
        se_to Cellar_West,
  has   light scored;

Object -> lemniscus "lemniscus"
  with  name 'infinity' 'lemniscus' 'symbol',
  has   scenery;

Object -> circular_arc "circular arc"
  with  name 'wells' 'circular' 'arc' 'socket',
        number 0,
        describe [;
            print "^Around the edge of the disc is a circular arc, surrounding the lemniscus, 
                which passes through seven equally spaced sockets or cylindrical wells. ";
            switch( self.number ) {
                0: "";
                1: "One socket contains a rod, fixed in place.";
                2: "Two of the sockets contain rods, fixed in place.";
                3: "Three of the sockets contain rods, fixed in place.";
                4: "Four of the sockets contain rods, fixed in place.";
                5: "Five of the sockets contain rods, fixed in place.";
                6: "Only one socket is left empty.";
                7: "All seven sockets are occupied by rods.";
            }
        ],
        before [;
            Receive:
                if( noun hasnt rod_attr )
                    "That won't fit in a socket.";
                if( noun == rod_of_infinity )
                    "The Rod of Infinity is just slightly too large to fit.";
                if( self.number == 7 )
                    "The sockets are all full.";
                move noun to self;
                give noun static;
                self.number++;
                if( self.number == 7 )
                    Achieved(SCORE_INFINITY);
                "It fits perfectly in one of the arc sockets.";
        ],
  has   static;

Object Garden_Stream "Garden Stream"
  with  name 'reeds',
        description "In the lush, verdant (which is to say, under-cared for) 
            gardens of Meldrew House, where a stream gurgles pleasantly
            as it meanders through reeds. The house rises up high above
            you to the south and you do not dare go east for fear of
            being recaptured by the rest of the family, so you'll have
            to go northwest, deeper into the gardens.",
        s_to coal_bunker,
        nw_to Family_Tree,
        cant_go "Better not go that way... you might get caught.",
  has   light scored;

Object -> coal_bunker "coal bunker"
  with  name 'coal' 'bunker' 'loading' 'door',
        when_open "On the house wall is a coal bunker, whose door stands open.",
        after [;
            Unlock: give metal_door ~locked;
            Lock: give metal_door locked;
            Open: give metal_door open;
            Close: give metal_door ~open;
        ],
        door_dir s_to,
        door_to [;
            game_section = MODERN;
            return Dark_Passage;
        ],
        when_closed "On the house wall is a coal bunker, whose loading door is shut.",
  has   door openable static locked;

Object Family_Tree "Family Tree"
  with  name 'sign' 'signpost' 'post',
        description "You stand in the shade of a great plane tree, seedlings for 
            which were brought back from Spain by an ancestor of yours
            in 1806. To the southeast is a stream, to the west is a small
            clearing and to the north a single break in the green privet
            hedge marks the entrance to the famously difficult Meldrew
            House Maze. A signpost reading ~To the Mosaic~ points east.",
        n_to [;
            MazeX = 4;
            MazeY = 6;
            if( parent(player) == garden_roller )
                return Maze;
            "You can't go that way. Now, this takes a little explaining. These 
             days, it isn't easy to keep up a house the size of
             Meldrew House, and your family has had to strike a
             bargain with the National Trust that the house should
             be open to the public in the summer months. The maze is
             so popular with visitors that the grass has worn away,
             and it's being reseeded at the moment, so you shouldn't
             go treading all over it.";
        ],
        e_to Mosaic,
        w_to Clearing,
        se_to Garden_Stream,
        u_to Up_the_Plane_Tree,
  has   light;

Object -> plane_tree "plane tree"
  with  name 'plane' 'tree' 'family',
        before [;
            Climb: << Go u_obj >>;
        ],
  has   scenery;

Object Mosaic "Mosaic"
  with  name 'perspephone' 'scenes' 'quadra',
        description "This sunken corner of the garden has been excavated 
            and then covered over with tough perspex to protect it from
            visitor's shoes. It consists of a time-worn Roman mosaic,
            divided into four quadrants, each showing scenes of idealised
            Roman life. There was probably a villa on this site, but
            your family has never been keen on archaeologists.",
        w_to Family_Tree,
        u_to Family_Tree,
        cant_go "From here you can only climb back up to the plane tree.",
  has   ;

Object -> mosaic_object "mosaic"
  with  name 'mosaic',
        description "Made of terra-cotta and ceramic fragments, it has held together surprisingly well.",
  has   scenery;

Object Clearing "Clearing"
  with  description "A clearing at the edge of the garden, surrounded by 
            walls and the privet hedges of the maze. To the east is the
            plane tree, to the west an opening in the wall makes a garage
            entrance and to the south is a small vegetable garden.",
        s_to Vegetable_Garden,
        e_to Family_Tree,
        w_to Garage,
  has   light;

Object Vegetable_Garden "Vegetable Garden"
  with  description "A recently-turned vegetable garden, using up a shady 
            corner of the garden. The patch testifies more to good intentions than horticulture.",
        n_to Clearing,
        u_to runner_bean_plant,
        cant_go "From this corner, you can only go back to the clearing.",
  has   light;

Object -> runner_bean_plant "runner-bean plant"
  with  name 'runner' 'bean' 'plant',
        initial "A giant runner-bean plant leads up vertiginously into the sky from here.",
        door_to Up_the_Beanstalk,
        describe "Only a runner-bean plant graces the vegetable garden.",
  has   door;

Object Garage "Garage"
  with  description "A modest brick garage, built into the garden walls. 
            A big open doorway leads east onto the clearing.",
        e_to Clearing,
  has   ;

[ MazeBoundary x y ndx ;
    if( x < 0 || x > 8 || y < 0 || y > 6 )
        rfalse;
    ndx = garden_array->(9 * y + x);
    if( ndx == 48 )
        return 0;
    if( ndx == 49 )
        return 1;
    rtrue;
];

Object -> garden_roller "garden roller"
  with  name 'garden' 'roller' 'switch',
        description "A motorised garden roller of the kind you sit inside, 
            among whose simple controls is a big on/off switch.",
        before [;
            Go:
                if( self hasnt on )
                    "The motor isn't on at the moment.";
                if( location == Garden_Stream && noun == s_obj )
                    "The garden roller will never fit.";
                if( (location == Family_Tree && noun == u_obj) || (location == Patio_in_Maze && noun == d_obj) )
                    "It won't go that way.";
                return 1;
        ],
        when_on "The garden roller sits here, its engine still running.",
        when_off "A big motorised garden roller is parked here.",
  has   enterable static switchable transparent;

Object -> weed_killer "weed killer bottle"
  with  name 'weed' 'killer' 'bottle' 'weedkiller',
        description "If squeezed, it squirts weed killer over the ground. 
            There are many warning labels about getting it on one's hands.",
        initial "In the shadows is a weed killer bottle.",
        angel_hint "The funny thing is, they didn't have weedkillers in the
            early nineteenth century, and yet they still planned some marvellous gardens.",
        before [ i ;
            Squeeze:
                if( self has general )
                    "Nothing emerges. The bottle must be empty.";
                if( location == Wall_of_Thorns )
                    "A valiant, but obviously utterly hopeless idea. The weed killer does not harm a single tendril of the wall.";
                if( location == Vegetable_Garden ) {
                    remove runner_bean_plant;
                    location.u_to = nothing;
                    "Congratulations. You have devastated the runner-bean plant.";
                }
                if( location == Family_Tree )
                    "Happily, the weed killer makes no impression on the beautiful old tree.";
                if( game_section == GARDEN )
                    "A stream of weed-killer soaks into the earth, and does nothing obvious.";
                if( game_section ~= GARDEN_PAST )
                    "A stream of weed-killer emerges, but evaporates almost at once, just as well considering the vile smell.";
                if( location ~= Maze_Foundations )
                    "A stream of weed-killer soaks into the earth, and does nothing obvious.";
                i = MazeBoundary(MazeX, MazeY);
                if( i == 0 )
                    "A stream of weed-killer soaks into the grass, and does nothing obvious.";
                WeedkillerX = MazeX;
                WeedkillerY = MazeY;
                garden_array->(WeedkillerX + 9 * WeedkillerY) = 48;
                WeedkillerX = 100;
                "A stream of weed-killer soaks into the earth, and does nothing obvious.";
        ],
  has   ;

Object Up_the_Plane_Tree "Up the Plane Tree"
  with  name 'jemima' 'conservatory' 'window',
        description "A magnificent view of the gardens would be yours, were 
            it not for the branches and leaves which surround you. You
            can make out Aunt Jemima up at the conservatory window, but
            hide from her view. Down below, the privet-hedge layout of
            the maze can be seen through the lower branches.",
        d_to Family_Tree,
        cant_go "No, don't go out on a limb.",
  has   light;

Object -> maze_layout "maze layout"
  with  name 'maze' 'layout',
        before [ x y wallp ;
            Examine:
                print "The layout is roughly as follows:^^";
                y = 0;
                --y;
                while( y < 6 ) {
                    y++;
                    print "    ";
                    x = 0;
                    x--;
                    while( x < 8 ) {
                        x++;
                        wallp = MazeBoundary(x,y);
                        if( wallp == true )
                            print "###";
                        else
                            print "...";
                    }
                    new_line;
                }
            rtrue;
        ],
  has   scenery;

[ MazeDescribe numwalls n_side e_side s_side w_side ;   ! 70672 / 0x11410
    --MazeY;
    n_side = MazeBoundary(MazeX,MazeY);
    ++MazeY;
    ++MazeX;
    s_side = MazeBoundary(MazeX,MazeY);
    --MazeX;
    ++MazeY;
    e_side = MazeBoundary(MazeX,MazeY);
    --MazeY;
    --MazeX;
    w_side = MazeBoundary(MazeX,MazeY);
    ++MazeX;
    numwalls = n_side + (s_side + (e_side + w_side));
    if (numwalls == 4) {
        "^You are hedged in on all sides.";
    }
    if (numwalls == 3) {
        print "^You are hedged in and can only go back ";
    }
    if (numwalls == 2) {
        print "^The corridor runs ";
    }
    if (numwalls == 1) {
        print "^At this junction, the maze runs ";
    }
    if (numwalls == 0) {
        "^This is a crossroads in the maze.";
    }
    while( numwalls < 4 ) {
        if (n_side == false) {
            print "north";
            n_side = true;
        } else if (s_side == false) {
            print "east";
            s_side = true;
        } else if (e_side == false) {
            print "south";
            e_side = true;
        } else if (w_side == false) {
            print "west";
            w_side = true;
        }
        ++numwalls;
        if (numwalls == 4) {
            ".";
        }
        if (numwalls == 3) {
            print " and ";
        }
        if (numwalls == 2) {
            print ", ";
        }
        if (numwalls == 1) {
            print ", ";
        }
    }
    rtrue;
];

[ MazeGo newx newy;
    if( MazeX == 4 && MazeY == 6 && noun == s_obj )
        rfalse;
    if( MazeX == 0 && MazeY == 1 && noun == w_obj )
        rfalse;
    newx = 100; newy = 100;
    if( noun == n_obj ) {
        newx = MazeX;
        newy = MazeY - 1;
    } else if( noun == e_obj ) {
        newx = MazeX + 1;
        newy = MazeY;
    } else if( noun == s_obj ) {
        newx = MazeX;
        newy = MazeY + 1;
    } else if( noun == w_obj ) {
        newx = MazeX - 1;
        newy = MazeY;
    }
    if( newx == 100 )
        "The maze is constructed with rectangular grid-lines of 
         privet, so you can only proceed north, east, south or west.";
    if( MazeBoundary(newx,newy) )
        "The privet hedge is in the way.";
    MazeX = newx;
    MazeY = newy;
    if( location == Patio_in_Maze ) {
        location = Maze;
        move garden_roller to Maze;
    } else if( MazeX == 7 && MazeY == 5 ) {
        location = Patio_in_Maze;
        move garden_roller to Patio_in_Maze;
    }
    << Look >>;
];
Object Maze "Maze"
  with  description "A maze of green privet passages, all alike.",
        before [ ;
            Exit: "Remember the poor grass!";
            Go: return MazeGo();
        ],
        after [;
            Look:
                return MazeDescribe();
        ],
        s_to Family_Tree,
        w_to Viewpoint_Ledge,
        cant_go "The privet hedges are in the way.",
  has   light scored;

Object Patio_in_Maze "Patio in Maze"
  with  name 'patio' 'flagstone',
        description "This is an old stone patio in the heart of the garden maze. 
            A missing flagstone offers an intriguing dark prospect beneath.",
        react_before [;
            Go:
                if( noun ~= d_obj ) {
                    if( parent(player) ~= garden_roller )
                        "Mustn't tread on the grass now!";
                    return Maze;
                }
        ],
        after [;
            Look:
                return MazeDescribe();
        ],
        w_to [; return MazeGo(); ],
        n_to [; return MazeGo(); ],
        d_to Crypt,
        cant_go "The privet hedges are in the way.",
  has   light scored;

Object Crypt "Crypt"
  with  description "A dismal crypt, disused, full of leaves and rainswept. 
            Light streams in from the square hole in the roof. There
            are no bones or urns on show.",
    n_to bronze_mural,
    u_to Patio_in_Maze,
    d_to bronze_mural,
  has   light;

Object -> bronze_mural "bronze mural"
  with  name 'bronze' 'mural',
        description "The mural depicts an old bearded wise man following a star 
            in the western sky. He has his right arm around an attractive
            young woman and holds a bundle of wands with his left
            hand. Around the border are astrological symbols of all kinds,
            from Tarot suits to zodiacal constellations.",
    initial "The mural stands slightly to one side, revealing a passage leading downward.",
    door_dir d_to,
    door_to Catacomb_Passage,
    describe "The north wall forms a giant bronze mural, which has stood the test of time.",
  has   door static;

Object Universe_Maintenance_Room "Universe Maintenance Room"
  with  name 'gauges' 'machine',
        description "You really should try to be more awestruck, for this 
            is Merlin's cave, the hub of Creation. Every visitor perceives
            this place differently, according to his or her own myths
            and beliefs. Your particular creed being science, it is an
            unimpressive collection of gauges, dials and machines. A
            single passage leads up and out to the south.",
    s_to Catacomb_Passage,
    u_to Catacomb_Passage,
  has   scored;

Object  -> large_dial "large dial"
  with  name 'large' 'dial',
        description "Above the dial is a lower-case letter h with a slashed line through it. 
            It is currently turned to 1.055 or thereabouts. There is
            something worryingly dangerous about its matter-of-factness.",
        initial "Particularly prominent are a large dial, like the volume control on an expensive 
            hi-fi amplifier, and a big electrician's switch. Both are labelled in small print.",
        before [;
            Turn:
                deadflag = DESTROYED_UNIVERSE;
                score = -99;
                "Mmm. On the whole, it's probably best not to alter one of the fundamental 
                 constants of the physical universe while still inside
                 it. On the bright side, for once you are unlikely to
                 get the blame.";
        ],
  has   static;

Object  -> big_electricians_switch "big electrician's switch"
  with  name 'big' 'electrician' 'switch',
        description [;
            print "The lower, on, position is labelled ~Determinism~. 
                The upper, off, position is labelled ~Chance~. It is currently switched ";
            if( self has on )
                "on.";
            "off.";
        ],
        after [;
            SwitchOn: "Click-clunk!  The world looks precisely the same.";
            SwitchOff: "Clunk-click!  Probably nothing very much has changed.";
        ],
  has   scenery static switchable on;

Object Viewpoint_Ledge "Viewpoint Ledge"
  with  name 'motorway' 'coaches',
        description "This flagstoned rampart on the hillside looks across the valley, down (unfortunately) 
            to the motorway below. Coaches pass by, reminding you of
            the rapidly approaching time when visitors will have to be
            let in again for the summer. The only safe way to go is back
            east into the maze. To one side is a plaque.",
        before [;
            Examine:
                if( parent(player) == garden_roller && noun == plaque )
                    "The writing's too small from here.";
        ],
        e_to [;
            if( parent(player) == garden_roller )
                return Maze;
            "For the sake of the grass, you can't go that way.";
        ],
    cant_go "The hillside is too steep.",
  has   light scored;

Object -> plaque "plaque"
  with  name 'plaque',
    description "~This viewpoint, one of the finest in the county, was laid down by Capability Meldrew, a well-known landscape gardener of his day. It was intended as one of the rewards of the garden maze, and was constructed c. 1808 after an earlier folly on the site collapsed.~",
  has   scenery;

Object -> miniature "miniature"
  with  name 'miniature' 'plastic' 'etching',
    description "No larger than a playing card, it depicts the Folly which used to stand on the hillside outcrop.",
    initial "A miniature plastic etching rests on the plaque.",
    door_to Folly,
    devil_hint "What's the point of a drawing so small it might almost be a playing card?",
  has   ;

Object Folly "Folly"
  with  name 'wain' 'hay' 'tower' 'valley',
        description "This is a rampart on the hillside, a natural ledge leading east. 
            Down below in the valley, rough cottages surround a
            church. Labourers toil in the fields, and a hay wain is
            being pulled across the river far below.^^Towering over you
            is a monstrously awful piece of architecture, a Folly. The
            freestanding tower has no appreciable purpose and no apparent
            entrance. The latter is just as well since it looks extremely
            unsafe.",
        e_to [;
            MazeX = 0;
            MazeY = 1;
            return Maze_Foundations;
        ],
        cant_go "The hillside is too steep.",
  has   light scored;

Object -> bean_pole "bean pole"
  with  name 'bean' 'pole',
        initial "A bean pole, of the kind used to grow climbing plants, rests against the side of the tower.",
        after [;
            Take:
                if( self has general )
                    rfalse;
                give self general;
                StartTimer(self, 5);
                rfalse;
        ],
        time_left 0,
        time_out [;
            if( game_section == GARDEN_PAST ) {
                deadflag = AUSTRALIA;
                "^There is a great rumbling sound and then a thunderous avalanche of stone cascades down the hillside into the valley. The Folly has collapsed!  Capability Meldrew and his workmen come running to investigate. In the ensuing confusion, they come across you and, of course, blame you for their incompetent masonry. You are hauled up before the county assizes...^";
            }
        ],

        rod_assoc rod_of_stalking,
        devil_hint "Whatever you do, it'll always be a bean pole.",
  has   hidden_rod;

Rod     rod_of_stalking "Rod of Stalking"
  with  name 'rod' 'of' 'stalking',
        rod_action stalking_rod_action,
        devil_hint "It has no horticultural application.";

[ stalking_rod_action ;
    if( second == player )
        "Your hair stands momentarily on end, as if it wants to stalk up out of your head, but happily it decides against.";
    if( second == plane_tree )
        "The tree shakes and shivers, but thankfully remains intact.";
    if( second ~= runner_bean_plant )
        "Nothing obvious happens.";
    if( runner_bean_plant has open ) {
        "Nothing further happens.";
    }
    give runner_bean_plant open;
    print "^Warning: something extremely cliched is about to happen. When you think you have composed 
            yourself and can stand it, press ENTER. ", '>';
    @sread buffer parse;
    new_line;
    "Suddenly an enormous beanstalk sprouts out of the ground, exactly as per fairy tale, 
     reaching up high into the sky!  You yawn convulsively.";
];

Object  Up_the_Beanstalk "Up the Beanstalk"
  with  description "At the top of the beanstalk, in amongst the clouds. There is no 
            safe way to go from here except back down, not surprisingly. A
            dangerous way might be to step out onto the clouds to the
            north, but even if this is a fairy-tale it would be taking
            a lot on trust.",
        n_to Heavenly_Place,
        d_to Vegetable_Garden,
        cant_go "The clouds are too tenuous that way.",
  has   light;

[ SeedText x y ndx ;
    if( x ~= 0 && x ~= 8 && y ~= 0 && y ~= 6 )
        return MazeBoundary(x,y);

    ndx = garden_array->(9 * y + x);
    if (ndx == 48) {
        ndx = 0;
        return ndx;
    }
    if (ndx == 49) {
        ndx = 2;
        return ndx;
    }
    rtrue;
];

[ SeedBoundary x y ndx ;
    ndx = SeedText(x,y);
    if (ndx == 2) {
        ndx = 0;
    }
    return ndx;
];

[ OldMazeBoundary x y ndx ; ! 69630 / 0x10ffe
    ndx = SeedText(x,y);
    if( ndx == 1 ) {
        ndx = 0;
    }
    if( ndx == 2 ) {
        ndx = 1;
    }
    return ndx;
];

[ MazeOldDescribe numwalls n_side e_side s_side w_side ;    ! 70994 / 0x11552
    numwalls = MazeBoundary(MazeX,MazeY);
    if (MazeX == 7 && MazeY == 5) {
        numwalls = 2;
    }
    new_line;
    if (numwalls == 1) {
        print "You are standing on a bed in which seeds have been recently planted. ";
    }
    if (numwalls == 0) {
        print "You stand on a rough patch of grass. ";
    }
    if (numwalls == 2) {
        print "You stand on a rough patch of grass, marked out with whitewash. ";
    }
    --MazeY;
    n_side = SeedBoundary(MazeX,MazeY);
    ++MazeY;
    ++MazeX;
    s_side = SeedBoundary(MazeX,MazeY);
    --MazeX;
    ++MazeY;
    e_side = SeedBoundary(MazeX,MazeY);
    --MazeY;
    --MazeX;
    w_side = SeedBoundary(MazeX,MazeY);
    ++MazeX;
    numwalls = n_side + (s_side + (e_side + w_side));
    if (numwalls == 4) {
        print "There are seedbeds on all sides. ";
    } else {
        if (numwalls == 3) {
            print "There are seedbeds to ";
        }
        if (numwalls == 2) {
            print "There are seedbeds to the ";
        }
        if (numwalls == 1) {
            print "There is a seedbed to the ";
        }
        while( numwalls > 0 ) {
            if( n_side == true ) {
                print "north";
                n_side = false;
            } else if( s_side == true ) {
                print "east";
                s_side = false;
            } else if( e_side == true ) {
                print "south";
                e_side = false;
            } else if( w_side == true ) {
                print "west";
                w_side = false;
            }
            --numwalls;
            if( numwalls == 0 ) {
                print ". ";
            } else {
                if( numwalls == 1 ) {
                    print " and ";
                }
                if( numwalls == 2 ) {
                    print ", ";
                }
                if( numwalls == 3 ) {
                    print ", ";
                }
            }
        }
    }
    --MazeY;
    n_side = OldMazeBoundary(MazeX,MazeY);
    ++MazeY;
    ++MazeX;
    s_side = OldMazeBoundary(MazeX,MazeY);
    --MazeX;
    ++MazeY;
    e_side = OldMazeBoundary(MazeX,MazeY);
    --MazeY;
    --MazeX;
    w_side = OldMazeBoundary(MazeX,MazeY);
    ++MazeX;
    numwalls = n_side + (s_side + (e_side + w_side));
    if (numwalls == 0) {
        new_line;
        rfalse;
    }
    if (numwalls == 1) {
        print "There is a fence to the ";
    }
    if (numwalls == 2) {
        print "There are fences to ";
    }
    if (numwalls == 3) {
        print "There are fences to ";
    }
    if (numwalls == 4) {
        "This is a fenced-in area.";
    }
    while( numwalls > 0 ) {
        if (n_side == true) {
            print "north";
            n_side = false;
        } else if (s_side == true) {
            print "east";
            s_side = false;
        } else if (e_side == true) {
            print "south";
            e_side = false;
        } else if (w_side == true) {
            print "west";
            w_side = false;
        }
        --numwalls;
        if (numwalls == 0) {
            ".";
        }
        if (numwalls == 1) {
            print " and ";
        }
        if (numwalls == 2) {
            print ", ";
        }
        if (numwalls == 3) {
            print ", ";
        }
    }
    rtrue;
];

Object  Maze_Foundations "Maze Foundations"
  with  description "A square grid of plots of grass and seedbeds, all alike.",
        before [ newx newy;
            Go:
                if( MazeX == 4 && MazeY == 6 && noun == s_obj )
                    rfalse;
                if( MazeX == 0 && MazeY == 1 && noun == w_obj )
                    rfalse;
                newx = 100; newy = 100;
                if( noun == n_obj ) {
                    newx = MazeX;
                    newy = MazeY - 1;
                }
                if( noun == e_obj ) {
                    newx = MazeX + 1;
                    newy = MazeY;
                }
                if( noun == s_obj ) {
                    newx = MazeX;
                    newy = MazeY + 1;
                }
                if( noun == w_obj ) {
                    newx = MazeX - 1;
                    newy = MazeY;
                }
                if( newx == 100 )
                    "The maze is constructed along rectangular grid-lines, so you 
                     can only proceed north, east, south or west.";
                if( OldMazeBoundary(newx,newy) ~= false )
                    "The wooden fence is in the way.";
                MazeX = newx; MazeY = newy;
                <<Look>>;
        ],
        after [;
            Look:
                return MazeOldDescribe();
            Drop:
                deadflag = PARADOX;
                "You feel an alarming wrench in your insides.";
        ],
        s_to Tree_Planting,
        w_to Folly,
  has   light;

Object  Tree_Planting "Tree Planting"
  with  description "Capability Meldrew and his gang of workmen are 
            delicately planting a sapling plane tree here. Your
            disturbance annoys them immensely and you are immediately
            arrested for vagrancy and theft. After a few months in prison,
            you are hauled up before the County Assizes and sentenced...",
        after [;
            deadflag = AUSTRALIA;
        ],
  has   ;       ! bug--no light?

Object Disused_Observatory "Disused Observatory"
  with  name 'mural' 'zodiac' 'signs',
        description "Once upon a time, this small circular room had a dome and a 
            telescope, but it leaked dreadfully and so now there's a
            proper roof. A circular mural painted with the signs of the
            zodiac is interrupted by a short flight of stairs leading
            up to the north, a west doorway to a shadowy alcove and the
            continuation of the stairs down and to the south.",
        n_to Over_the_East_Wing,
        s_to Souvenirs_Room,
        w_to Library_Storage,
        u_to Over_the_East_Wing,
        d_to Souvenirs_Room,
  has   ;

Object  -> solid_glass_ball "solid glass ball"
  with  name 'glass' 'ball',
        description "The ball is scratched and misted up.",
        initial "Mounted on the old telescope stand is what looks like a solid glass ball.",
        before [;
            Rub:
                give self general;
                "You polish the ball to a nice shine.";
            Examine:
                if( self hasnt general )
                    "The ball is scratched and misted up.";

                    print "In the ball mists swirl, then part to give ";
                switch( random(8) ) {
                    1: "a reflection of your face.";
                    2: "a dizzying aerial view of Meldrew House gardens.";
                    3: "confused pictures of a tree being planted.";
                    4: "an image of a typist, home from work and wandering about her bedsit room.";
                    5: "a dark picture of a museum display case.";
                    6: "an Old Master painting, perhaps a Watteau, of a scene from classical mythology.";
                    7: "an oddly-angled view of a Roman villa half in ruins.";
                    8: "flames of camp-fires, mixed up with faces around them.";
                }
        ],
  has   static;

Object  Library_Storage "Library Storage"
  with  description "Once upon a time, the house library was used as a gun-room, and 
            all the unwanted books kept up here. Now this is just another
            awkward cranny.",
        e_to Disused_Observatory,
        cant_go "From here, you can only squeeze back east to the observatory.",
  has   ;

Object -> romantic_novel "romantic novel"
  with  name 'romance' 'romantic' 'novel' 'book',
        description "~Coronets for the Cotton Girl~, by Miss Marie Swelldon, published London, 1912. 
            It's all about the happy-go-lucky daughter of a Yorkshire
            mill owner and her adventures marrying into the aristocracy.",
        devil_hint "Don't bother reading or thinking about it. Nothing to do with your family.",
  has   ;

Object -> poetry_book "book of Twenties poetry"
  with  name 'poetry' 'book',
        before [;
            Examine:
                print "Publishers talk a lot of nonsense about readers being transported 
                    away by books, but somehow you have arrived in the...^";
                move self to location;
                game_section = UNREAL;
                PlayerTo(Unreal_City, 2);
                rtrue;
        ],
        devil_hint "My my, a golden age for clear, simple poetry. At last, the dreary obscurity of Tennyson, 
            Kipling, and [frothing at the mouth] Hardy gives way...",
  has   ;

Object  Souvenirs_Room "Souvenirs Room"
  with  name 'souvenir' 'holiday' 'snaps',
        description [ o;
            print "This is where you ought to have left the wretched map, 
                in the family lumber-room of souvenirs and holiday snaps. You
                checked it thoroughly earlier, and can't bear the thought
                of searching it all again. A slide projector is aimed at
                the whitewashed south wall, one of the outside walls of the
                house. The only way to go is back up to the observatory. ";
            if( slide_projector hasnt on ) {
                new_line;
                rtrue;
            }
            o = child(slide_projector);
            if( o ) {
                print "The south wall displays ";
                ShowProjectorImage(o);
                rtrue;
            }
            "The south wall is lit up by the projector.";
        ],
        n_to Disused_Observatory,
        s_to south_wall,
        u_to Disused_Observatory,
  has   ;

[ ShowProjectorImage o dto;
    print "the picture of ", (the) o;
    dto = o.door_to;
    if( dto == nothing )
        ".";
    ", beautifully magnified and amazingly life-like. Why, you'd hardly know there was a wall there at all.";
];

[ DisplayProjector o dto ;
    if( o ~= nothing ) {
        dto = o.door_to;
        if( dto ~= nothing) {
            give south_wall ~concealed;
        }
        print "The south wall lights up with ";
        ShowProjectorImage(o);
        rtrue;
    }
    give south_wall concealed;
    "The south wall becomes blank again.";
];

Object -> slide_projector "slide projector"
  with  name 'slide' 'projector' 'switch',
        description "It has an on/off switch on the side, and a slot for holding whatever is to be projected.",
        before [;
            Receive:
                if( child(self) )
                    "There's a slide in already.";
                if( noun == postcard ) {
                    print "The postcard is just too large to fit.^";
                    OneTimeBonusScore();
                    rtrue;
                }
                if( noun == miniature || noun has card )
                    rfalse;
                "It won't fit. There's only room for something flat and the size of, say, a playing card.";
        ],
        after [ o;
            SwitchOn:
                o = child(self);
                if( o == nothing )
                    rfalse;
                give south_wall ~concealed;
                return DisplayProjector(o);
            SwitchOff:
                give south_wall concealed;
                rfalse;
            LetGo:
                DisplayProjector(nothing);
                rtrue;
            Receive:
                if( self has on )
                    give south_wall ~concealed;
        ],
  has   container open scenery switchable;

Object -> south_wall "south wall"
  with  name 's//' 'south' 'wall',
        door_dir s_to,
        door_to [ card;
            if( slide_projector hasnt on )  
                rfalse;
            card = child(slide_projector);
            if( ~~card )
                rfalse;
            if( card has general )
                "But are unable to enter the scene for a second time.";
            print "You walk confidently into the south wall...^";
            if( card == miniature )
                game_section = GARDEN_PAST;
            else
                game_section = TAROT;
            if( card == Death_card ) {
                deadflag = DIED;
                "^And find yourself in a golden cornfield on a sunny afternoon. You have just time to admire the ears of wheat before the scythe of the Grim Reaper cuts your soul from your body.";
            }
            if( card == Drowned_Sailor_card ) {
                deadflag = DIED;
                "^You are underwater, in the wreck of a ship, surrounded by the skeletons of its former crew, whom you abruptly join as your air runs out.";
            }
            if( card == Fool_card ) {
                deadflag = DIED;
                "^And find yourself stepping off a cliff. All is well for a moment, and then like a cartoon character you notice there is no ground beneath you and you plummet to a stony death far below.";
            }
            return card.door_to;
        ],
  has   concealed door open scenery;

Object Alisons_Writing_Room "Alison's Writing Room"
  with  description "A pleasantly furnished, if now mildewed, box room. A 
            rather small door leads back north into the attics. The
            room is provided with a comfortable bed, which looks very
            inviting.",
        n_to Dead_End,
        s_to windows,
        before [;
            Sleep:
                if( parent(player) ~= comfortable_bed )
                    "Your mother taught you never to go to sleep until you're tucked up in bed.";
                "You sleep briefly, fitfully, tossing and turning all the while, 
                 and dream of Miss Alison writing at her table, and then
                 of being caught by a strange man, who strikes his staff
                 on the ground, then points it directly at you... You
                 begin to fade away. Before you do, he strikes his staff
                 again, then points it at himself and vanishes. You
                 explode back into consciousness!";
        ],
        cant_go "There's just the secret north door, unless of course you count the windows.",
  has   light;

Object -> comfortable_bed "comfortable bed"
  with  name 'comfortble' 'bed',
  has   light open enterable scenery;

Object  -> windows "windows"
  with  name 'window' 'glass',
        when_open "Black-latticed windows open on a beautiful summer's day.",
        before [;
            Open: "It's old and gummed up somehow.";
            Attack:
                if( self has open )
                    rfalse;
                give self open;
                "The windows suddenly give way in a shower of flakes of paint, letting fresh summer air into the room!";
        ],
        door_dir s_to,
        door_to Tiny_Balcony,
        when_closed "Blue skies can be seen through south-facing windows, latticed with black lead and shut tight.",
  has   door static;

Object  Tiny_Balcony "Tiny Balcony"
  with  name 'roof' 'motorway' 'garden',
        description "A tiny balcony around Miss Alison's windows, offering fresh air, 
            blue skies and a magnificent view over the gardens down to the
            droning motorway in the distance. The roof is too perilous
            to scale even if you had a good reason (which you haven't),
            so you had better go back north.",
        n_to Alisons_Writing_Room,
        cant_go "The rooftop is far too dangerous in that direction.",
  has   light;

Object  -> window_sill "window sill"
  with  name 'window' 'sill',
        initial "The balcony is only a foot or so beneath the window-sill, and only about four feet square.",
        before [;
            Search:
                if( delicate_gold_key has concealed ) {
                    give delicate_gold_key ~concealed;
                    "You dislodge something shiny!";
                }
                rfalse;
        ]
  has   static;

Object  -> delicate_gold_key "delicate gold key"
  with  name 'delicate' 'gold' 'key',
        devil_hint "Gold and lead are naturally related, so you want to find a lead box to open.",
  has   concealed scored;

Object Catacomb_Passage "Catacomb Passage"
  with  name 'bones',
        description "An eerie passage, running down from an opening at the south 
            to murky depths in the north. The walls are jagged, uneven and decorated with bones.",
        n_to Universe_Maintenance_Room,
        s_to Crypt,
        u_to Crypt,
        d_to Universe_Maintenance_Room,
  has   ;

Object Heavenly_Place "Heavenly Place"
  with  name 'furniture' 'cloud',
        description "Heaven, you always imagined, would be a world of marble pillars, fluffy 
            clouds, harps and angelic ladies with serene expressions. You
            were right about the last part. An angel is sitting here
            behind some new office furniture, next to a blue Tourist
            Information sign. A bridge of cloud extends south across the
            sky to the beanstalk. There is some choral singing going on
            somewhere, but not loud enough for you to hear properly. Not
            in this life, anyway.",
        ! this is an ugly hack to print a message when the player arrives in the room,
        ! after the description is printed. Handled originally with an 'after: Go'
        ! routine, but in the current library that prints before the room desc.
        ! Better way to do it? I don't know
        initial [; StartTimer(self, 0); ],
        time_left 0,
        time_out [;
            new_line;
            if( angel has general )
                "~I presume you have decided what to ask,~ says the angel.";
            if( angel.number > 0 ) {
                angel.number--;
                if( angel.number > 0 )
                    give angel general;
            }
            switch( angel.number ) {
                0: "~I'm afraid I can be of no further use to you!  See you in another life,~ says the angel 
                     with a memorable smile.";
                1: "~You have one remaining question,~ says the angel with a memorable smile.";
                2: "~A whole two questions left,~ says the angel with a memorable smile.";
            }
            "~Good day,~ says the angel with a memorable smile. ~As a reward 
             for your act of faith, may I welcome you to our little
             information service. We try to be as helpful as possible
             to explorers who are lost, or can't think how to solve
             their problems. Is there anything, pray, which you would
             like a hint about, or which you'd like to show me?  You are
             permitted three hints in all, in accordance with standard
             practice.";
        ],
        s_to Up_the_Beanstalk,
        cant_go "That direction is not for the living.",
  has   light;

[ DemonHint ;
    if( demon hasnt general ) {
        if( demon.number == 0 )
            "~No hints left, sucker.~";
        "~Under Regulation 3, paragraph 15 (i) clause (f), only one hint per visit to the infernal domain. You'll have to go away again and come back if you want another. So sorry.~";
    }
    rfalse;
];

[ AngelHint ;
    if( angel hasnt general ) {
        if( angel.number == 0 )
            "~No hints left, alas.~";
        "~Under Regulation 3, paragraph 15 (i) clause (f), only one hint per visit to the sacred domain. You'll have to go away again and come back if you want another. So sorry.~";
     }
    rfalse;
];
    
Object  -> angel "angel"
  with  name 'angel',
        description "If you were to cast a film of your adventures so far, you would hire Dame 
            Judi Dench to play this lady.",
        life [ a;
            Ask:
                if( AngelHint() )
                    rtrue;
                a = AngelConsultTopic(second);
                if( a )
                    give angel ~general;

                switch( a ) {
                     AT_HELL: "The angel acknowledges the question, but cannot bring herself to speak of Hell.";
                     AT_HEAVEN: "~Heaven?  Oh this isn't your eternal salvation, it's mine, able to serve by answering all these delightful questions. No, Heaven itself is a marvellous place, and it has an excellent health club too. Look forward to seeing you there.~";
                     AT_RODS: "~The rods definitely fit into all this somewhere.~";
                     AT_MAZE: "~If only you could have been there when the maze was being laid out!~";
                     AT_MASTER: "~The master game is like a point at infinity to we mortals,~ the angel says wistfully.";
                     AT_INFINITY: "~All a matter of fitting the rods in somewhere.~";
                     AT_ANDROMEDA: "~How she must long to let her hair down now, instead of being chained to that rock,~ the angel says sorrowfully. ~But in deference to her wishes, I cannot help you rescue her.~";
                     AT_MURAL: "~Amazing fortune you must have in finding it, I can tell.~";
                     AT_FOLLY: "~Ah yes, we must all lament for human folly,~ says the angel, misunderstanding completely.";
                     AT_ZEUS: "~Zeus wasn't a true god, of course,~ the angel predictably insists, ~just a manifestation of the laws of physics to an Ancient Greek, a kind of symbol for the way the universe fundamentally worked.~";
                     AT_BOMB: "The angel maintains a tight-lipped silence.";
                     AT_SACRIFICE: "~That's too dangerous a rod to actually use, of course, and the Church no longer approves of martyrs.~";
                     AT_LUCK: "~Is there really such a thing as luck, or free will?  It's a theological grey area,~ says the angel with fine casuistry.";
                     AT_FIRE: "~Certainly a thorny problem, that.~";
                }
                if( AngelConsultTopic(second) )
                    "~That's a question you'd better put to my colleague in the Other Place,~ says the demon smoothly. ~Try something else.~^";
                "~That's not something I am empowered to answer,~ says the demon with a nervous glance behind him. ~Try something else.~^";
            Show:
                if( AngelHint() )
                    rtrue;
                print "The angel looks conscientiously at ", (the) noun, " and rouses herself to say: ~";
                if( noun provides angel_hint ) {
                    print noun.angel_hint;
                    give angel ~general;
                } else if( noun provides devil_hint )
                    print "I suppose you could ask, um, that tailed gentleman.";
                else
                    print "I'm afraid I'm don't know much about ", (the) noun, ".";
                "~.";
            Attack: "That is possibly not a very far-sighted act.";
        ],
        number 4,
  has   animate scenery;

Object Hellish_Place "Hellish Place"
  with  name 'desk',
        description "Hell, you always imagined, would contain fiery, sulphurous 
            pits and a great many gentlemen with forked tails. You
            were right about the last part. A demon is sitting behind a
            flame-proofed desk at the bottom of the stairs. There are
            some disconcerting screams from further away, but nothing
            to worry about. Not in this life, anyway.",

        ! this is an ugly hack to print a message when the player arrives in the room,
        ! after the description is printed. Handled originally with an 'after: Go'
        ! routine, but in the current library that prints before the room desc.
        ! Better way to do it? I don't know
        initial [; StartTimer(self, 0); ],
        time_left 0,
        time_out [;
            new_line;
            if( demon has general )
                "~Thought what you wanted to ask yet?~ says the demon.";
            if( demon.number > 0 ) {
                demon.number--;
                if( demon.number > 0 )
                    give demon general;
            }
            switch( demon.number ) {
                0: "~Get out, you little pipsqueak!  I'll be seeing you... 
                    much later...~ says the demon with a memorable smile.";
                1: "~All right, toad, you have one, just one, chance left,~ 
                    says the demon with a memorable smile.";
                2: "~Now then, two chances remaining,~ says the demon with 
                    a memorable smile.";
            }
            "~Good afternoon,~ says the demon with a memorable smile. 
             ~As a reward for your naked greed, may I welcome you to
             our little information service. We try to be as helpful as
             possible to explorers who are lost, or can't think how to
             solve their problems, you know the kind of thing. So just
             tell me what you want to know, or show me something to look
             at. You get the usual three hints.~";
        ],
        n_to Cellar_West,
        u_to Cellar_West,
        cant_go "That direction is not for the living.",
        each_turn [;
            switch( random(10) ) {
                1: "^There is a horrid grinding noise from far away.^";
                2: "^A flash of light sears your eyes, as the sulphurous flames grumble.^";
                3: "^You can almost, but not quite, make out the noise of shouting.^";
                4: "^Thunder and lightning can be heard from the fiery depths.^";
            }
        ],
  has   light;


[ AngelConsultTopic w;
    switch( w ) {
        'heaven': return AT_HEAVEN;
        'hell': return AT_HELL;
        'rods': return AT_RODS;
        'maze': return AT_MAZE;
        'master': return AT_MASTER;
        'infinity': return AT_INFINITY;
        'lemniscus': return AT_INFINITY;
        'arc': return AT_INFINITY;
        'andromeda': return AT_ANDROMEDA;
        'mural': return AT_MURAL;
        'folly': return AT_FOLLY;
        'zeus': return AT_ZEUS;
        'bomb': return AT_BOMB;
        'lighthouse': return AT_BOMB;
        'pharos': return AT_BOMB;
        'device': return AT_BOMB;
        'sacrifice': return AT_SACRIFICE;
        'luck': return AT_LUCK;
        'fire': return AT_FIRE;
    }
    return 0;
];

[ DevilConsultTopic w;
    switch( w ) {
        'premoninition': return T_DREAM;
        'dream':         return T_DREAM;
        'torch':         return T_FLASHLIGHT;
        'battery':       return T_FLASHLIGHT;
        'aunt':          return T_JEMIMA;
        'jemima':        return T_JEMIMA;
        'gloves':        return T_JEMIMA;
        'romance':       return T_NOVEL;
        'marie':         return T_NOVEL;
        'daisy':         return T_FLOWERS;
        'daisychain':    return T_FLOWERS;
        'daisies':       return T_FLOWERS;
        'medicine':      return T_MEDICINE;
        'demijohn':      return T_WINE;
        'bottle':        return T_BOTTLE;
        'heaven':        return T_HEAVEN;
        'hell':          return T_HELL;
        'card':          return T_POSTCARD;
        'postcard':      return T_POSTCARD;
        'ghost':         return T_JOSHUA;
        'joshua':        return T_JOSHUA;
        'prayer':        return T_ISAAC;
        'isaac':         return T_ISAAC;
        'museum':        return T_ARCANUM;
        'arcana':        return T_ARCANUM;
        'doktor':        return T_ARCANUM;
        'stein':         return T_ARCANUM;
        'merlyn':        return T_MERLIN;
        'hat':           return T_HAT;
        'book':          return T_BOOK;
        'ebenezer':      return T_EBENEZER;
        'projector':     return T_CARDS;
        'slide':         return T_CARDS;
        'cards':         return T_CARDS;
        'rod':           return T_RODS;
        'rods':          return T_RODS;
        'tarot':         return T_TAROT;
        'sosostris':     return T_TAROT;
        'boat':          return T_BOAT;
        'hollow':        return T_BOAT;
        'mouse':         return T_MOUSE;
        'robot':         return T_MOUSE;
        'hole':          return T_MOUSE;
        'key':           return T_KEY;
        'radio':         return T_RADIO;
        'wireless':      return T_RADIO;
    }
    return 0;
];

Object  -> demon "demon"
  with  name 'devil' 'demon',
        description "If you were to cast a film of your adventures so far, 
            you would hire Donald Sutherland to play this gentleman.",
        before [ a;
            Attack: "A little late for that now.";
            Show:
                print "The demon glances lazily at ", (the) noun, " and rouses himself to say: ~";

                if( noun provides devil_hint ) {
                    print noun.devil_hint;
                    give demon ~general;
                } else if( noun provides angel_hint )
                    print "I know about that, but my counterpart doesn't.";
                else
                    print "I know just what that's for.";
                if( noun has edible ) {
                    remove noun;
                    " Mmm... delicious!~  Sloth and gluttony... two deadly sins in one minute. His boss will be pleased.";
                }
                "~.";
            Ask:
                if( DemonHint() )
                    rtrue;
                a = DevilConsultTopic(second);
                if( a )
                    give demon ~general;
                switch( a ) {
                    T_DREAM: "~In the premonition, it is vital to get hold of the mascot for later use.~";
                    T_FLASHLIGHT: "~It's no use poking about on the attic floor for fresh torch batteries, because there aren't any.~";
                    T_JEMIMA: "~Your Aunt Jemima is not the kind of woman to be distracted by music or frivolous presents, mark my words.~";
                    T_NOVEL: "~Novels are, of course, invariably written by people using their real names, not disguised in any way.~";
                    T_FLOWERS: "~The thing about daisies is, they are the same all year round, not changing with the calendar.~";
                    T_MEDICINE: "~Modern medicine bottles can even withstand falls from a great height. I should try heat if I were you.~";
                    T_WINE: "~You can easily get a grip on the demijohn with your bare hands.~";
                    T_BOTTLE: "~The answer's the same, whichever bottle you meant. That counts as your hint, I'm afraid. Not very fair, but then I am a demon.~";
                    T_HEAVEN: "The demon acknowledges the question, but cannot bring himself to speak of Heaven.";
                    T_HELL: "~Hell?  Oh this isn't your eternal damnation, it's mine, having to answer all these wretched questions. No, Hell itself is a marvellous place, and it has an excellent health club too. Look forward to seeing you there.~";
                    T_POSTCARD: "~Don't worry, there's nothing written there. No need to look at the problem in a fresh light.~";
                    T_JOSHUA: "~History never repeats itself, so it's pointless looking him up in the book.~";
                    T_ISAAC: "~The really interesting stuff is at the very start of his working life.~";
                    T_ARCANUM: "~Forget it, there's no way to return from the museum, and Doktor Stein's medicine has no antidote.~";
                    T_MERLIN: "~Merlyn doesn't really come into this. Try working on something else.~";
                    T_HAT: "~Literally, Merlyn's actual hat. Green pointy felt, I wouldn't wonder.~";
                    T_BOOK: "~The answer's the same, whichever book you meant. That counts as your hint, I'm afraid. Not very fair, but then I am a demon.~";
                    T_EBENEZER: "~Ebenezer?  He's absolutely central to this. Concentrate on him, definitely.~";
                    T_CARDS: "~Trouble with holiday snaps is, once somebody gets the old slide projector going, a boring time is on the cards for all.~";
                    T_RODS: "~You'll need to be wide awake and alert to work out what to do with them. Finding them is easy - just remember to keep an eye out for short, fat things.~";
                    T_TAROT: "~Clairvoyantes are expert at detecting stacked decks, so it's no good cheating.~";
                    T_BOAT: "~Phlebas runs a very badly-advertised service, I'm afraid. I've got no time for him.~";
                    T_MOUSE: "~Once the mouse is in the hole, forget it, it couldn't hear you even if you talked to the hole instead. But there is an alternative method.~";
                    T_KEY: "~Your fault for letting the key get into the foundations - nothing can get in there to retrieve it.~";
                    T_RADIO: "~Marvellous, marvellous contraption. Starts the moment you switch it on, and then nothing but solid gold classics all the way. You can really concentrate when that's playing.~";
                }
                if( AngelConsultTopic(second) )
                    "~That's a question you'd better put to my colleague in the Other Place,~ says the demon smoothly. ~Try something else.~^";
                "~That's not something I am empowered to answer,~ says the demon with a nervous glance behind him. ~Try something else.~^";
        ],
        number 4,
  has   animate scenery;

Object  box_of_chocolates "box of chocolates"
  with  name 'box' 'of' 'chocolate',
        devil_hint "Far too nice to give to anybody else. In fact...",
  has   edible;

Object  wrapping_paper "wrapping paper with reindeer on"
  with  name 'wrapping' 'paper' 'reindeer',
        article "some",
        devil_hint "The reindeer have enormous significance.",
  has   ;

Object  postcard "postcard of the Champs-Elysees"
  with  name 'postcard' 'card',
        description "It is addressed to the house, and postmarked 1963, but has no message. Odd, that.",
        after [;
            Examine:
                if( location == Dark_Room && Dark_Room has light ) {
                    Achieved(SCORE_HAMBURG); 
                    "^No... wait. The eerie lamp-light is bringing out a message in 
                     invisible ink:^^   Hamburg 1420^^   Ticket 7.-^^The seven is 
                     crossed through in continental fashion.";
                }
                rfalse;
        ],
        devil_hint "There's no message there to read.",
  has   ;

Object Grahams_Lair "Graham's Lair"
  with  description "A home for the bewildered. NE to stream, NW to 
            lighthouse, SE to cupboard, SW to Folly, N to onboat, S to
            projector room, E to Shaftmid, W to Infroom, U to cliffs,
            D to cave.",
        n_to On_board_the_Phlebas,
        s_to Souvenirs_Room,
        e_to Dark_Shaft,
        w_to Infinity_Symbol,
        ne_to Garden_Stream,
        se_to Inside_Cupboard,
        nw_to Lighthouse,
        sw_to Folly,
        u_to Cliffs,
        d_to Universe_Maintenance_Room,
  has   light;

