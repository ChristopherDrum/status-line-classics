[ MazeBoundary x y cell ;       
    if( x < 0 || x > 8 || y < 0 || y > 6 ) {
        rfalse;
    }
    cell = garden_array->(9 * y + x);
    if( cell == '0' ) {
        rfalse;
    }
    if( cell == '1' ) {
        rtrue;
    }
    rtrue;
];

[ TestMazeConfines x y cell ;    
    if( x == 0 or 8 || y == 0 or 6 ) {
        cell = garden_array->(9 * y + x);
        if( cell == '0' ) {
            rfalse;
        }
        if( cell == '1' ) {
            return 2;
        }
    }
    return MazeBoundary(x,y);
];

[ CheckMaze x y z ;     
    z = TestMazeConfines(x,y);
    if( z == 2 ) {
        z = 0;
    }
    return z;
];

[ CheckMaze2 x y z ;    
    z = TestMazeConfines(x,y);
    if( z == 1 ) {
        z = 0;
    }
    if( z == 2 ) {
        z = 1;
    }
    return z;
];

[ MazeDescribe numwalls n_side e_side s_side w_side ;
    --MazeY;
    n_side = MazeBoundary(MazeX,MazeY);
    ++MazeY;
    ++MazeX;
    s_side = MazeBoundary(MazeX,MazeY);
    --MazeX;
    ++MazeY;
    e_side = MazeBoundary(MazeX,MazeY);
    --MazeY;
    --MazeX;
    w_side = MazeBoundary(MazeX,MazeY);
    ++MazeX;
    numwalls = n_side + s_side + e_side + w_side;
    if( numwalls == 4 ) {
        "^You are hedged in on all sides.";
    }
    if( numwalls == 3 ) {
        print "^You are hedged in and can only go back ";
    }
    if( numwalls == 2 ) {
        print "^The corridor runs ";
    }
    if( numwalls == 1 ) {
        print "^At this junction, the maze runs ";
    }
    if( numwalls == 0 ) {
        "^This is a crossroads in the maze.";
    }
    while( numwalls < 4 ) {
        if( n_side == false ) {
            print "north";
            n_side = true;
        } else if( s_side == false ) {
            print "east";
            s_side = true;
        } else if( e_side == false ) {
            print "south";
            e_side = true;
        } else if( w_side == false ) {
            print "west";
            w_side = true;
        }
        ++numwalls;
        if( numwalls == 4 ) {
            ".";
        }
        if( numwalls == 3 ) {
            print " and ";
        }
        if( numwalls == 2 ) {
            print ", ";
        }
        if( numwalls == 1 ) {
            print ", ";
        }
    }
    rtrue;
];

[ MazeOldDescribe numwalls n_side e_side s_side w_side cornerp ;
    numwalls = MazeBoundary(MazeX,MazeY);
    if( MazeX == 7 && MazeY == 5 ) {
        numwalls = 2;
    }
    new_line; 
    if( numwalls == 1 ) {
        print "You are standing on a bed in which seeds have been recently planted. ";
    }
    if( numwalls == 0 ) {
        print "You stand on a rough patch of grass. ";
    }
    if( numwalls == 2 ) {
        print "You stand on a rough patch of grass, marked out with whitewash. ";
    }
    --MazeY;
    n_side = CheckMaze(MazeX,MazeY);
    ++MazeY;
    ++MazeX;
    s_side = CheckMaze(MazeX,MazeY);
    --MazeX;
    ++MazeY;
    e_side = CheckMaze(MazeX,MazeY);
    --MazeY;
    --MazeX;
    w_side = CheckMaze(MazeX,MazeY);
    ++MazeX;
    numwalls = n_side + s_side + e_side + w_side;
    if( numwalls == 4 ) {
        print "There are seedbeds on all sides. ";
    } else {
        if( numwalls == 3 ) {
            print "There are seedbeds to ";
        }
        if( numwalls == 2 ) {
            print "There are seedbeds to the ";
        }
        if( numwalls == 1 ) {
            print "There is a seedbed to the ";
        }
        if( numwalls > 0 ) {
            while( numwalls > 0 ) {
                if( n_side == true ) {
                    print "north";
                    n_side = false;
                } else if( s_side == true ) {
                    print "east";
                    s_side = false;
                } else if( e_side == true ) {
                    print "south";
                    e_side = false;
                } else if( w_side == true ) {
                    print "west";
                    w_side = false;
                }
                --numwalls;
                if( numwalls == 0 ) {
                    print ". ";
                } else {
                    if( numwalls == 1 ) {
                        print " and ";
                    }
                    if( numwalls == 2 ) {
                        print ", ";
                    }
                    if( numwalls == 3 ) {
                        print ", ";
                    }
                }
            }
        }
    }
    --MazeY;
    n_side = CheckMaze2(MazeX,MazeY);
    ++MazeY;
    ++MazeX;
    s_side = CheckMaze2(MazeX,MazeY);
    --MazeX;
    ++MazeY;
    e_side = CheckMaze2(MazeX,MazeY);
    --MazeY;
    --MazeX;
    w_side = CheckMaze2(MazeX,MazeY);
    ++MazeX;
    numwalls = n_side + s_side + e_side + w_side;
    if( numwalls == 0 ) {
        new_line;
        rfalse;
    }
    if( numwalls == 1 ) {
        print "There is a fence to the ";
    }
    if( numwalls == 2 ) {
        print "There are fences to ";
    }
    if( numwalls == 3 ) {
        print "There are fences to ";
    }
    if( numwalls == 4 ) {
        "This is a fenced-in area.";
    }
    if( numwalls == 2 && s_side == true && w_side == true ) {
        cornerp = 1;
    }
    while( numwalls > 0 ) {
        if( n_side == true ) {
            print "north";
            n_side = false;
        } else if( s_side == true ) {
            print "east";
            s_side = false;
        } else if( e_side == true ) {
            print "south";
            e_side = false;
        } else if( w_side == true ) {
            print "west";
            w_side = false;
        }
        --numwalls;
        if( numwalls == 0 ) {
            if( cornerp == 1 ) {
                "; uncouth rustics are at work to the south, but fortunately they haven't yet seen you.";
            }
            ".";
        }
        if( numwalls == 1 ) {
            print " and ";
        }
        if( numwalls == 2 ) {
            print ", ";
        }
        if( numwalls == 3 ) {
            print ", ";
        }
    }
];



GRoom   Maze "Maze"      
  with  before [ x y;
            Exit: "Remember the poor grass!";
            Go:
                if( garden_roller hasnt on ) {
                    "But the garden roller is switched off, and won't drive.";
                }
                if( MazeX == 4 && MazeY == 6 && noun == s_obj ) {
                    rfalse;
                }
                if( MazeX == 0 && MazeY == 1 && noun == w_obj ) {
                    rfalse;
                }
                x = 100;
                y = 100;
                if( noun == n_obj ) {
                    x = MazeX;
                    y = MazeY - 1;
                }
                if( noun == e_obj ) {
                    x = MazeX + 1;
                    y = MazeY;
                }
                if( noun == s_obj ) {
                    x = MazeX;
                    y = MazeY + 1;
                }
                if( noun == w_obj ) {
                    x = MazeX - 1;
                    y = MazeY;
                }
                if( x == 100 ) {
                    "The maze is constructed with rectangular grid-lines of privet, so you can only proceed north, east, south or west.";
                }
                if( MazeBoundary(x,y) == 1 ) {
                    "The privet hedge is in the way.";
                }
                MazeX = x;
                MazeY = y;
                if( location == Patio_in_Maze ) {
                    location = Maze;
                    move garden_roller to Maze;
                }
                if( MazeX == 7 && MazeY == 5 ) {
                    location = Patio_in_Maze;
                    move garden_roller to Patio_in_Maze;
                }
                trigger_quotation(39);
                << Look >>;
        ],
        after [; Look: MazeDescribe(); rtrue; ],
        s_to Family_Tree,
        w_to Viewpoint_Ledge,
        description "A maze of green privet passages, all alike.",
        cant_go "The privet hedges are in the way.",
  has   light scored;

GRoom   Patio_in_Maze "Patio in Maze"    
  with  name 'patio' 'flagstone',
        before [;
            Go:
                if( noun == d_obj or u_obj )
                    rfalse;
                if( player notin garden_roller ) "Mustn't tread on the grass now!";
                return RunRoutines(Maze, before);
        ],
        after [; Look: MazeDescribe(); rtrue; ],
        u_to "Up?  Are we playing the same game?",
        d_to Crypt,
        description "This is an old stone patio in the heart of the garden maze. A missing flagstone offers an intriguing dark prospect beneath.",
        cant_go "The privet hedges are in the way.",
  has   light scored;

Object  -> marble_rose "marble rose"     
  with  name 'marble' 'rose' 'flower',
        before [;
            Insert, Give:
                if( second == statue_of_Diana )
                            "It would look perfect in Diana's hair, but her head is far too high to reach.";
        ],
        initial "Sticking out of some soft earth is a perfectly-carved marble rose.",
        angel_hint "Perfection set in stone. Not a gift for mortal women!",
  has   ;

GRoom   Viewpoint_Ledge "Viewpoint Ledge"        
  with  name 'motorway' 'coaches',
        before [;
            Examine:
                if( player in garden_roller && noun == plaque ) "The writing's too small from here.";
            Go:
                if( noun == e_obj && player notin garden_roller )
                    "For the sake of the grass, you can't go that way.";
        ],
        e_to Maze,
        description "This flagstoned rampart on the hillside looks across the valley, down (unfortunately) 
            to the motorway below. Coaches pass by, reminding you of the rapidly approaching time when visitors
            will have to be let in again for the summer. The only safe way to go is back east into the maze. To
            one side is a plaque.",
        cant_go "The hillside is too steep.",
  has   light scored;

Object  -> plaque "plaque"       
  with  name 'plaque',
        description "~This viewpoint, one of the finest in the county, was laid down by Capability Meldrew, 
            a well-known landscape gardener of his day. It was intended as one of the rewards of the garden maze,
            and was constructed c. 1808 after an earlier folly on the site collapsed.~",
  has   scenery;

Object  -> miniature "miniature" 
  with  name 'miniature' 'plastic' 'etching',
        door_to Folly,
        initial "A miniature plastic etching rests on the plaque.",
        description "No larger than a playing card, it depicts the Folly which used to stand on the hillside outcrop.",
        devil_hint "What's the point of a drawing so small it might almost be a playing card?",
  has   ;

Object Folly "Folly"    
  with  name 'wain' 'hay' 'valley',
        after [; default: MazeX = 0; MazeY = 1; rfalse; ],
        e_to Maze_Foundations,
        description "This is a rampart on the hillside, a natural ledge leading east. Down below in the valley, 
            rough cottages surround a church. Labourers toil in the fields, and a hay wain is being pulled across
            the river.^^Towering over you is a monstrously awful piece of architecture, a Folly. The freestanding
            tower has no appreciable purpose and no apparent entrance. The latter is just as well since it looks
            extremely unsafe.",
        cant_go "The hillside is too steep.",
        section T_GARDEN_PAST,
  has   light scored;

Object -> Folly_tower "Folly tower"     
  with  name 'folly' 'tower' 'bricks' 'unsafe',
        description "Decidedly unsteady.",
  has   scenery;

Object -> bean_pole "bean pole" 
  with  name 'bean' 'pole' 'beanpole',
        after [;
            Take:
                if( self hasnt general ) {
                    rfalse;
                }
                give self general;
                StartTimer(self,5);
                rfalse;
        ],

        initial "A bean pole, of the kind used to grow climbing plants, rests against the side of the tower.",
        time_left 0,
        time_out [;
            if( game_section == T_GARDEN_PAST ) {
                print "^There is a great rumbling sound and then a thunderous avalanche of stone cascades down the 
                    hillside into the valley. The Folly has collapsed!  Capability Meldrew and his workmen come
                    running to investigate. In the ensuing confusion, they come across you and, of course, blame
                    you for their incompetent masonry. You are hauled up before the county assizes...^";
                deadflag = AUSTRALIA;
            }
        ],
        rod_assoc rod_of_stalking,
        devil_hint "Whatever you do, it'll always be a bean pole.",
  has   general hidden_rod;

Object Maze_Foundations "Maze Foundations"      
  with  before [ x y;
            Go:
                if( MazeX == 4 && MazeY == 6 && noun == s_obj ) {
                    rfalse;
                }
                if( MazeX == 0 && MazeY == 1 && noun == w_obj ) {
                    rfalse;
                }
                x = 100;
                y = 100;
                if( inp1 == n_obj ) {
                    x = MazeX;
                    y = MazeY - 1;
                }
                if( inp1 == e_obj ) {
                    x = MazeX + 1;
                    y = MazeY;
                }
                if( inp1 == s_obj ) {
                    x = MazeX;
                    y = MazeY + 1;
                }
                if( inp1 == w_obj ) {
                    x = MazeX - 1;
                    y = MazeY;
                }
                if( inp1 == ne_obj ) {
                    x = MazeX + 1;
                    y = MazeY - 1;
                }
                if( inp1 == nw_obj ) {
                    x = MazeX - 1;
                    y = MazeY - 1;
                }
                if( inp1 == se_obj ) {
                    x = MazeX + 1;
                    y = MazeY + 1;
                }
                if( inp1 == sw_obj ) {
                    x = MazeX - 1;
                    y = MazeY + 1;
                }
                if( x == 100 ) {
                    "The maze is only two-dimensional.";
                }
                if( CheckMaze2(x,y) ~= 0 ) {
                    "The wooden fence is in the way.";
                }
                MazeX = x;
                MazeY = y;
                << Look >>;
        ],
        after [;
            Look: MazeOldDescribe(); rtrue;
            Drop: deadflag = PARADOX; "You feel an alarming wrench in your insides.";
        ],
        s_to Tree_Planting,
        w_to Folly,
        description "A square grid of plots of grass and seedbeds, all alike.",
        section T_GARDEN_PAST,
  has   light;

Object Tree_Planting "Tree Planting"    
  with  after [; deadflag = AUSTRALIA; ],
        description "Capability Meldrew and his gang of workmen are delicately planting a sapling plane tree 
            here. Your disturbance annoys them immensely and you are immediately arrested for vagrancy and
            theft. After a few months in prison, you are hauled up before the County Assizes and sentenced...",
        section T_GARDEN_PAST,
  has   light;

