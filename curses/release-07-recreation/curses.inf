Constant DEBUG;
Constant SACK_OBJECT = canvas_rucksack;
Constant MAX_CARRIED = 5;

! game_area
Constant MODERN = 1;
Constant UNREAL = 2;
Constant HAMBURG = 3;
Constant TAROTAREA = 4;
Constant GARDEN = 5;
Constant GARDEN_PAST = 6;
Constant ANCIENT_BRITAIN = 7;
Constant DREAMING = 8;

! final_state
Constant DIED = 1;
Constant WON = 2;
Constant FAILED = 3;
Constant DESTROYED_UNIVERSE = 4;
Constant AUSTRALIA = 5;
Constant PARADOX = 6;
Constant MYTH = 7;
Constant PRISON = 8;

Constant TASKS_PROVIDED;
Constant NUMBER_TASKS = 18;
Constant MAX_SCORE = 300;

Array task_scores -> 3 7 7 10 3 3 5 5 2 2 3 50 3 1 8 4 0 0;

Constant SCORE_HAMBURG = 0;
Constant SCORE_TORCH = 1;
Constant SCORE_JOSHUA = 2;
Constant SCORE_SECRETDOOR = 3;
Constant SCORE_DEMIJOHN = 4;
Constant SCORE_WAITER = 5;
Constant SCORE_WAND = 6;
Constant SCORE_AIMWAND = 7;
Constant SCORE_WIRELESS = 8;
Constant SCORE_CALENDAR = 9;
Constant SCORE_CHOCOLATE = 10;
Constant SCORE_ANDROMEDA = 11;
Constant SCORE_BATTERY = 12;
Constant SCORE_TOURIST = 13;
Constant SCORE_INFINITY = 14;
Constant SCORE_TRICLINIUM = 15;
Constant SCORE_DOLEMN = 16;
Constant SCORE_BISCUIT = 17;

Global MazeX;
Global MazeY;
Global game_section = MODERN;
Global deterministic_transport = false;
Global good_try_bonus;

! The devil's knowledgebase:
Constant T_DREAM = 1;
Constant T_FLASHLIGHT = 2;
Constant T_JEMIMA = 3;
Constant T_NOVEL = 4;
Constant T_FLOWERS = 5;
Constant T_MEDICINE = 6;
Constant T_WINE = 7;
Constant T_BOTTLE = 8;
Constant T_HEAVEN = 9;
Constant T_HELL = 10;
Constant T_POSTCARD = 11;
Constant T_JOSHUA = 12;
Constant T_ISAAC = 13;
Constant T_ARCANUM = 14;
Constant T_MERLIN = 15;
Constant T_HAT = 16;
Constant T_BOOK = 17;
Constant T_EBENEZER = 18;
Constant T_CARDS = 19;
Constant T_RODS = 20;
Constant T_TAROT = 21;
Constant T_BOAT = 22;
Constant T_MOUSE = 23;
Constant T_KEY = 24;
Constant T_RADIO = 25;

! Angel's KB:
Constant AT_HEAVEN = 1;
Constant AT_HELL = 2;
Constant AT_RODS = 3;
Constant AT_MAZE = 4;
Constant AT_MASTER = 5;
Constant AT_INFINITY = 6;
Constant AT_ANDROMEDA = 7;
Constant AT_MURAL = 8;
Constant AT_FOLLY = 9;
Constant AT_ZEUS = 10;
Constant AT_BOMB = 11;
Constant AT_SACRIFICE = 12;
Constant AT_LUCK = 13;
Constant AT_FIRE = 14;

Constant Story "CURSES";
Constant Headline ": An Interactive Diversion^Copyright (c) 1993 by Graham Nelson. New players should type ~help~.^";

Property angel_hint;
Property devil_hint;
Property rod_assoc;

Array score_array2 -> 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;

Attribute hidden_rod;
Attribute rod_attr;
Attribute rod_charged;
Attribute card;
Attribute wire;

Replace BurnSub;
Replace PraySub;
Replace DrinkSub;
Replace SingSub;
Replace DigSub;
Replace ScoreSub;
Replace WaveSub;
Replace WakeSub;
Replace FillSub;
Replace MildSub;
Replace SorrySub;

Include "Parser";
Include "VerbLib";

Global debug_mode;
Global rod_score;
Global KnowLanguages;

[ BurnSub;
    "In this game, arson is (usually) forbidden.";
];

[ PraySub;
    "The heavenly host can be quite helpful in this game, but you'll have to ask them directly.";
];

[ SorrySub;
    if( carbolic_soap has concealed )
        "Oh, don't apologise.";
    "Sorry isn't good enough!";
];

[ DrinkSub;
    if( location == Down_by_River )
        "Ugh!  What foul water.";
    if( location == Garden_Stream ) 
        "Just about drinkable. Not much fun, though.";
    if( location == Stream )
        "Delicious clear and unpolluted.";
    if( location == Sea_Shore )
        "Salt water!  You must be joking.";
    "There's nothing suitable to drink here.";
];

[ HelpSub;
    "Newcomers to the game may like to try the following:^^  ~help instructions~   gives some basic information,^  ~help credits~        runs the game credits,^  ~help legal~          makes some legal disclaimers,^  ~help commands~       details some common commands.";
];

[ HelpSpecialSub  ;
    new_line;
    if( noun == 'instructions' )
        "Welcome to CURSES, an interactive adventure game set initially in 
         and around Meldrew House, an old family seat in the shires of England.
         You play the part of the current heir to the house. As for what you 
         should do, try to keep in mind that your aim is simply to find that 
         map of Paris so you can go on holiday - you certainly haven't any 
         enormous quests in mind. Still, it would be interesting to find 
         out:^", "^  Just how real is what the Tarot cards show?^  What do 
         sixth century politics have to do with you?^  Surely Greek myths 
         can't come into this?^  What on earth is wrong with your entire 
         family?^  Do the National Trust have sinister motives?^  Can modernist 
         poetry really be bad for you?^  What are daisies for?  Or goats, 
         for that matter?^  Should you rescue someone who doesn't want you to?^^", 
         "To finally understand the secret, you will need to reach the Master 
         Game, a concluding game-within-a-game buried deep in the past. 
         A quick solution takes about 700 turns. Good luck!";
    if( noun == 'credits' )
        "^Release 7 is the earliest version to be posted to the 
         interactive-fiction archive. Updated versions may be posted if 
         enough small improvements are made.^", "^The author wishes to
         thank Richard Tucker, Gareth Rees, David Moore, Mark Knibbs and
         Toby Nelson for helpful comments. He also wishes to apologise
         to the late Mr T. S. Eliot and to acknowledge the editors of
         the Oxford History of England for helping to provide a thin
         veneer of intellectual respectability.^^Inform, the compiler
         which produced this file, could not have been written without
         the archaeological investigations of the InfoTaskForce.";
    if( noun == 'legal' )
        "^This story file is copyright (c) Graham Nelson 1993, but may be 
         freely distributed and used provided no profit is involved and
         provided it is not modified in any way. Although it conforms
         to some (not quite all) file standards previously used by a
         certain computing company, it contains no fragments of code
         written by anyone other than the author. It was not produced by
         modification of any existing story file. The author was extremely
         tempted to hide an important clue here, but thought better of
         it. No trade marks are (knowingly) used. All characters and
         locations are imaginary, and any resemblance to real persons
         or places is accidental.";
    if( noun == 'commands' )
        "Basic commands consist either of a verb on its own, or a verb with
         one or more nouns. For instance, to see where you are type ~look~. 
         Some verbs can also have more elaborate forms; for instance you could 
         also look at, inside or under something. There are about 675 English 
         words understood by ~Curses~, so most reasonable synonyms are allowed.^^
         To pick something up, ~take thing~ and to drop it again, ~drop thing~. 
         To see what you have, type ~take inventory~ or just ~inventory~. You can 
         move about with commands such as ~go west~, or just ~west~ for short. 
         (It is assumed that you are blessed with an excellent sense of 
         direction.)^^", "Some commands can act on more than one thing. You can 
         ~drop all~, which will drop everything (except things you're wearing), 
         for instance. Or if you found a packing case with a number of things in, 
         you could type such things as:^^    remove everything but the blue 
         key^    get all the coins except ten, twenty and fifty^^(Containers 
         may also be emptied or emptied into each other.)  If you are not explicit 
         enough, sometimes the game can infer what you mean, but at other times 
         it will ask for further details. It might have replied to the first 
         line above by saying^^    (from the yellow packing case)^^", "so that 
         you know what has been assumed on your behalf. If there had been two 
         blue keys you might reasonably have meant, it would reply with something 
         like^^    Which do you mean, the blue doorkey or the Blue Moon Agency 
         key?^^You may either tell it which, or else give up and do something 
         else instead. If you don't mind which key, you can always say 
         something such as:^^    drop a key into the slot^^and the game will 
         make a sensible choice and tell you what it was.^^", "~Curses~ sometimes 
         assumes commands which you implicitly make, but always tells you what 
         they are in brackets. For instance:^^    >look up bach in book^    (first 
         taking the Encyclopaedia of Composers)^    (putting the tuning fork in 
         the rucksack to make room)^    ~J. S. Bach (1685-1750) had a pet 
         aardvark called Nigel...^^", "~it~ refers to the last thing manipulated 
         and ~again~ repeats the last command.^^You can ~save~, ~restore~ or 
         ~restart~ the game at any time, or indeed ~quit~ or ask for your 
         ~score~, which also tells the time and thus will be consulted every so 
         often by alert players. ~fullscore~ or ~full~ gives a breakdown of the 
         score. As an aide-memoire the command ~objects~ tells you where you 
         left things you once had, and ~places~ says where you have been. 
         These commands do not take up any game time, and nor does anything 
         the game didn't understand.^^", "Some jaundiced players get tired of 
         the long descriptions of places, and they can type ~short~ (or 
         ~superbrief~) to make the game only give short ones. Amnesiac players, 
         on the other hand, may like to use ~long~ (or ~verbose~) to give only long 
         ones. Either kind can go back to the usual state of affairs with ~normal~ 
         (or ~brief~).^^", "Simple typing mistakes can sometimes be corrected 
         just by typing ~oops~ followed by the word you had intended to type, 
         so for instance:^^    drop fish in buket^    oops bucket^^The game 
         knows several useful abbreviations: i for inventory, ne for northeast 
         (and so on), l for look, g for again, o for oops, x for examine, z 
         for wait (short for ~zzz~ - sorry about that).^^", "You can sometimes 
         enter larger objects you find. You might well be able to get in a 
         tractor, for instance, though driving it around might be harder.^^", 
         "From time to time, you will wish to speak to other people. If 
         you only have a single word to say, you could use commands 
         like^^    answer yes^    say boo to goose^^(Text in quotation marks is 
         not allowed.)  The game will usually guess who you want to talk to 
         if you miss off the name. A better way to talk, which allows more 
         complicated remarks, is to use commands such as^", "^    goose, 
         boo^    wine waiter, give me the bill^^though, of course, the 
         waiter may have better things to do.^Some documents may be consulted 
         in this game. For this, try commands such as^^    look up 
         chlorine^    consult periodic table about argon^^", "There are, of 
         course, many other commands for more specialised circumstances. 
         A final word of warning: cursing is strictly forbidden in this game.";
    "There's no help on that, sorry.";
];

[ XMasterSub;
    if( ~~debug_mode )
        "You can't do that.";
    TriggerEndgame();
];

[ XAsncSub; 
    if( ~~debug_mode )
        "You can't do that.";
    KnowLanguages = true;
    turns = turns + 300;
    "You spend 300 minutes learning to speak Anglo-Saxon, Norse and Celtic.";
];

[ XCheatSub obj ;
    if( ~~debug_mode )
        "You can't do that.";
    obj = rod_of_fire;
    move obj to Infinity_Symbol;
    obj = rod_of_returning;
    move obj to Infinity_Symbol;
    obj = rod_of_luck;
    move obj to Infinity_Symbol;
    obj = rod_of_bronze;
    move obj to Infinity_Symbol;
    obj = rod_of_infinity;
    move obj to Infinity_Symbol;
    obj = rod_of_stalking;
    move obj to Infinity_Symbol;
    obj = rod_of_sacrifice;
    move obj to Infinity_Symbol;
    obj = rod_of_husbandry;
    move obj to Infinity_Symbol;
    obj = Star_card;
    move obj to Grahams_Lair;
    obj = Maiden_card;
    move obj to Grahams_Lair;
    obj = Castle_card;
    move obj to Grahams_Lair;
    obj = tourist_map_of_Paris;
    move obj to Grahams_Lair;
    obj = flash;
    move obj to Grahams_Lair;
    obj = nasty_battery;
    move obj to flash;
    obj = timer_detonater;
    move obj to flash;
    give timer_detonater ~static;
    obj.number = 0;
    obj = canvas_rucksack;
    move obj to Grahams_Lair;
    obj = Tarot_box;
    move obj to Grahams_Lair;
    "Ok.";
];

[ XyzzySub;
    "For a moment you can almost hear a hoarse voice say something to you. But it passes.";
];

[ QuitNowSub;
    @quit;
];

[ SingSub ;
    "You do your best to sing the opening from Schutz' sacred concerto 
     ~O bone Jesu, fili Mariae~ (SWV 471). Unfortunately your best is
     such that the result is indistinguishable from ~How much is that
     doggie in the window?~.";
];

[ HintsSub;
    "There are hints built into this game, but you will have to find out for yourself how to get them.";
];

[ MildSub ;
    "It's good that you can express your frustration in such a mild way.";
];

[ FillSub ;
    if( location == Down_by_River || location == Garden_Stream || location == Stream || location == Sea_Shore )
        "Don't go carting water about, for heaven's sake, it'll only make a mess of your clothes and all your spare clothes are packed.";
    "Try ~get all~ and then ~put all in...~.";
];

[ DigSub ;
    "There are three problems with that. One, the ground isn't really suitable, two, you have nothing to dig with and three, you have always loathed gardening.";
];

[ WakeSub ;
    if( game_section == DREAMING )
        "You are unable to shake off the dream.";
    "The dreadful truth is, this is not a dream.";
];

[ XDebugSub ;
    if( noun == 57 ) {
        debug_mode = true;
        "Ok.";
    }
    "You can't do that.";
];

[ StrikeSub ;
    if( parent(noun) ~= player )
        "But you aren't holding it.";
    if( noun hasnt rod_attr )
        print_ret "You ineffectually bash ", (the) noun, " on the ground.";
    if( noun has rod_charged ) {
        deadflag = DIED;
        "The already-charged rod explodes with cataclysmic violence, burying everything nearby in rubble!";
    }
    give noun rod_charged;
    Achieved(SCORE_WAND);
    if( location == Ruined_Castle_Cafe )
        "You look rather conspicuous striking the rod on the cafe table, 
         but everyone else assumes you're part of the cabaret. Anyway,
         the rod charges up as usual.";

    "The rod charges up with etherial power, drawn up from the earth through ley lines...";
];

[ PointSub func;
    if( parent(noun) ~= player )
        "But you aren't holding it.";
    if( parent(second) == player )
        "It's too fiddly pointing the rod at something you're holding.";
    if( noun hasnt rod_attr )
        "Ok. (Why?)";
    if( noun hasnt rod_charged )
        "Nothing happens.";
    Achieved(SCORE_AIMWAND);
    
    func = noun.rod_action;
    if( func == -1 )
        "Not implemented yet.";
    give noun ~rod_charged;
    func();
    rtrue;
];
    
[ PrintRank score_var;
    print ", earning you the rank of ";
    score_var = score;
    if( score_array2->11 )
        score_var = score_var - 50;

    if (score_var >= 250)
        "happy Tourist.";
    if (score_var == 249)
        "very nearly happy Tourist.";
    if (score_var >= 225)
        "Druid.";
    if (score_var >= 200) 
        "Master Navigator.";
    if (score_var >= 175) 
        "Master Voyager.";
    if (score_var >= 150) 
        "Voyager.";
    if (score_var >= 125) 
        "Explorer.";
    if (score_var >= 100) 
        "Adventurer.";
    if (score_var >= 75) 
        "Connoisseur.";
    if (score_var >= 50) 
        "Dilletante.";
    if (score_var >= 35) 
        "cynical Tourist.";
    if (score_var >= 20) 
        "experienced Tourist.";
    if (score_var >= 5) 
        "casual Tourist.";
    if (score_var >= 1) 
        "gauche Tourist.";
    if (score_var >= 0) 
        "hapless Tourist.";
    if (0 == 99 + score_var) 
        "highly negligent deity.";
    "accursed Tourist.";
];

[ PrintTaskName task_number;
    if( task_number == SCORE_DOLEMN )
        score = -50;
    switch( task_number ) {
        SCORE_HAMBURG: "reading postcard";
        SCORE_TORCH: "recharging torch";
        SCORE_JOSHUA: "exorcism";
        SCORE_SECRETDOOR: "opening secret door";
        SCORE_DEMIJOHN: "opening demijohn";
        SCORE_WAITER: "using dumbwaiter";
        SCORE_WAND: "charging a rod";
        SCORE_AIMWAND: "firing a rod";
        SCORE_WIRELESS: "exposing radio";
        SCORE_CALENDAR: "turning calendar";
        SCORE_CHOCOLATE: "placating Aunt Jemima";
        SCORE_ANDROMEDA: "rescuing Andromeda";
        SCORE_BATTERY: "uncovering battery";
        SCORE_TOURIST: "buying map of Paris";
        SCORE_INFINITY: "filling the arc";
        SCORE_TRICLINIUM: "getting into the well";
        SCORE_DOLEMN: "acquiring the mascot";
        SCORE_BISCUIT: "eating between meals";
    }
    "(something else)";
];

[ LieSub;
    if( location == Servants_Room )
        << Enter servants_bed >>;
    if( location == Alisons_Writing_Room )
        << Enter comfortable_bed >>;
    "You lie down on the floor for a while and then get up again, feeling foolish.";
];

[ ScoreSub ;
    if( deadflag == 0 ) {
        switch( game_section ) {
            MODERN: print "This is the afternoon of June 3rd, 1993, and you are in Meldrew House. ";
            UNREAL: print "It is early morning on October 5th, 1922, and you are in the Unreal City. ";
            HAMBURG: print "It is nearly midnight on October 31st, 1988, and you are in a museum in Hamburg. ";
            TAROTAREA: print "You are passing among the ancient, unearthly world of the Tarot box. ";
            GARDEN: print "It is the afternoon of June 3rd, 1993, and you are in the gardens. ";
            GARDEN_PAST: print "It is about noon on March 14th, 1808, and you are in the gardens. ";
            ANCIENT_BRITAIN: print "It is some time in the sixth century A.D., and you are in the Master Game. ";
            DREAMING: print "Time seems to have no meaning, and you are dreaming. ";
        }
        print "You have so far scored ";
    } else
        print "In that game you scored ";
    print (number) score, " out of a possible 300, in ", turns, " turns";
    PrintRank();
    rtrue;
];

[ WaveSub o ;
    o = parent(noun);
    if( o ~= player )
        "But you aren't holding it.";
    o = noun;
    if( o has hidden_rod ) {
        if (daisy_chain has worn) {
            if( daisy_chain.number == 1 ) {
                score = score + 6;
                rod_score = rod_score + 6;
                print "Light pulses around the daisy chain, then leaps out to engulf ", 
                    (the) noun, " which melts into the ";
                remove noun;
                o = noun.rod_assoc;
                move o to player;
                print_ret (name) o, "!";
            }
        }
        if( yellow_daisy has worn ) {
            score = score + 6;
            rod_score = rod_score + 6;
            print "Light pulses from the daisy behind your ear, leaping out to engulf ", 
                (the) noun, " which melts into ";
            remove noun;
            o = noun.rod_assoc;
            move o to player;
            if( o has rod_attr ) {
                print (the) o;
            }
            if( o hasnt rod_attr ) {
                print (a) o;
            }
            "!";
        }
    }
    "You look ridiculous waving ", (the) o, ".";
];


[ DeathMessage;
    if (deadflag == DIED) {
        print " You have died ";
    }
    if (deadflag == WON) {
        print " You have won ";
    }
    if (deadflag == FAILED) {
        print " You have missed the point entirely ";
    }
    if (deadflag == DESTROYED_UNIVERSE) {
        print " You have disembodied the entire universe ";
    }
    if (deadflag == AUSTRALIA) {
        print " You have been transported to Australia ";
    }
    if (deadflag == PARADOX) {
        print " You have been annihilated by a temporal paradox ";
    }
    if (deadflag == MYTH) {
        print " You have become a constellation ";
    }
    if (deadflag == PRISON) {
        print " You have been imprisoned as a terrorist ";
    }
];

class Tarot
  with  article "the",
        description [;
            if( self provides door_to )
                "A beautifully realistic picture. ";
            rfalse;
        ],
        list_together "tarot cards",
  has   card;

class Rod
  with  list_together "rods",
        article "the",
        before [;
            Wave: "That seems to be not quite how they work...";
        ],
        description [;
            print (The) noun, " is ";
            if( self has rod_charged )
                "charged up.";
            "uncharged.";
        ],
  has   rod_attr;

! early versions of Timers. Leaving in until I recode them

[ DecrementTimer o i ;
    i = o.number;
    if (i == 0) {
        rfalse;
    }
    --i;
    o.number = i;
    if (i > 0) {
        rfalse;
    }
    rtrue;
];

[ HandleObjectsSub o p; 
    objectloop( o ) {
        if( o hasnt moved )
            continue;
        print (the) o;
        p = parent(o);
        if( p == player )
            print "  (held)";
        else if( p has animate )
            print "  (given away)";
        else if( p has visited || p has enterable )
            print "  (in ", (name) p, ")";
        else if( p has container )
            print "  (inside ", (name) p, ")";
        else
            print "  (lost)";
        new_line;
    }
];

[ DarkToDark ;
    if( game_section == MODERN ) {
        deadflag = FAILED;
        "As you unwisely blunder about in the dark, you put a foot wrong and crash
         through a thin plaster roof into one of the upstairs bedrooms,
         happily landing on the bed. In later years it becomes a family
         joke that you demolished half the house for a tatty old tourist
         map.";
    }
    deadflag = DIED;
    "As you step falteringly through the darkness, cowardly but evil creatures devour you whole!";
];

[ WashMouthSub;
    if( second ~= carbolic_soap )
        "That's not something you can wash with.";
    if( noun ~= 'mouth' )
        "You're on the right lines there.";
    remove carbolic_soap;
    give carbolic_soap concealed;
    "Ugh, it tastes absolutely ghastly. But you feel better for it.";
];

Object carbolic_soap "carbolic soap"
  with  name 'soap' 'carbolic' 'cake',
        description "~For foulmouths everywhere~.",
        article "a cake of",
        react_before [;
            Go: "You're going nowhere until you make amends for that nasty bad language.";
        ],
        devil_hint "That's the spirit, keep it up!",
        angel_hint "Really!  How disgraceful!",
  has   concealed;

Include "house.inf";
Include "unreal.inf";
Include "hamburg.inf";
Include "premonition.inf";
Include "greece.inf";
Include "endgame.inf";

[ Initialise;
    location = Attic;
    move crumpled_piece_of_paper to player;
    move electric_torch to player;
    move chocolate_biscuit to player;
    StartDaemon(old_smudged_battery);
    print "^^^^It's become a matter of pride now not to give up. That tourist map of Paris must be up here somewhere in all this clutter, even if it has been five years since your last trip. And it's your own fault. It looks as if your great-grandfather was the last person to tidy up these lofts...^^";
];

Include "Grammar";
Include "newverbs.inf";
